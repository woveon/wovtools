#!/usr/bin/env bash
  
FOLD=$(tput cols)
DIDCOMMAND=0
#DVOL_kube='wovtoolsvol_kube'
ORIGINALPROFILE=
  # --- set when entering a container

export PATH=$PATH:/usr/local/bin/wovlib


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0`

--start/-s    : starts the wovtools container
--stop/-S     : stops the wovtools container
--test/-t     : tests if the wovtools container is running
--enter/-e    : enters the container (bash shell)

EOF
}

ISWOVPROJECT="0"
. wov-env-ops fDisplayOptions "$@"




#function doCreateVolume()
##{
## See if it exists, create it otherwise
#docker volume list | grep "${DVOL_kube}" > /dev/null
#if [ $? -ne 0 ]; then
#  echo "...creating volume: '${DVOL_kube}'"
#  docker volume create "${DVOL_kube}"
#
#  # Spawn a container to put information into
#  docker container create --name dummy -v "${DVOL_kube}:/root/.kube" alpine
#  docker cp ${HOME}/.kube/config dummy:/root/.kube/config
#  docker rm dummy
#fi
#}


# --------------------------------------------------------------------- 
# RETURNS yes, no, stopped
# --------------------------------------------------------------------- 
function isWovContainerRunning() 
{
  local RETVAL="no"
  local R=
  local RR=
  local Re=

  R=$(docker inspect wovtools 2>&1 ) ; Re=$?
  # >&2 echo "R1 ${R}"
  if [ $Re -eq 0 ]; then

    RR="$(echo ${R} | jq '.[0].State.Running')"
    # >&2 echo "RR1 ${RR}"
    if [ "${RR}" == "true" ]; then RETVAL="yes";
    else RETVAL="stopped"; fi
  fi

  echo "$RETVAL"
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doStopWovContainer()
{
  local retval=
  docker stop wovtools ; retval=$?
  if [ $retval -ne 0 ]; then l_error "Failed to stop wovtools container."; fi

  return $retval
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doStartWovContainer()
{
  local R=
  local Re=
  
  R=$(isWovContainerRunning)
  if [ "${R}" == "no" ]; then
    l_ "...starting container 'wovtools'"
    l_ "  ...using host network (access postgres)"
    l_ "  ...using host ~/.gitconfig READONLY"
    l_ "  ...using host ~/.aws       READONLY"
    l_ "  ...using host ~/.ssh       READONLY"
    l_ "  ...using host ~/.wovtools  MOUNTED"
    l_ "  ...using host ~/.kube      MOUNTED"
    l_ "  ...using host Docker socket /var/run/docker.sock"
    docker run -t -d  \
      --name wovtools \
      --network host \
      -v ${HOME}/.gitconfig:/root/.gitconfig:ro \
      -v ${HOME}/.aws:/root/.aws:ro \
      -v ${HOME}/.ssh:/root/.ssh:ro \
      -v ${HOME}/.wovtools:/root/.wovtools \
      -v ${HOME}/.kube:/root/.kube \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -e KOPS_STATE_STORE=${KOPS_STATE_STORE} \
      -e KOPS_CLUSTER_NAME="wov-aws-va-grape.alywan.com" \
      wovtools/wovbase:3

#      -p 5432:5432 \
#      --mount source=wovbase-kube,target=/root/.kube 
  elif [ "${R}" == "yes" ]; then
    l_warn "Already running."
  elif [ "${R}" == "stopped" ]; then
    l_warn "Container is STOPPED."
    l_ "Restart by: 'docker start wovtools'"
    l_ "Remove by : 'docker rm wovtools'"
  else
    l_error "Unknown result of '${R}'."
  fi
}


# --------------------------------------------------------------------- 
# Called when exiting the WovContainer to restore terminal settings
# --------------------------------------------------------------------- 
function _onFinish()
{
  [ "$(uname -s)" == "Darwin" ] && echo "tell app \"Terminal\" to set current settings of window id ${ORIGINALWINDOW} to settings set \"${ORIGINALPROFILE}\" " | osascript
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doEnterWovContainer()
{

  if [ "$(uname -s)" == "Darwin" ]; then
    local asq=$(osascript <<EOF
tell application "Terminal"
  set oprof to name of current settings of window 1 where frontmost is true
  set wid to id of window 1 where frontmost is true
  return "" & wid & ":" & oprof
end tell
EOF
)
    local asqs=( ${asq//:/ } )
    ORIGINALWINDOW="${asqs[0]}"
    ORIGINALPROFILE="${asq:${#asqs[0]}+1}"
    # echo " ORIGINALWINDOW ${ORIGINALWINDOW}"
    # echo " ORIGINALPROFILE ${ORIGINALPROFILE}"
  fi

  trap _onFinish EXIT

  [ "$(uname -s)" == "Darwin" ] && echo "tell application \"Terminal\" to set current settings of window id ${ORIGINALWINDOW} to settings set \"Ocean\" " | osascript

  #echo "tell application "Terminal" to set current settings of window 1 where frontmost is true to settings set \"Ocean\" " | osascript
  #echo 'tell app "Terminal" to set current settings of first window to settings set "Ocean" ' | osascript
  docker exec -it wovtools /bin/bash
  _onFinish
  trap - EXIT
}






# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [[ "$1" == "--help" || "${1}" == "-h" ]]; then
    shift
    fDisplayOptions
    WOV_DODEFAULTCOMMAND=1
    exit 0

  elif [[ "$1" == "--test" || "$1" == "-t" ]]; then
    shift
    isWovContainerRunning
    if [ $? -eq 1 ]; then echo true;
    else echo false; fi
    DIDCOMMAND=1

  elif [[ "$1" == "--enter" || "$1" == "-e" ]]; then
    shift
    doEnterWovContainer
    DIDCOMMAND=1

  elif [[ "$1" == "--start" || "$1" == "-s" ]]; then
    shift
    doStartWovContainer
    DIDCOMMAND=1

  elif [[ "$1" == "--stop" || "$1" == "-S" ]]; then
    shift
    doStopWovContainer
    DIDCOMMAND=1

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


if [ $DIDCOMMAND -eq 0 ]; then
  R=$(isWovContainerRunning)
  if [ "${R}" == "yes" ]; then
    doEnterWovContainer
  elif [ "${R}" == "stopped" ]; then
    l_warn "Wovtools Docker container is stopped."
    l_ "Restart by: 'docker start wovtools'"
    l_ "Remove by : 'docker rm wovtools'"
    exit 3
  elif [ "${R}" == "no" ]; then
    l_warn "No running wovtools Docker container to join. Try 'wovc --start'."
    exit 4
  else
    l_error "Unknown result of '${R}'."
    exit 1
  fi
fi
