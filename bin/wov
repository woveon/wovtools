#!/usr/bin/env bash
  



# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` 

Displays status of WovTools environment.

  --commands : show commands

  --(show|hide)-kube : show/hide Kubernetes on status (default is hide)
  -k/K               : show/hide Kubernetes on status (default is hide)

EOF
}

. wov-env-ops fDisplayOptions "$@"

SHOWPERSIST=1
SHOWSYSTEM=1
SHOWKUBE=0


# ---------------------------------------------------------------------
# display commands
# ---------------------------------------------------------------------
function fDisplayCommands()
{

  cat <<EOF | fold -w ${FOLD} -s


# ENVIRONMENT:
- wov-env-build  - Build a CLUSTER configuration.
- wov-env        - Export a CLUSTER configuration as variables for scripts. 


# COMMANDLINE (CLI):
- wov-aws        - Help
- wov-cd         - Changes directory to the *project* directory. These projects are defined in the wovtools file, found in your HOME directory.
- wov-bastion    - Lookup information about the bastion host
- wov-bastion-connection - Manages an ssh connection to a bastion host for the Kubernetes cluster.
- wov-cmd        - Runs a command found in the cmds directory.
- wov-ed         - Opens an editor to edit the project's WovTools src or compiled resource file.
- wov-ls         - Lists information of the current file space.
- wov-ns         - Display namespace information
- wov-db         - Connect to a database via SSL tunnelling through the bastion host and has db utilities.
- wov-db-cloud   - Manages database cloud resources.
- wov-p          - Takes a k8s pod stem and returns the name of the matching pod in a namespace (--ith n, to match *nth* pod).
- wov-plog       - Connects to a running pod (via podstem) and logs its data, with a -f to follow it.


# VIRTUAL HOST DEV:
- wov-vh         - Virtual host commands for development in a pod in the cluster.
- wov-vh-pushgit - This script pushes the project's git repo to vh in a safe manner.
- wov-vh-pulldir - Pulls from the vh as vh:ARG1 which is the working dir on pod, to local directory.


#PUSH to ARCHIVE: BUILD and PUSH
- wov-push-container - Pushes the container(s) by building and pushing to the archive.
- wov-push-k8s       - Pushes the Kubernetes files to the archive. (was wov-build-conf or wov-arch-conf)
- wov-push-db        - (previous wov-db-commit) This moves database changes for the current checked in code (pver) into the db archive for versioning.
- wov-push           - Formal push of a version into the archive.


# CLUSTER DEV:
- wov-deploy-service - Runs, tests or kills a service for this Kubernetes context (ex. a database, helm chart, etc).
- wov-deploy-info    - Shows information of a running project
- wov-deploy         - Deploys and updates a running kubernetes project from an archive.


# INTERNAL:
- wov-git-check - Checks that the git archives on path(s) are committed and pushed to origin.
- wov-push-container-buildcheck - Checks if the arg1 container needs to be built.
- wov-ns-check  - Ensures that the Kubernets namespace and git branch align
- wov-compile
- wov-pwait     - Waits for a pod (full name) to enter the running state, by continuous polling. 
- wov-pshell


# CLOUD: (tailors WovTools to a Cloud provider)
- wov-env-aws   -


# UNDER DEVELOPMENT:
- wov-deploy-cl           - (UNDER DEV) Builds a cluster.
- wov-db-deploy -
- wov-init      - under dev


# IGNORE: (will be deleted or under development)
- wov-mod
- wov-envg
- wov-hbs
- wov-portforward
- wov-project
- wov-stage
- wov-users
- wov_stage-select
- wovg-dir



EOF
}


function doDisplayStatus()
{
  . wov-env-loader
  . <(wov-env --exports)
  . wov-push-common
  local pvergit=$(wov-git-check -q 2>&1 2> /dev/null;                                if [ $? != 0 ]; then echo "*"; fi )
  local svergit=$(wov-git-check -q ${WOV_BASEDIR}/wovtools/secrets 2>&1 > /dev/null; if [ $? != 0 ]; then echo "*"; fi )
  local DEPNS=$(kubectl -n ${WOV_NS} get namespaces ${WOV_PROJECT}-${WOV_STAGE}  -o json)
  local pverconf=$(echo ${DEPNS} | jq -r .metadata.labels.WOV_PVER)
  local sverconf=$(echo ${DEPNS} | jq -r .metadata.labels.WOV_SVER)
  if [ "${pverconf}" == "null" ]; then pverconf='-'; fi
  if [ "${sverconf}" == "null" ]; then sverconf='-'; fi
  local deployedat=$(echo ${DEPNS} | jq -r .metadata.labels.WOV_DEPLOYED)


  echo ""
  figlet ${WOV_PROJECT}
  fGetMicroserviceRecipes
  echo "WovTools Project '${WOV_PROJECT}'"
  echo " Local Project : ${WOV_PROJECTTITLE}"
  echo "     Local MSs : ${RECIPES[@]}"
  echo "         Stage : ${WOV_STAGE}"
  echo "        Origin : ${WOV_ORIGIN}"
  echo "       Version : ${WOV_PVER}${pvergit}_${WOV_SVER}${svergit}"

  if [ $SHOWPERSIST -eq 1 ]; then
    echo ""
    echo " Persistent Storage:"
    echo " ---"
    echo "  Data Sets : $(wov-db -lds)"
    echo "  Databases :"
    DBS=( ${WOV_DATABASES} )
    for k in ${DBS[@]}; do
      local dd=
      if [ -e "${WOV_BASEDIR}/wovtools/db/${k}.deltas" ]; then dd="no"; else dd="has"; fi
      echo "    ${k} running(v$(wov-db ${k} --wdb-ver)) : ${dd} deltas"
    done
  fi

  if [ $SHOWSYSTEM -eq 1 ]; then
    echo ""
    echo " System: '${WOV_NS}'"
    echo " ---"
    echo "  Cluster       : ${WOV_CLUSTER} - ${WOV_cluster_dns_domain}"
    echo "  Configured    : v${pverconf}_${sverconf}"
    if [ "${deployedat}" != "null" ]; then
      echo "  Deployed      : $(date -r ${deployedat}) (epoc ${deployedat})"
    else
      echo "  Deployed      : undeployed"
    fi
    echo "  Microservices :"

    fGetMicroserviceDeployments
    for r in ${MSDEPLOYMENTS[@]}; do
      #echo "r: ${r}"
      local depraw=$(kubectl -n ${WOV_NS} get deployment "${r}" -o json 2> /dev/null)
      local depimage=$(echo ${depraw} | jq -r '.spec.template.spec.containers[0].image')
      local depimagebits=( ${depimage//:/ } )
      #echo "depimagebits: ${depimagebits[@]}"

      local selector=`kubectl -n ${WOV_NS} get services "${r}" -o json 2> /dev/null | jq -r ".spec.selector.app"`
      if [ "${selector}" == "${r}" ]; then selector="self"; fi

      if [ "${depimagebits[1]}" == "" ]; then depimagebits[1]='not running'; fi
      if [ "${selector}" == "" ]; then selector='not running'; fi
      echo "    ${r} image(${depimagebits[1]}) serviceRouting(${selector})"
    done
fi


  if [ $SHOWKUBE -eq 1 ]; then
    echo ""
    echo " Kubernetes:"
    echo " ---"
    echo "  Deployments:" ; kubectl -n ${WOV_NS} get deployments | sed 's/^/    /'
    echo "  Pods       :" ; kubectl -n ${WOV_NS} get pods        | sed 's/^/    /'
    echo "  Services   :" ; kubectl -n ${WOV_NS} get services    | sed 's/^/    /'
  fi

  echo ""

#  show database archive and deltas
#  show repos
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do


  if [ "$1" == "--commands" ]; then
    shift
    fDisplayCommands
    WOV_DODEFAULTCOMMAND=0


  elif [ "$1" == "--show-kube" ] || [ "$1" == "-k" ]; then
    shift
    SHOWKUBE=1
  elif [ "$1" == "--hide-kube" ] || [ "$1" == "-K" ]; then
    shift
    SHOWKUBE=0


  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


if [ "${WOV_DODEFAULTCOMMAND}" == "1" ]; then 
  . wov-env-common
  wov-ns-check
  if [ $? -ne 0 ]; then
    l_error "Correct your Kubernetes/Git conflict and then run again."
    exit 1
  fi
  doDisplayStatus
fi
