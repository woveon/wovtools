#!/usr/bin/env bash

# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
buildargs=( "$@" )
set ""
. wov-env
#. wov-ns-check
set -- "${buildargs[@]}"


DOECHO=1
FOLD=80
HAS_SECRET=0
HAS_BUILDENV=0
HAS_CLEAN=0
SECRETDIFF=1
DONSIGNORE=0




# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Builds the environment information of a WovTools distribution. Specifically, the environment variables and K8s ConfigMap and Secrets.

  -q : quiet
  -v : verbose
  --mod X : stage modifier X used to build this (and export location). ex. '--mod local'
  -l : use local variables in build
  -s : build the secret file
  -e : build the environment files (-s assumed)
  -g : build an environment grouping file 
  --clean : cleans the cache

Stage Modifiers:
Developing locally requires port forwarding to the cluster, but also changes to configuration so that your code connects to local ports an hosts, as opposed to what it would try in the cluster. The '--mod X' switch incorporates the {{STAGE-X}} items in the secrets, and produces configuration files for conf-X.

EOF
}



# --------------------------------------------------------------------- 
# vars
# --------------------------------------------------------------------- 
SECRET_CACHE_DIR=${WOV_BASEDIR}/wovtools/cache/secrets
SECRETFILE=${SECRET_CACHE_DIR}/current.json
#LSECRETFILE=${SECRET_CACHE_DIR}/current_local.json
SECRETFILELAST=${SECRET_CACHE_DIR}/last.json
SECRETMODFILE=
SECRETMODFILELAST=

STAGEMOD=
if [ "${WOV_stagemod}" != "" ]; then
  STAGEMOD=${WOV_stagemod}
fi



# --------------------------------------------------------------------- 
# Generates the 
# --------------------------------------------------------------------- 
function fBuildSecret()
{

  # --------------------------------------------------------------------- 
  # Read config
  # --------------------------------------------------------------------- 
  SECRETFILES=( $(jq -r ".secrets.${WOV_STAGE}[] " ${WOV_BASEDIR}/wovtools/config.json 2> /dev/null) )
  if [ "$?" != "0" ]; then
    printf "\n\nERROR: no entry for stage '${WOV_STAGE}' in config.json file '.secrets'.\n"
    printf "  - You probably just need to create an entry, similar to the other stages.\n\n"
    exit 1
  fi
  # echo "SECRETFILES=${SECRETFILES[*]}"


  # --------------------------------------------------------------------- 
  # Build secret file
  # --------------------------------------------------------------------- 
  mkdir -p ${SECRET_CACHE_DIR}
  if [ "$DOECHO" == "2" ]; then echo "SECRETFILE=${SECRETFILE}"; fi
  cat > ${SECRETFILE} <<EOF
{
  "CONTEXT"  : "${K8S_CONTEXT}",
  "CLUSTER"  : "${WOV_CLUSTER}",
  "CLTYPE"   : "${WOV_CLTYPE}",
  "PROVIDER" : "${WOV_PROVIDER}",
  "REGION"   : "${WOV_REGION}",
  "FLAVOR"   : "${WOV_FLAVOR}",
  "NS"       : "${WOV_NS}",
  "PROJECT"  : "${WOV_PROJECT}",
  "STAGE"    : "${WOV_STAGE}",

  "PROJECT"            : "${WOV_PROJECT}",
  "PROJECTTYPE"        : "${WOV_PROJECTTYPE}",
  "PROJECTTITLE"       : "${WOV_PROJECTTITLE}",
  "PROJECTDESCRIPTION" : "${WOV_PROJECTDESCRIPTION}",

  "ARCHIVEREPOSITORY" : "${WOV_ARCHIVEREPOSITORY}",
  "ARCHIVEENV"        : "${WOV_ARCHIVEENV}",

  "USERNAME"  : "${WOV_USERNAME}",
  "USEREMAIL" : "${WOV_USEREMAIL}",

  "PVER" : "${WOV_PVER}",
  "SVER" : "${WOV_SVER}",

  "//LBL"   : "Chose stage then pver so user doing a lot of commits won't bury production images when listing.",
  "LBL_SRC" : "${WOV_STAGE}_${WOV_PVER}",
  "LBL_ENV" : "${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}"
}
EOF

  # remove prying eyes...
  chmod 600 ${SECRETFILE}

  # Check for file existence
  for sf in ${SECRETFILES[*]}; do
    if [ ! -e ${WOV_BASEDIR}/wovtools/secrets/$sf ]; then
      printf "\n\nERROR: file for secret build does not exist: 'wovtools/secrets/$sf'.\n"
      exit 1
    fi
  done

  # merge files in order
  for sf in ${SECRETFILES[*]}; do
    if [ "$DOECHO" == "2" ]; then echo "  ... adding secret file $sf"; fi
    jq -s ".[0] * .[1]" ${SECRETFILE} ${WOV_BASEDIR}/wovtools/secrets/$sf >> ${SECRETFILE}.1
    mv ${SECRETFILE}.1 ${SECRETFILE}
  done


#  echo "stagemod ${STAGEMOD}"
  if [ "${STAGEMOD}" != "" ]; then
    SECRETMODFILE=${SECRET_CACHE_DIR}/current-${STAGEMOD}.json
    SECRETMODFILELAST=${SECRET_CACHE_DIR}/last-${STAGEMOD}.json
    touch ${SECRETMODFILE}
    chmod 600 ${SECRETMODFILE}
    touch ${SECRETMODFILE}.1
    chmod 600 ${SECRETMODFILE}.1
    # build local secret
    # walk the keys below - then remove -local on keys, then merge... so in my build script, I merge this output with the original so that this output appends and overwrites
    cat ${SECRETFILE} | jq 'walk(if type=="object" then with_entries( if .key|=match("[\\w]*-'${STAGEMOD}']") then .key=(.key|sub("(?<a>[\\w]*)-'${STAGEMOD}'"; .a )) else . end) else . end)' > ${SECRETMODFILE}
    jq -s ".[0] * .[1]" ${SECRETFILE} ${SECRETMODFILE} > ${SECRETMODFILE}.1
    mv ${SECRETMODFILE}.1 ${SECRETMODFILE}
  fi

#  if [ "${WOV_DEVMODE}" == "local" ]; then
#    touch ${LSECRETFILE}
#    chmod 600 ${LSECRETFILE}
#    touch ${LSECRETFILE}.1
#    chmod 600 ${LSECRETFILE}.1
#    # build local secret
#    # walk the keys below - then remove -local on keys, then merge... so in my build script, I merge this output with the original so that this output appends and overwrites
#    cat ${SECRETFILE} | jq 'walk(if type=="object" then with_entries( if .key|=match("[\\w]*-local]") then .key=(.key|sub("(?<a>[\\w]*)-local"; .a )) else . end) else . end)' > ${LSECRETFILE}
#    jq -s ".[0] * .[1]" ${SECRETFILE} ${LSECRETFILE} > ${LSECRETFILE}.1
#    mv ${LSECRETFILE}.1 ${SECRETFILE}
#    rm ${LSECRETFILE}
#  fi


  # Is secret different from last run?
  # By default, is 1
  if [ -e "${SECRETFILELAST}" ]; then
    if [ "`diff ${SECRETFILE} ${SECRETFILELAST} && echo $?`" == "0" ]; then
      SECRETDIFF=0
        # --- no diff
    fi
  fi


  # mark as secret being updated
  HAS_SECRET=1

  if [ "$DOECHO" == "2" ]; then 
    echo "... SECRETDIFF=${SECRETDIFF}"; 
  elif [ "$DOECHO" == "1" ] && [ "$SECRETDIFF" == "1" ]; then 
    echo "... secret needs to be (re)built."
  fi
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fCleanCacheAll() 
{
  HAS_CLEAN=1
  _fCleanCache "conf" "k8s" "secret"
}
function fCleanK8SConf()
{
  _fCleanCache "k8s"
}
function fCleanCacheConf()
{
  _fCleanCache "conf"
}
function _fCleanCache() 
{
  BUILDDIRS=( "$*" )
  for f in ${BUILDDIRS[@]}; do
    DEST=${WOV_BASEDIR}/wovtools/cache/$f
    if [ $DOECHO -ge 2 ]; then echo "  ... clean cache in dir '${DEST}'."; fi
    rm -fR ${DEST}/* || true
  done
}



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fBuildEnv()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi

  mkdir -p ${WOV_BASEDIR}/wovtools/cache/conf
  mkdir -p ${WOV_BASEDIR}/wovtools/cache/k8s
  chmod 700 ${WOV_BASEDIR}/wovtools/cache


  # build conf (and if stagemod, do that as well)
  fCleanCacheConf
  fBuildEnvDir conf conf ${SECRETFILE}
  if [ "$STAGEMOD" != "" ]; then
    fBuildEnvDir conf conf-${STAGEMOD} ${SECRETMODFILE}
  fi

  # build k8s (no stagemod (will I regret this?... dunno))
  fCleanK8SConf
  fBuildEnvDir k8s k8s ${SECRETFILE}

  # mark as done
  HAS_BUILDENV=1

  # Update secret since it was used
  cp ${SECRETFILE} ${SECRETFILELAST}
  if [ "${STAGEMOD}" != "" ]; then
    cp ${SECRETMODFILE} ${SECRETMODFILELAST}
  fi
}


# --------------------------------------------------------------------- 
# build all .wov files 
#   from ${WOV_BASEDIR}/wovtools/$1 
#     to ${WOV_BASEDIR}/wovtools/cache/$2
# --------------------------------------------------------------------- 
fBuildEnvDir()
{

  mkdir -p ${WOV_BASEDIR}/wovtools/cache/$2
  DEST=${WOV_BASEDIR}/wovtools/cache/$2/${f%.wov}

  # Find src files to compile
  WOVFILES=$(cd ${WOV_BASEDIR}/wovtools/$1; ls *.wov 2> /dev/null)
  if [ "${WOVFILES}" == "" ]; then echo "  ... no files found in wovtools/$1/*.wov."; fi

  # Compile them
  for f in ${WOVFILES}; do

    SRC=${WOV_BASEDIR}/wovtools/$1/${f}
    DEST=${WOV_BASEDIR}/wovtools/cache/$2/${f%.wov}
    USESECRET=$3

    # check if need to compile
    if [ "${SRC}" -nt "${DEST}" ] || [ "$SECRETDIFF" == "1" ]; then
      if [ "$DOECHO" == "2" ] || [ "$DOECHO" == "2" ]; then echo "  ... build ${SRC}"; fi
      #echo " --- `basename ${DEST}` needs to be built"
#      echo "SHOULD CALL: wov-compile ${SECRETFILE} ${SRC} > ${DEST}"
      wov-compile ${USESECRET} ${SRC} > ${DEST}
    else
      if [ "$DOECHO" == "2" ]; then echo "  ... skipping ${SRC}"; fi
    fi
  done


}



# --------------------------------------------------------------------- 
# Handle Params
# --------------------------------------------------------------------- 
while [[ $1 =~ ^- ]]; do
#  echo "param '$1'"

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-i" ]; then
    shift
    DONSIGNORE=1

  elif [ "$1" == "--mod" ]; then
    shift
    # sets the modifier and resets secrets and buildenv settings
    STAGEMOD=$1
    HAS_SECRET=0
    HAS_BUILDENV=0
    shift

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-s" ]; then
    shift
    if [ "$DONSIGNORE" == "0" ]; then
      buildargs=( "$@" )
      set ""
      . wov-ns-check
      set -- "${buildargs[@]}"
    fi
    fBuildSecret

  elif [ "$1" == "-e" ]; then
    shift
    if [ "$DONSIGNORE" == "0" ]; then
      buildargs=( "$@" )
      set ""
      . wov-ns-check
      set -- "${buildargs[@]}"
    fi
    fBuildEnv

  elif [ "$1" == "--clean" ]; then
    shift
    _fCleanCacheAll

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


if [ ${HAS_SECRET} -eq 0 ] && [ ${HAS_BUILDENV} -eq 0 ] && [ ${HAS_CLEAN} -eq 0 ]; then
  echo
  echo "ERROR: no command passed."
  echo
  fDisplayOptions
  exit 1
fi
