#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when pushing content.\n\n"
  exit 1
fi
pushenvargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushenvargs[@]}"


# Check all stagemods are off
ONSTAGEMODS=( $(jq -r '.stagemods[] | select(.status == "on") | .["name"]' ${WOV_BASEDIR}/wovtools/config.json ) )
if [[ "$ONSTAGEMODS" != "" ]]; then
  printf "\nERROR: turn off stagemods when pushing content.\n"
  printf "  active stagemods: ${ONSTAGEMODS[*]}\n\n"
  for sm in ${ONSTAGEMODS[@]}; do
    printf "  ex. wov-mod --off ${sm}\n"
  done
  printf "\n"
  exit 1
fi

# Check local code is checked in and pushed
wov-git-check ${WOV_BASEDIR}
R1=$?
wov-git-check ${WOV_BASEDIR}/wovtools/secrets
R2=$?
if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then exit 1; fi


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Copies the env files (conf and k8s), into an Archive, from which we can deploy. This works with pushing secrets and containers into the Archive (which is actually several storage mediums).

  -f : force push
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# ---------------------------------------------------------------------
# Generate variable files for K8s ConfigMap and Secrets
# ---------------------------------------------------------------------

# Create CM file to read in
CMFILE=${WOV_BASEDIR}/wovtools/cache/conf/cm
rm -f ${CMFILE} || true
touch ${CMFILE}
chmod 600 ${CMFILE}
wov-env --cm >> ${CMFILE}

# Create SE file to read in
SEFILE=${WOV_BASEDIR}/wovtools/cache/conf/se
rm -f ${SEFILE} || true
touch ${SEFILE}
chmod 600 ${SEFILE}
wov-env --se >> ${SEFILE}


# ---------------------------------------------------------------------
# Push to Archive
# ---------------------------------------------------------------------

ARCHBASE=${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}

#echo "ECHO: aws s3 sync ${WOV_BASEDIR}/wovtools/cache/k8s  ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s  --delete"
if [ $DOECHO -ge 1 ]; then echo "... pushing ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s"; fi
if [ $DOECHO -ge 2 ]; then ls ${WOV_BASEDIR}/wovtools/cache/k8s; fi
aws s3 sync ${WOV_BASEDIR}/wovtools/cache/k8s  ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s  --delete

#echo "ECHO: aws s3 sync ${WOV_BASEDIR}/wovtools/cache/conf ${WOV_ARCHIVEENV}/${ARCHBASE}/conf --delete"
if [ $DOECHO -ge 1 ]; then echo "... pushing ${WOV_ARCHIVEENV}/${ARCHBASE}/conf"; fi
if [ $DOECHO -ge 2 ]; then ls ${WOV_BASEDIR}/wovtools/cache/conf; fi
aws s3 sync ${WOV_BASEDIR}/wovtools/cache/conf ${WOV_ARCHIVEENV}/${ARCHBASE}/conf --delete

if [ $DOECHO -ge 1 ]; then echo "... success"; fi

