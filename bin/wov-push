#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=$(tput cols)
BLOCK=0
SKIPDBCHECKS=0

# ---------------------------------------------------------------------
# Build right before to update any files
# ---------------------------------------------------------------------
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when pushing content.\n\n"
  exit 1
fi

wov-build -e
if [ "$?" != "0" ]; then
  exit 1
fi

# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
pushargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushargs[@]}"


#if [ "$WOV_DEVMODE" != "remote" ]; then
#  printf "\nERROR: Can not push when is devmode '${WOV_DEVMODE}'. Run 'wov-env --remote'.\n\n"
#  exit 1
#fi

printf "\n"
figlet wov-push
printf " version: ${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}\n\n"


# Check all stagemods are off
ONSTAGEMODS=( $(jq -r '.stagemods[] | select(.status == "on") | .["name"]' wovtools/config.json ) )
if [[ "$ONSTAGEMODS" != "" ]]; then
  printf "\nERROR: turn off stagemods when pushing content.\n"
  printf "  active stagemods: ${ONSTAGEMODS[*]}\n\n"
  for sm in ${ONSTAGEMODS[@]}; do
    printf "  ex. wov-mod --off ${sm}\n"
  done
  printf "\n"
  exit 1
fi


# Check local code is checked in and pushed
wov-git-check ${WOV_BASEDIR}
R1=$?
wov-git-check ${WOV_BASEDIR}/wovtools/secrets
R2=$?
if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then 
  printf "\nERROR: wov-push exiting\n" 1>&2
  exit 1
fi




# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Macro command that pushes containers, then env. It uses:
   wov-build-containers
   wov-push-env

  --skip-db-checks : skip the checks for database inconsistencies

  -h : this help
  -q/-v : quiet/verbose

EOF
}

METAARGS=""

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0
    METAARGS="${METAARGS} -q "

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2
    METAARGS="${METAARGS} -v "

  elif [ "$1" == "--skip-db-checks" ]; then
    shift
    SKIPDBCHECKS=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done

if [ "$SKIPDBCHECKS" != "1" ]; then
  echo "  ... check for database changes that could block the push"
  wov-db-commit -v --any-push-blockage
  R3=$?
  if [ "$R3" != 0 ]; then exit 1; fi
else
  echo "  ... WARNING: skipping check for database changes that could block the push"
fi


echo "  ... wov-build-containers ${METAARGS}"
wov-build-containers ${METAARGS}
if [ "$?" != "0" ]; then
  exit 1
fi
echo "  ... wov-push-env ${METAARGS}"
wov-push-env ${METAARGS}
if [ "$?" != "0" ]; then
  exit 1
fi

echo "  ... wov-db-commit ${METAARGS}"
wov-db-commit ${METAARGS}
if [ "$?" != "0" ]; then
  exit 1
fi

echo "   ... done"
