#!/usr/bin/env bash

# Import Env
# ---------------------------------------------------------------------
argsbastcon=( "$@" )
set ""
. wov-env
set -- "${argsbastcon[@]}"

DOECHO=1
FOLD=$(tput cols)
CL=$(wov-env --var WOV_CLUSTER)

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Manages an ssh connection to a bastion host for the Kubernetes cluster.

When an ssh connection is open, it allows the ssh tunnel to internal AWS resources and the K8s cluster. Make sure the .ssh/config env is set. See wov-bastion command.

  -q/--quiet      : quiet
  -v/--verbose    : verbose
  -h/--help       : this help

  --check         : check if configured properly
  -c/--connect    : connect (has to remain open)
  -d/--disconnect : disconnect

EOF
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doDisconnect()
{
  PP=$(ps | \grep "[s]sh ${CL}-bastion" | awk '{print $1}')
  if [[ "$PP" == "" ]]; then
    printf "\nWARNING: no existing connections to disconnect. Continuing...\n\n"
  else
    kill $PP
    if [[ "$?" == "0" ]]; then echo "  ... disconnected existing connection"; fi
  fi

}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doConfigCheck()
{
  local entries=`\grep "^[Hh][Oo][Ss][Tt]\s[a-zA-Z\-]*-bastion" ~/.ssh/config`
  local bentry=`\grep -i "^HOST\s*${CL}-bastion" ~/.ssh/config`

  if [ ! -f ~/.ssh/config ]; then
    printf "ERROR: No ~/.ssh/config file. Create enties for bastion here as 'HOST ${CL}-bastion'."
    return 1
  fi

  printf "Config Check:\n"
  printf "Found entries for bastions (i.e. '^Host CLUSTER-bastion'): \n${entries}\n"
  printf "Looking for host: ${CL}-bastion\n"

  if [ "$bentry" != "" ]; then
    printf "... success\n"
  else
    printf "... failed\n"
    return 1
    printf "WARNING: no HOST entry for your current cluster bastion: ${CL}-bastion\n"
  fi
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doConnect()
{
  ssh "${CL}-bastion"
  if [ "$?" != "0" ]; then
    printf "\nERRROR: wov-bastion-connection failed... let me check a few things...\n\n";
    doConfigCheck
    exit 1
  fi
}


# ---------------------------------------------------------------------
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-q' ] || [ "$1" == '--quiet' ]; then
    DOECHO=0
    shift

  elif [ "$1" == '-v' ] || [ "$1" == '--verbose' ]; then
    DOECHO=2
    shift

  elif [ "$1" == '-c' ] || [ "$1" == '--connect' ]; then
    shift
    doConnect

  elif [ "$1" == '-d' ] || [ "$1" == '--disconnect' ]; then
    shift
    doDisconnect

  elif [ "$1" == "--check" ]; then
    shift
    doConfigCheck

  elif [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    exit 1
  fi
done

