#!/usr/bin/env bash
FOLD=$(tput cols)
DOECHO=0

function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Creates clusters and manages them.
 
  CLUSTER NAMING:  System-Provider-Region-Flavor
    System - The over-arching naming of all your clusters. Maybe a code representing a company. ex. IBM
    Provider - Cloud provider for instance. ex. AWS
    Region   - A code for the region, ex. VA, DIA
    Flavor   - A "first name" for a cluster. I like to name them for categories of things like nuts, berries, etc. ex. grape, cherry
  

Commands:

  <nothing>|clusters - show all clusters currently in kops
  cluster X          - print cluster information ex. wov-aws-va-frog.woveon.com
  flavor FLAVOR      - print cluster information for flavor, assuming current CLTYPE, PROVIDER, REGION
  (UNTESTED) create CLUSTER - generates a CLUSTER of this name.
  *delete CLUSTER*   - use kops to delete.

  (UNTESTED) config helm    - install helm and tiller in the cluster
  (UNTESTED) config dbnet   - configures the cluster to use a db in the default VPC (outside cluster's VPC) and all the peering connections to make this happen in AWS
  (UNTESTED) config db      - shows how to create the database

EOF
}

function doConfigDB() 
{
  . wov-cluster-configdb
}

function doConfigDBNet() 
{
  . wov-cluster-configdbnet
}

function doConfigHelm() 
{
  which helm
  if [ "$?" != "0" ]; then
    echo ""
    echo "ERROR: Kubernetes package management tool 'helm' is not installed. See it's documentation, then rerun this command."
    echo ""
    exit 1
  fi
  kubectl apply -f ./wov-cluster-tiller.yaml
  if [ "$?" != "0" ]; then
    printf "\nERROR: failed installing tiller.\n"
    exit 1
  fi
  helm init --service-account tiller --upgrade
  if [ "$?" != "0" ]; then
    printf "\nERROR: failed installing helm.\n"
    exit 1
  fi
}


function doCreate()
{

  if [ "$#" != "1" ]; then
    printf "\nERROR: must provide the new cluster name: ex. wov-aws-va-flavor.\n"
    exit 1
  fi

  WOV_CLUSTER="$1"
  WOV_NS="`wov-env --var WOV_WPROJECT`-`wov-env --var WOV_GSTAGE`"

  kops get clusters | grep ${WOV_CLUSTER} > /dev/null
  R=$?
  if [ "$R"  == "0" ]; then
    echo ""
    echo "ERROR: existing cluster of name '${WOV_CLUSTER}'. Stopping."
    echo ""
    echo "Current clusters in kops..."
    kops get clusters
    echo ""
    exit 1
  fi


#  . wov-env -g ${WOV_CLUSTER}-${WOV_NS} -c ${WOV_CLUSTER}
#  . wov-env-build -q --namespace ${WOV_NS} --cluster ${WOV_CLUSTER} --secrets ${WOV_CLUSTER}
   . wov-env -g ${WOV_CLUSTER}-${WOV_NS} -c ${WOV_CLUSTER}

  echo "... creating cluster: *** ${WOV_CLUSTER}-${WOV_NS} ***"

  GETENVS=( "KOPS_STATE_STORE" "WOV_cluster_dns_domain" "WOV_cluster_dns_hostedZone" "WOV_cluster_region"
            "WOV_cluster_master_count" "WOV_cluster_master_zones" "WOV_cluster_master_size"
            "WOV_cluster_node_count" "WOV_cluster_node_zones" "WOV_cluster_node_size" )

  UNDEFVAR=0
  for f in ${GETENVS[@]}; do
    TMP=`wov-env -g ${WOV_CLUSTER}-${WOV_NS} --var ${f}`
    #TMP=`wov-env -g ${WOV_CLUSTER} -c ${WOV_CLUSTER} --var ${f}`
    if [ "${TMP}" == "" ]; then
      echo "WARNING: variable '${f}' is not defined."
      UNDEFVAR=1;
    else
      eval export $f=$TMP
      echo " --- $f=$TMP"
    fi
  done
  if [ "${UNDEFVAR}" != "0" ]; then
    printf "\nERROR: missing variable(s). Exiting. Check your secrets.\n\n";
    printf "  - make sure wovtools/secrets has an entry for .cluster[\"${WOV_CLUSTER}\"]\n"
    printf "  - see the wiki : https://sourceforge.net/p/wovtools/wiki/Cluster Creation/edit\n\n"
    exit 1
  fi

  read -r -p "Create cluster with above configuration? [Y/n] " A
  if [[ $A == "" ]] || [[ $A =~ [yY][eE][sS] ]]; then
    echo "... creating"
  else
    echo "Exiting: did not create cluster"
    exit 1
  fi

  exit 1

  printf ": ensure at least one host Nameserver is used locally (speeds up development)\n"
  printf "  ... getting nameservers of your domain from AWS Route53\n"
  NRVS=$(aws route53 get-hosted-zone --id ${WOV_cluster_dns_hostedZone} | jq -r '.DelegationSet.NameServers[]')
  found=0
  for ns in ${NRVS[@]}; do
    if [ "${found}" == "1" ]; then continue; fi

    a=$(dig $ns +short)
    echo "  ...  checking your DNS for ${a} : ${ns}"
    if [ "${a}" == "" ]; then
      printf "ERROR: can't resolve IP for ${ns}. Did you add and AWS is refusing to resolve it's own DNS server? Reorder DNS servers then."
      exit 1
    elif [ "$(uname)" == "Darwin" ]; then
      a=`scutil --dns | grep "$a"  > /dev/null`
      if [ "$?" == "0" ]; then found=1; echo "    - found"; fi
      # echo " scutil lookup ${a} : found ${found}"
    else
      grep $a /etc/resolv.conf > /dev/null
      if [ "$?" == "0" ]; then found=1; echo "    - found"; fi
    fi
  done
  if [ "$found" != "1" ]; then
    printf "\nERROR: you need to use one of your hostedzones' nameservers. Put into /etc/resolv.conf or on mac use GUI.\n\n"
    for ns in ${NRVS[@]}; do
      echo "  - $ns"
    done
    echo ""
    exit 1
  fi
  echo "  ... nameserver of hosted zone in use (good)"


  printf "... making key\n"
  . ./wov-cluster-make_key
  if [ "$?" != "0" ]; then exit 1; fi
  if [ -z ${KEY_PUBLIC+x} ]; then echo "KEY_PUBLIC is unset"; exit 1; fi

  printf "... making bucket\n"
  ./wov-cluster-make_bucket
  if [ "$?" != "0" ]; then exit 1; fi

  printf "... making cluster\n"
  ./wov-cluster-make_cluster
  if [ "$?" != "0" ]; then exit 1; fi

  kops validate cluster > /dev/null
  R=$?
  while [ "${R}" != "0" ]; do
    echo "  ... waiting for kops validate cluster to work (20 seconds)"
    sleep 20
    kops validate cluster > /dev/null
    R=$?
  done


  printf ": rename Kubenetes config : ${WOV_CLUSTER}.${WOV_cluster_dns_domain} ==> ${WOV_CLUSTER}-${WOV_NS}\n"
  kubectl config rename-cluster ${WOV_CLUSTER}.${WOV_cluster_dns_domain} ${WOV_CLUSTER}-${WOV_NS}
}


function doShowClusters()
{
  kops get clusters
}

function doShowCluster()
{
  # Build the config for the cluster
  . wov-env -c $1
  WOV_cluster_dns_domain=$(wov-env -c ${1} --var WOV_cluster_dns_domain)
  #  WOV_cluster_dns_domain=$(cat ${WOV_BASEDIR}/wovtools/cache/${WOV_CLUSTER}/secrets.json | jq -r '.cluster.dns.domain')
  KOPS_CLUSTER="${1}.${WOV_cluster_dns_domain}"
  echo "... reading ${KOPS_CLUSTER}"
  kops get "${KOPS_CLUSTER}"
}

function doShowFlavor()
{
  . wov-env
  CLUSTER="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${1}"
  doShowCluster "${CLUSTER}"
}

# ---------------------------------------------------------------------
# Handle Modifying Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


case $1 in
  create)
    shift
    doCreate $*
    ;;
  config)
    shift
    case $1 in 
      helm)
        shift
        doConfigHelm
        ;;
      dbnet)
        shift
        doConfigDBNet
        ;;
      db)
        shift
        doConfigDB
        ;;
      *)
        printf "\nERROR: unknown config option of '$1'.\n\n"
        fDisplayOptions
        exit 1
    esac
    ;;
  ''|clusters)
    shift
    doShowClusters
    ;;
  cluster)
    shift
    doShowCluster $1
    ;;
  flavor)
    shift
    doShowFlavor $1
    ;;
  *)
    echo "ERROR: Unknown command '${1}'."
    fDisplayOptions
    exit 1
    ;;
esac



