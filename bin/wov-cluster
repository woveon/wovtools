#!/usr/bin/env bash

DOECHO=1
FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib


function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Creates clusters and manages them.
 
  CLUSTER NAMING:  System-Provider-Region-Flavor
    System - The over-arching naming of all your clusters. Maybe a code representing a company. ex. IBM
    Provider - Cloud provider for instance. ex. AWS
    Region   - A code for the region, ex. VA, DIA
    Flavor   - A "first name" for a cluster. I like to name them for categories of things like nuts, berries, etc. ex. grape, cherry
  

Commands:

  <nothing>|clusters - show all clusters currently in kops
  cluster X          - print cluster information ex. wov-aws-va-frog.woveon.com
  flavor FLAVOR      - print cluster information for flavor, assuming current CLTYPE, PROVIDER, REGION
  (UNTESTED) create CLUSTER - generates a CLUSTER of this name.
  *delete CLUSTER*   - use kops to delete.

  (UNTESTED) config helm    - install helm and tiller in the cluster
  (UNTESTED) config dbnet   - configures the cluster to use a db in the default VPC (outside cluster's VPC) and all the peering connections to make this happen in AWS
  (UNTESTED) config db      - shows how to create the database

EOF
}

ISWOVPROJECT="0"
. wov-env-ops fDisplayOptions "$@"
if [ ${WOV_DODEFAULTCOMMAND} -eq 0 ]; then exit 0; fi


function doTestKops()
{
  local Re=
  local R=
  local retval=2 # 2: expected error, 1: found error, 0: no error, 3: no bucket error

  l_ "...testing kops configuration"

  l_verbose "  ...test kops is installed"
  if [ $retval -eq 2 ]; then
    R=$(which kops) ; Re=$?
    if [ $Re -ne 0 ]; then l_error "kops is not installed."; retval=1; fi
  fi

  l_verbose "  ...test KOPS_STATE_STORE variable being defined"
  if [ $retval -eq 2 ]; then
    if [ "${KOPS_STATE_STORE}" == "" ]; then l_error "KOPS_STATE_STORE is not defined."; retval=1; fi
  fi

  l_verbose "  ...test kops state store AWS Bucket exists" 
  if [ $retval -eq 2 ]; then
    R=$(aws s3api list-buckets | grep kops.${WOV_cluster_dns_hostedZone}) ; Re=$?
    if [ $Re -ne 0 ]; then l_error "no AWS Bucket exists"; retval=3; fi
  fi

  if [ $retval -eq 2 ]; then l_verbose "  ...success"; retval=0; else l_verbose "  ...failed"; fi

  return $retval
}


function doEnsureKops()
{
  local Re=
  local R=
  local retval=1  # error by default
  local bucketname=

  doTestKops ; Re=$?

  if [ $Re -eq 0 ]; then retval=0; l_verbose "...success";
  elif [ $Re -eq 1 ]; then l_error "...unrecoverable error"; exit 1; 
  elif [ $Re -eq 3 ]; then 
    l_verbose "...missing bucket so creating."
    local region=$(aws configure get region)
    local oKOPS_STATE_STORE="${KOPS_STATE_STORE}"
    l_ "\n\nLet's Fix this. Creating KOPS_STATE_STORE AWS bucket for you. Select a bucket name:"
    read -e -p "KOPS_STATE_STORE: " -i "${KOPS_STATE_STORE}" KOPS_STATE_STORE

    if [ "${KOPS_STATE_STORE}" != "${KOPS_STATE_STORE}" ]; then
      l_warn "Changed KOPS_STATE_STORE! Update your shell env variables: 'export KOPS_STATE_STORE=${KOPS_STATE_STORE}'"
    fi

    # remove s3://
    echo "${KOPS_STATE_STORE}" | grep "^s3://" > /dev/null
    if [ $? -eq 0 ]; then bucketname="${KOPS_STATE_STORE:5}"; else bucketname=${KOPS_STATE_STORE}; fi
    export KOPS_STATE_STORE="s3://${bucketname}"

    l_ "...creating bucket: '${KOPS_STATE_STORE}'"
    aws s3api create-bucket --bucket "${bucketname}" --region "${region}" ; Re=$?
    if [ $Re -ne 0 ]; then
      l_error "Unable to create the bucket. Fix your AWS confguration?"
    else
      l_ "  ...ensure public access is blocked"
      aws s3api put-public-access-block --bucket "${bucketname}" --public-access-block-configuration="BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"  ; Re=$?
      if [ $Re -ne 0 ]; then
        l_error "Unable to turn off public access for bucket. Fix your AWS configuration?"
      else
        l_ "  ...ensure versioning of bucket is on"
        aws s3api put-bucket-versioning --bucket "${bucketname}" --region "${region}" --versioning-configuration Status=Enabled; Re=$?
        if [ $Re -ne 0 ]; then
          l_error "Failed versioning bucket ${bucket} in ${WOV_cluster_region}."
        else
          doTestKops ; retval=$?
        fi
      fi
    fi
  else
    l_error "Unknown error."
    retval=1
  fi

  return $retval
}

#function doConfigDB() 
#{
#  . wov-cluster-configdb
#}

function doConfigDBNet() 
{
  . wov-cluster-configdbnet
}

function doConfigHelm() 
{
  local R=
  local Re=

  R=$(which helm) ; Re=$?
  if [ $Re -ne 0 ]; then
    l_
    l_error "Kubernetes package management tool 'helm' is not installed. See it's documentation, then rerun this command."
    l_
    exit 1
  fi

  # This gives ALL access to tiller... not good
  # FROM: https://github.com/helm/helm/issues/3130#issuecomment-345506262

  l_verbose '...install tiller configuration'
  cat <<'EOF' | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
EOF
  Re=$? ; if [ $Re -ne 0 ]; then l_error "Failed installing tiller."; exit 1; fi

  cat <<'EOF' | kubectl apply -f -
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: tiller-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: ""
EOF
  Re=$? ; if [ $Re -ne 0 ]; then l_error "Failed installing tiller."; exit 1; fi

  l_verbose "...calling helm init with tiller"
  helm init --service-account tiller --upgrade ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed installing helm."; exit 1; fi


  l_ "...success"
}


function doCreate()
{
  local R=
  local Re=
  local proj=
  local stage=
  local dns=

  if [ "$#" != "1" ]; then
    printf "\nERROR: must provide the new cluster name: ex. wov-aws-va-flavor.\n"
    exit 1
  fi

  WOV_CLUSTER="$1"

  dns=$(wov-env --var WOV_cluster_dns_hostedZone) ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed wov-env call for WOV_cluster_dns_hostedZone. Check your settings."; exit 1; fi

  proj=$(wov-env --var WOV_WPROJECT) ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed wov-env call for WOV_WPROJECT. Check your settings."; exit 1; fi

  stage=$(wov-env --var WOV_GSTAGE) ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed wov-env call for WOV_GSTAGE. Check your settings."; exit 1; fi

  WOV_NS="${proj}-${stage}"

  l_ ""
  figlet "Create Cluster"
  l_hr
  l_ "WOV_CLUSTER : ${WOV_CLUSTER}.${dns}"
  l_ "WOV_NS      : ${WOV_NS}"
  l_hr

  doEnsureKops
  if [ $? -ne 0 ]; then exit 1; fi

  l_verbose "Test for existing cluster entry in kops"
  R=$(kops get clusters 2> /dev/null | grep "${WOV_CLUSTER}" 2> /dev/null) ; Re=$?
  if [ $Re -eq 0 ]; then
    echo ""
    echo "ERROR: existing cluster of name '${WOV_CLUSTER}'. Stopping."
    echo ""
    echo "Current clusters in kops..."
    kops get clusters
    echo ""
    exit 1
  else
    l_verbose "  ...no existing cluster found. good."
  fi

  l_verbose "generating env settings using context: ${WOV_CLUSTER}-${WOV_NS}"
  . <(wov-env --context ${WOV_CLUSTER}-${WOV_NS} --exports)

  l_ "...Cluster to Create Configuration: *** ${WOV_CLUSTER}-${WOV_NS} ***"

  GETENVS=( "KOPS_STATE_STORE" "WOV_cluster_dns_domain" "WOV_cluster_dns_hostedZone" "WOV_cluster_region"
            "WOV_cluster_master_count" "WOV_cluster_master_zones" "WOV_cluster_master_size"
            "WOV_cluster_node_count" "WOV_cluster_node_zones" "WOV_cluster_node_size" )

  UNDEFVAR=0
  for f in ${GETENVS[@]}; do
    TMP=`wov-env --context ${WOV_CLUSTER}-${WOV_NS} --var ${f}`
    #TMP=`wov-env -g ${WOV_CLUSTER} -c ${WOV_CLUSTER} --var ${f}`
    if [ "${TMP}" == "" ]; then
      echo "WARNING: variable '${f}' is not defined."
      UNDEFVAR=1;
    else
      eval export $f=$TMP
      echo " --- $f=$TMP"
    fi
  done
  if [ "${UNDEFVAR}" != "0" ]; then
    printf "\nERROR: missing variable(s). Exiting. Check your secrets.\n\n";
    printf "  - make sure wovtools/secrets has an entry for .cluster[\"${WOV_CLUSTER}\"]\n"
    printf "  - see the wiki : https://sourceforge.net/p/wovtools/wiki/Cluster Creation/edit\n\n"
    exit 1
  fi

  read -r -p "Create cluster with above configuration? [Y/n] " A
  if [[ $A == "" ]] || [[ $A =~ [yY][eE][sS] ]]; then
    echo "... creating"
  else
    echo "Exiting: did not create cluster"
    exit 1
  fi


  l_ ": ensure at least one host Nameserver is used locally (speeds up development)\n"
  l_ "  ... getting nameservers of your domain from AWS Route53\n"
  NRVS=$(aws route53 get-hosted-zone --id ${WOV_cluster_dns_hostedZone} | jq -r '.DelegationSet.NameServers[]')
  found=0
  for ns in ${NRVS[@]}; do
    if [ "${found}" == "1" ]; then continue; fi

    a=$(dig $ns +short)
    echo "  ...  checking your DNS for ${a} : ${ns}"
    if [ "${a}" == "" ]; then
      printf "ERROR: can't resolve IP for ${ns}. Did you add and AWS is refusing to resolve it's own DNS server? Reorder DNS servers then."
      exit 1
    elif [ "$(uname)" == "Darwin" ]; then
      a=`scutil --dns | grep "$a"  > /dev/null`
      if [ "$?" == "0" ]; then found=1; echo "    - found"; fi
      # echo " scutil lookup ${a} : found ${found}"
    else
      grep $a /etc/resolv.conf > /dev/null
      if [ "$?" == "0" ]; then found=1; echo "    - found"; fi
    fi
  done
  if [ "$found" != "1" ]; then
    l_warn "You should use one of your hostedzones' nameservers. Put into /etc/resolv.conf or on mac use GUI.\n\n"
    for ns in ${NRVS[@]}; do
      echo "  - $ns"
    done
    l_ 
    read -r -p "You do not currently are not using one of these.  Continue? [Y/n]" A
    if [ "${A}" == 'n' ] || [ "${A}" == "no" ]; then exit 1; fi
  else
    l_ "  ... nameserver of hosted zone in use (good)"
  fi


  l_ "... making key\n"
  . wov-cluster-make_key
    # --- NOTE: "." because it sets env vars
  if [ "$?" != "0" ]; then exit 1; fi
  if [ -z ${KEY_PUBLIC+x} ]; then echo "KEY_PUBLIC is unset"; exit 1; fi

#  l_ "... making bucket\n"
#  wov-cluster-make_bucket
#  if [ "$?" != "0" ]; then exit 1; fi

  l_ "... making cluster\n"
  wov-cluster-make_cluster
  if [ "$?" != "0" ]; then exit 1; fi

  l_ "...validating kops cluster"
  kops validate cluster > /dev/null
  Re=$?
  while [ ${Re} -ne 0 ]; do
    echo "  ... waiting for kops validate cluster to work (20 seconds)"
    sleep 20
    kops validate cluster > /dev/null
    Re=$?
  done

  l_ "...create namespace"
  kubectl create ns ${WOV_NS} ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed to create Kubernetes namespace for some reason?"; exit 1; fi

  l_ "...create Kubernetes context : ${WOV_CLUSTER}-${WOV_NS} from cluster, user, namespace"
  kubectl config set-context ${WOV_CLUSTER}-${WOV_NS} \
                             --cluster=${WOV_CLUSTER}.${WOV_cluster_dns_domain} \
                             --user=${WOV_CLUSTER}.${WOV_cluster_dns_domain} \
                             --namespace=${WOV_NS}
  if [ $Re -ne 0 ]; then l_error "Failed to create Kubernetes context for some reason?"; exit 1; fi

#  l_ "Create a Kubenetes context: ${WOV_CLUSTER}-${WOV_NS}\n"
#  kubectl config rename-context ${WOV_CLUSTER}.${WOV_cluster_dns_domain} ${WOV_CLUSTER}-${WOV_NS} ; Re=$? 
#  if [ $Re -ne 0 ]; then l_error "Failed to rename Kubernetes config."; exit 1; fi

  l_ "...success. Now, consider further configurations like helm and dbnet:"
  l_ "   ex. wov-cluster config helm"
  l_ "   ex. wov-cluster config dbnet"
}


function doShowClusters()
{
  kops get clusters
}

function doShowCluster()
{
  # Build the config for the cluster
  . wov-env -c $1
  WOV_cluster_dns_domain=$(wov-env -c ${1} --var WOV_cluster_dns_domain)
  #  WOV_cluster_dns_domain=$(cat ${WOV_BASEDIR}/wovtools/cache/${WOV_CLUSTER}/secrets.json | jq -r '.cluster.dns.domain')
  KOPS_CLUSTER="${1}.${WOV_cluster_dns_domain}"
  echo "... reading ${KOPS_CLUSTER}"
  kops get "${KOPS_CLUSTER}"
}

function doShowFlavor()
{
  . wov-env
  CLUSTER="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${1}"
  doShowCluster "${CLUSTER}"
}

# ---------------------------------------------------------------------
# Handle Modifying Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


case $1 in
  create)
    shift
    doCreate $*
    ;;
  config)
    shift
    case $1 in 
      helm)
        shift
        doConfigHelm
        ;;
      dbnet)
        shift
        doConfigDBNet
        ;;
#      db)
#        shift
#        doConfigDB
#        ;;
      *)
        printf "\nERROR: unknown config option of '$1'.\n\n"
        fDisplayOptions
        exit 1
    esac
    ;;
  ''|clusters)
    shift
    doShowClusters
    ;;
  cluster)
    shift
    doShowCluster $1
    ;;
  flavor)
    shift
    doShowFlavor $1
    ;;
  *)
    echo "ERROR: Unknown command '${1}'."
    fDisplayOptions
    exit 1
    ;;
esac



