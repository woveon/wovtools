#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=$(tput cols)

# first call, set WOV_BASEDIR to here
WOV_BASEDIR=`pwd`
ISWOVPROJECT="0"
. wov-env-loader

# --------------------------------------------------------------------- 
# Work with ~/.wovtools file
# --------------------------------------------------------------------- 
if [ ! -e "${HOME}/.wovtools" ]; then
  echo ""
  echo "ERROR: no ~/.wovtools file. Need '.me' entry in that file."
  exit 1
fi
WOV_ME=$(cat ${HOME}/.wovtools | jq -r '.me')

# Check for necessary entries in .wovtools file
Re=0
EE=( ".me" )
for p in "${EE[@]}"; do
  R=$(cat ${HOME}/.wovtools | jq -r "${p}")
  if [ "${R}" == "" ]; then
    l_error "in ~/.wovtools, entry for '${p}' is ''."
    Re=1
  elif [ "${R}" == "null" ]; then
    >&2 echo "ERROR: in ~/.wovtools, no entry for '${p}'"
    Re=1
  fi
done
if [ $Re -ne 0 ]; then exit 1; fi

# Check for eventually needed entries in .wovtools file
EE=( ".wovtools.secrets" ".archive.env" ".archive.repository" )
for p in "${EE[@]}"; do
  R=$(cat ${HOME}/.wovtools | jq -r "${p}")
  if [ "${R}" == "" ]; then
    l_warn "in ~/.wovtools, entry for '${p}' is ''. Fill it in later."
  elif [ "${R}" == "null" ]; then
    l_warn "in ~/.wovtools, no entry for '${p}'. Fill it in later."
  fi
done


CWD=`pwd`

echo ""
echo "`basename $0`"
echo "Initializes this directory as a wovtools project. This should be non-destructive, only adding at .git and wovtools directories." | fold -w ${FOLD} -s
echo ""

# load defaults from any existing config.json 
if [ -e "${CWD}/wovtools/config.json" ]; then
  CONFIGJSON=()
  while read f; do
    CONFIGJSON+=( "$f" )
  done <<<$(cat "${CWD}/wovtools/config.json" | jq -r ".project.project, .project.type, .project.title, .project.description, .archive.repository, .archive.env" )
  WOV_PROJECT="${CONFIGJSON[0]}"
  WOV_PROJECTTYPE="${CONFIGJSON[1]}"
  WOV_PROJECTTITLE="${CONFIGJSON[2]}"
  WOV_PROJECTDESCRIPTION="${CONFIGJSON[3]}"
  WOV_ARCHIVEREPOSITORY="${CONFIGJSON[4]}"
  WOV_ARCHIVEENV="${CONFIGJSON[5]}"
else
  WOV_PROJECT=$(basename $(pwd))
fi
while true; do
  read -r -p "One word PROJECT name (not a title!) : (\"${WOV_PROJECT}\") ... Correct? [Y/n] " A

  case $A in
    ""|[Yy][Ee][Ss]|[Yy])
    break
    ;;
    [Nn][Oo]|[Nn])
    printf "ok, enter project name: "
    read WOV_PROJECT
    if [[ ! $WOV_PROJECT =~ ^[A-Za-z][A-Za-z_0-9]+$ ]];  then
      echo "ERROR: bad project name, needs to be a string with no spaces (i.e. [A-Za-z][A-Za-z_0-9]*)" 
      WOV_PROJECT=$(basename $(pwd))
    fi
    ;;
  *)
    echo "Invalid input... (${A})"
    ;;
  esac
done
echo "  ... WOV_PROJECT: ${WOV_PROJECT}"

# Useful timeout script : https://stackoverflow.com/questions/28927783/is-it-possible-to-set-time-out-from-bash-script
function timeout_monitor() {
  sleep "$1"
  shift
  kill "$1"
  shift
  echo "$*"
}


# Ensure global entry for the project
WOV_PROJDIR=$(cat ${HOME}/.wovtools | jq -r ".projects[\"${WOV_PROJECT}\"].dir")
if [ "${WOV_PROJDIR}" == "null" ]; then
  echo "  ... creating project entry in: ~/.wovtools"
  cat ~/.wovtools | jq " .projects[\"${WOV_PROJECT}\"].dir = \"${CWD}\"" > ~/.wovtools.$$ && cp ~/.wovtools.$$ ~/.wovtools
fi



# ---------------------------------------------------------------------
#  Creates the WovTools project in this directory
# ---------------------------------------------------------------------
function InitProject()
{
  ISNEWGIT=0
  ISNEWSGIT=0

  echo "... init project"

  # ---------------------------------------------------------------------
  # Create git repo
  if [ ! -e ".git" ]; then
    echo "... creating git repository here"
    ISNEWGIT=1
    git init -q
  fi

  # ---------------------------------------------------------------------
  # Set remote origin
  RR=$(git config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo
    printf "Git repository has no remote repository to push code to. Set that up now, and enter URL below.\n"
    printf "  Remote git repository :  "
    read A
    if [ "${A}" == "" ]; then echo "ERROR: must provide a repository."; exit 1; fi
    git remote add origin $A
    if [ "$?" != "0" ]; then echo "ERROR: setting git remote origin failed."; exit 1; fi
    git remote -v
    if [ "$?" != "0" ]; then echo "ERROR: testing of remote git repo failed."; exit 1; fi
    WOV_ARCHIVEREPOSITORY="${A}"
  fi

  # ---------------------------------------------------------------------
  # Select user name
  if [ "${WOV_USERNAME}" == "" ]; then WOV_USERNAME=$(git config user.name); fi
  printf "Enter your name (\"${WOV_USERNAME}\"): "
  read A
  if [ "${A}" != "" ]; then WOV_USERNAME="${A}"; fi

  # ---------------------------------------------------------------------
  # Select user email
  if [ "${WOV_USEREMAIL}" == "" ]; then WOV_USEREMAIL=$(git config user.email); fi
  printf "Enter your email (\"${WOV_USEREMAIL}\"): "
  read A
  if [ "${A}" != "" ]; then WOV_USEREMAIL="${A}"; fi

#  # ---------------------------------------------------------------------
#  # Select user code
#  if [ "${WOV_ME}" == "" ]; then WOV_ME=$(cat ~/.wovtools | jq -r ".me"); fi
#  printf "Enter your developer code (\"${WOV_ME}\"): "
#  read A
#  if [ "${A}" != "" ]; then WOV_ME="${A}"; fi


  # Ensure data is updated
  git config user.name  "${WOV_USERNAME}"
  git config user.email "${WOV_USEREMAIL}"

  # Ensure lines in .gitignore
  echo "... creating .gitignore"
  LINES=("*.swp" ".DS_Store" "wovtools/secrets" "wovtools/cache" "wovtools/db/*.deltas" "wovtools/db/archive" "${WOV_CONFIGFILE_MINE}" "*.old" "*.orig" ".mochawesome-report" "*.log")
  touch .gitignore
  for f in "${LINES[@]}"; do
    echo "  ... adding to .gitignore: $f"
    if ! grep -qF "${f}" .gitignore ; then echo "${f}" >> .gitignore ; fi
  done

  WOV_BASEDIR=$(git rev-parse --show-toplevel)

  echo "... create wovtools directory structure"
  # ---------------------------------------------------------------------
  # Create conf, k8s and containers directories
  mkdir -p ${WOV_BASEDIR}/wovtools/cache
  mkdir -p ${WOV_BASEDIR}/wovtools/ds/const
  mkdir -p ${WOV_BASEDIR}/wovtools/msrecipes
  mkdir -p ${WOV_BASEDIR}/wovtools/cmds
  mkdir -p ${WOV_BASEDIR}/wovtools/services


  # ---------------------------------------------------------------------
  # Create the config.json 
  echo " ... check to create '${WOV_CONFIGFILE_MAIN}'"
  if [ ! -e "${WOV_CONFIGFILE_MAINRAW}" ]; then 
    echo "   ... try to create '${WOV_CONFIGFILE_MAIN}'"
    cat <<EOF > "${WOV_CONFIGFILE_MAINRAW}"
{
  "ver" : "initing",
  "project" : {
    "type" : "",
    "project" : "${WOV_PROJECT}",
    "title" : "",
    "description" : ""
  },
  "archive" : {
    "env" : "",
    "repository" : ""
  },
  "nodeploy" : [],
  "secrets" : {
    "dev" : [ 
      "cluster_mymanaged.json",
      "repositories.json",
      "${WOV_PROJECT}.json",
      "${WOV_PROJECT}db.json",
      "${WOV_PROJECT}_${WOV_ME}.json",
      "${WOV_PROJECT}db_${WOV_ME}.json"
    ],
    "prod" : [
      "cluster_mymanaged.json",
      "repositories.json",
      "${WOV_PROJECT}.json",
      "${WOV_PROJECT}db.json",
      "${WOV_PROJECT}_prod.json",
      "${WOV_PROJECT}db_prod.json"
    ]
  },
  "originmods": {
    "local" : {
      "description" : "For deverlopers to develop locally.",
      "routes": [
        [ "${WOV_PROJECT}db.ORIGINlocal",      "${WOV_PROJECT}db"     ]
      ]
    },
    "vh" : {
      "description" : "Used to setup a development pod 'vh'.",
      "routes": [
        [ "appcore.CLUSTERvh", "appcore"   ]
      ]
    }
  }
}
EOF
  fi
  echo "   ... exit to create ${WOV_CONFIGFILE_MAIN}"


  # ---------------------------------------------------------------------
  # Create my config file
  echo " ... check to create '${WOV_CONFIGFILE_MINE}'"
  if [ ! -e "${WOV_CONFIGFILE_MINERAW}" ]; then 
    echo "   ... try to create '${WOV_CONFIGFILE_MINE}'"
    cat <<EOF > "${WOV_CONFIGFILE_MINERAW}"
{
  "ver-local" : 2,
  "curorigin" : "local",
  "secrets" : {
    "${WOV_ME}" : [
      "cluster_mymanaged.json",
      "repositories.json",
      "${WOV_PROJECT}.json",
      "${WOV_PROJECT}db.json",
      "${WOV_PROJECT}_${WOV_ME}.json",
      "${WOV_PROJECT}db_${WOV_ME}.json"
    ]
  },
  "originmods" : {
  }
}
EOF
fi
  echo "   ... created '${WOV_CONFIGFILE_MINE}'"


  # now commit so we can build branches
  # Build a git revision and all branches
  if [ "$ISNEWGIT" == "1" ]; then
    git add .gitignore "${WOV_CONFIGFILE_MAIN}"
    git commit -a -m "initial commit"
  fi


  # ---------------------------------------------------------------------
  # Create branches

  echo
  echo "NOTE: Are the next commands for (push --set-upstream origin X) going to blow up? Do I have to set remote first before calling this?"
  echo "      git remote add origin [URL]"
  echo

  RR=$(git rev-parse --verify prod 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch 'prod', pushing to origin"; 
    git checkout -b prod || exit 1
    git push --set-upstream origin prod || exit 1
  fi
  RR=$(git rev-parse --verify dev 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch 'dev', pushing to origin"; 
    git checkout -b dev || exit 1
    git push --set-upstream origin dev || exit 1
  fi
  if [ "$(git rev-parse --verify master 2> /dev/null ; echo $?)" != "0" ]; then
    echo "  ... deleting branch 'master' (prod will be default)"
    git branch -d master 2>&1 > /dev/null
  fi

#    git push -f origin prod
#  echo "TODO: set branch remote and make sure prod is the default"
#  echo " git push -u <remote_name> <local_branch_name>"
#  git push --set-upstream origin prod
  touch .gitignore

  # Select user branch/stage
#  echo
#  printf "Select a user stage to use (i.e. this will be the git branch and the stage portion of the Kubernetes namespace.\n"
#  printf "  - User stage (i.e. your initials or username) (${WOV_ME}) : "
#  read A
#  [[ ${A} =~ ^[A-Za-z][A-Za-z_0-9]+$ ]] || ( echo "ERROR: bad user stage name (i.e. [A-Za-z][A-Za-z_0-9]*)" ; exit 1)
#  if [ "${A}" != "" ]; then WOV_ME=${A}; fi
#  if [ "${WOV_ME}" == "" ]; then echo "ERROR: must provide a stage name."; exit 1; fi

  # ---------------------------------------------------------------------
  # Select user branch/stage
  RR=$(git rev-parse --verify ${WOV_ME} 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch '${WOV_ME}', pushing to origin"
    git checkout -b ${WOV_ME} || exit 1
    git push --set-upstream origin ${WOV_ME} || exit 1
  fi



  # ---------------------------------------------------------------------
  # Create secrets repo
  # ---------------------------------------------------------------------

  # pull location from global file, make sure directory exists, is chmodded and make our project secrets directory there
  SECRETSDIR="`wov-cd -e secrets`"
  if [ "${SECRETSDIR}" == "" ]; then echo "ERROR: Unknown secrets dir. Add an entry to ~/.wovtools, for : dirs.secrets.dir."; exit 1; fi
  if [ ! -e "${SECRETSDIR}" ]; then mkdir -p "${SECRETSDIR}"; chmod 600 "${SECRETSDIR}"; fi
  if [ ! -e "${SECRETSDIR}/${WOV_PROJECT}_secrets" ]; then mkdir -p "${SECRETSDIR}/${WOV_PROJECT}_secrets"; chmod 600 "${SECRETSDIR}/${WOV_PROJECT}_secrets"; fi

  # keep the softlink if it exists
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets" ]; then
    rm -f "${WOV_BASEDIR}/wovtools/secrets" || true
    ln -s "${SECRETSDIR}/${WOV_PROJECT}_secrets" "${WOV_BASEDIR}/wovtools/secrets"
    if [ "$?" != "0" ]; then
      echo "ERROR: failed linking to '${SECRETSDIR}/${WOV_PROJECT}_secrets' at '${WOV_BASEDIR}/wovtools/secrets'."
      exit 1
    fi
  else
    echo "...keeping existing wovtools/secrets softlink:"
    ls -l "${WOV_BASEDIR}/wovtools/secrets"
  fi

  # make sure default secret files exist
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}.json"
{
  "www" : {
    "STAGEdev" : {
      "api"   : {"urlscheme" : "https", "url" : "api-dev.${WOV_PROJECT}.com"},
      "app"   : {"urlscheme" : "https", "url" : "app-dev.${WOV_PROJECT}.com"}
    },
    "STAGEprod" : {
      "api"   : {"urlscheme" : "https", "url" : "api.${WOV_PROJECT}.com"},
      "app"   : {"urlscheme" : "https", "url" : "app.${WOV_PROJECT}.com"}
    }
  }
}
EOF
  fi

  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}db.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}db.json"
{
  "${WOV_PROJECT}db" : {
    "//subhost" : "combined with WOV_CLUSTER to create host name. if localhost, only localhost",
    "subhost"      : "${WOV_PROJECT}dev",
    "username"     : "postgres",
    "endpoint"     : "unknown.rds.amazonaws.com",
    "database"     : "${WOV_PROJECT}dev",
    "port"         : 5432,
    "type"         : "postgres",
    "version"      : "9.6.11-R1",
    "password"     : "$(openssl rand -hex 20)",
    "instanceAvailabilityZone"    : "c",
    "instanceAvailabilityZoneAlt" : "d",
    "instance" : {
      "class"   : "db.t2.small",
      "storage" : 20
    },
    "ORIGINlocal" : {
      "//desc"   : "This is for connecting to a locally running system.",
      "subhost"  : "localhost",
      "endpoint" : "localhost",
      "//port"   : "This is the direct port the local POSTGRES db is listening to.",
      "port"     : 5432
    },
    "ORIGINremote" : {
      "//desc"   : "This is for connecting to a remotely running system.",
      "subhost"  : "localhost",
      "endpoint" : "localhost",
      "//port"   : "This is the ssh tunnel port opened through bastion.",
      "port"     : 65432
    },
  }
}
EOF
  fi

  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}_${WOV_ME}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}_${WOV_ME}.json"
{
  "//tokencmd" : "openssl rand -hex 20",
  "microservice" : { "STAGE${WOV_ME}" : { "token" : "GENERATE A TOKEN" } },
  "www" : {
    "STAGE${WOV_ME}" : {
      "api" : {"urlscheme" : "http", "url" : "localhost"},
      "app" : {"urlscheme" : "http", "url" : "localhost"}
    }
  }
}
EOF
  fi


  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}db_${WOV_ME}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${WOV_PROJECT}db_${WOV_ME}.json"
{
  "${WOV_PROJECT}db" : { "STAGE${WOV_ME}" : { "//" : "Separate database, should use separate user/pass", "database" : "${WOV_PROJECT}${WOV_ME}" } }
}
EOF
  fi


  # Guess at secrets remote (current repo plus _secrets)
  WOV_SECRETSARCHIVE=`git config --get remote.origin.url`
  WOV_SECRETSARCHIVE="${WOV_SECRETSARCHIVE%.git}_secrets.git"

  # ---------------------------------------------------------------------
  # Set secrets remote origin if not set
  RR=$(git -C "${WOV_BASEDIR}/wovtools/secrets" config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo ""
    l_ "Git SECRETS repository has no remote repository to push code to. Set that up now, and enter URL below."
    read -r -p "SECRETS ARCHIVE> Secrets Remote Git repository (${WOV_SECRETSARCHIVE}) [Y/*]:  " A
    if   [ "${A}" == "Y" ] || [ "${A}" == "y" ]; then WOV_SECRETSARCHIVE=${WOV_SECRETSARCHIVE}; 
    elif [ "${A}" != "" ]; then WOV_SECRETSARCHIVE="${A}"; fi

    # set remote origin
    git -C "${WOV_BASEDIR}/wovtools/secrets" remote add origin $A
    if [ "$?" != "0" ]; then l_error "SECRETS ARCHIVE> Setting git remote origin failed."; exit 1; fi

    # test newly set remote origin
    RR=$(git -C "${WOV_BASEDIR}/wovtools/secrets" remote -v) ; Re=$?
    if   [ $Re -ne 0 ]; then l_error "SECRETS ARCHIVE> Testing of remote git repo failed."; exit 1; 
    elif [ "${RR}" == "" ]; then l_error "SECRETS ARCHIVE> Remote git repo was not set correctly."; exit 1; fi

    # set upstream
    git -C "${WOV_BASEDIR}/wovtools/secrets" push --set-upstream origin master
    if [ "$?" != "0" ]; then l_error "SECRETS ARCHIVE> Pushing upstream failed."; exit 1; fi
  fi


  # /end secrets



  # Move back to basedir
  cd ${WOV_BASEDIR}



  # set project version from initing to a value
}




# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Initialize this project directory in a new WovTools project.

#  -f : force push
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
    echo
    fDisplayOptions
    exit 0


  else
    echo
    printf "\n\n***ERROR: unknown option '$1'.\n\n"
    echo
    fDisplayOptions
    exit 1
  fi
done











# ---------------------------------------------------------------------
echo "... ensure directory structure"
if [ "$(wov-env &> /dev/null ; echo $?)" == "1" ]; then
  echo "... creating new wovtools project in this directory."
  InitProject
else
  echo "... updating project: ${WOV_PROJECT}"
  WOV_BASEDIR=$(git rev-parse --show-toplevel)
fi


echo "...Ensure DB Archive structure so wov-env can run (interactive mode)"
wov-init-dba --exists-check
if [ $? -eq  1 ]; then 
  echo "  ...creating Database Archive"
  wov-init-dba
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to create Database Archive"
    exit 1
  fi
else
  echo "  ...skipping DB Archive creation"
fi

echo "... loading WovTools values."
initargs=( "$@" )
set ""
. wov-env-loader
#. wov-ns-check
set -- "${initargs[@]}"

# ---------------------------------------------------------------------
# query for new/updated data, overwriting env vars.

echo 
printf "Project Title [i.e. what shall we call it?]: (\"${WOV_PROJECTTITLE}\"): "
read A
if [ "${A}" != "" ]; then WOV_PROJECTTITLE=${A}; fi


echo
printf "Project Type [i.e. unused for now, but will be used for initial gen of project]: (\"${WOV_PROJECTTYPE}\"): "
read A
if [ "${A}" != "" ]; then WOV_PROJECTTYPE=${A}; fi

echo
printf "Project Description (one line): (\"${WOV_PROJECTDESCRIPTION}\"): "
read A
if [ "${A}" != "" ]; then WOV_PROJECTDESCRIPTION=${A}; fi


WOV_ARCHIVEREPOSITORY=$(cat ${HOME}/.wovtools | jq -r '.archive.repository')
echo
while true; do
  read -r -p "ARCHIVE> Remote Docker Repository: (\"${WOV_ARCHIVEREPOSITORY}\") ... Correct? [Y/n] " A

  case $A in
    ""|[Yy][Ee][Ss]|[Yy])
      break
    ;;
    [Nn][Oo]|[Nn])
      printf "ok, enter Docker repository for ARCHIVE name (ex. see AS ECR Repository URI: XXXX.dkr.ecr.us-east-1.amazonaws.com): "
      read WOV_ARCHIVEREPOSITORY
    ;;
  *)
    echo "Invalid input... (${A})"
    ;;
  esac
done




WOV_ARCHIVEENV=$(cat ${HOME}/.wovtools | jq -r '.archive.env')
echo
printf "ARCHIVE> Env Location (i.e. S3 location (ex. s3://wovtools.MYCOMPANY.com/archive ): (\"${WOV_ARCHIVEENV}\") "
read A
if [ "${A}" != "" ]; then WOV_ARCHIVEENV=${A}; fi


echo "... writing '${WOV_CONFIGFILE_MAIN}'"
touch "${WOV_CONFIGFILE_MAINRAW}"
jq ' .ver='${WOV_VERSION}' | .project.type="'"${WOV_PROJECTTYPE}"'" | .project.project="'"${WOV_PROJECT}"'"  | .project.title="'"${WOV_PROJECTTITLE}"'"  | .project.description="'"${WOV_PROJECTDESCRIPTION}"'" | .operation={} | .archive.env="'"${WOV_ARCHIVEENV}"'" | .archive.repository="'"${WOV_ARCHIVEREPOSITORY}"'"' "${WOV_CONFIGFILE_MAINRAW}" > ${WOV_BASEDIR}/wovtools/.config.json.$$ && cp ${WOV_BASEDIR}/wovtools/.config.json.$$ "${WOV_CONFIGFILE_MAINRAW}"
rm ${WOV_BASEDIR}/wovtools/.config.json.*



echo "... test Database Archive (wovtools/db/archive Git repo) configuration/existence"
#  cd ${WOV_BASEDIR}/wovtools/db/archive && git remote -v
timeout_monitor 8 "$$" "TIMEOUT ERROR: failed to connect to remote repository. You should: 1) check network connection 2) ensure repo exists 3) ensure you are using ssh, not https." &
Timeout_monitor_pid=$!
cd ${WOV_BASEDIR}/wovtools/db/archive && git ls-remote -q > /dev/null
if [ "$?" != "0" ]; then
  kill "$Timeout_monitor_pid"
  printf "\nWARNING: failed to find wovtools/db/archive repo. Check your configuration and ensure repo exists.\n"
  printf " NOTE: If you have no Wov databases, then ignore this.\n\n"
else
  kill "$Timeout_monitor_pid"
fi


wov-env-build -f --config

printf "\n\n... success! WovTools is successfully initialized for this project.\n"
printf "  - type 'wov-env -e' to verify and review settings.\n\n"
