#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=$(tput cols)


PROJECT=$(basename $(pwd))
while true; do
  read -r -p "PROJECT name : ${PROJECT} ... Correct? [Y/n] " A

  case $A in
    ""|[Yy][Ee][Ss]|[Yy])
    break
    ;;
    [Nn][Oo]|[Nn])
    printf "ok, enter project name: "
    read PROJECT
    if [[ ! $PROJECT =~ ^[A-Za-z][A-Za-z_0-9]+$ ]];  then
      echo "ERROR: bad project name, needs to be a string with no spaces (i.e. [A-Za-z][A-Za-z_0-9]*)" 
      PROJECT=$(basename $(pwd))
    fi
    ;;
  *)
    echo "Invalid input..."
    ;;
  esac
done


# --------------------------------------------------------------------- 
# Work with ~/.wovtools file
# --------------------------------------------------------------------- 
if [ ! -e "${HOME}/.wovtools" ]; then
  echo ""
  echo "ERROR: no ~/.wovtools file. Need '.me' entry in that file."
  exit 1
fi
WOV_ME=$(cat ${HOME}/.wovtools | jq -r '.me')



# ---------------------------------------------------------------------
#  Creates the WovTools project in this directory
# ---------------------------------------------------------------------
function InitProject()
{
  ISNEWGIT=0
  ISNEWSGIT=0

  echo "... init project"

  # ---------------------------------------------------------------------
  # Create git repo
  if [ ! -e ".git" ]; then
    echo "... creating git repository here"
    ISNEWGIT=1
    git init -q
  fi

  # ---------------------------------------------------------------------
  # Set remote origin
  RR=$(git config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo
    printf "Git repository has no remote repository to push code to. Set that up now, and enter URL below.\n"
    printf "  Remote git repository : "
    read A
    if [ "${A}" == "" ]; then echo "ERROR: must provide a repository."; exit 1; fi
    git remote add origin $A
    if [ "$?" != "0" ]; then echo "ERROR: setting git remote origin failed."; exit 1; fi
    git remote -v
    if [ "$?" != "0" ]; then echo "ERROR: testing of remote git repo failed."; exit 1; fi
    WOV_ARCHIVEREPOSITORY="${A}"
  fi

  # ---------------------------------------------------------------------
  # Select user name
  echo
  if [ "${WOV_USERNAME}" == "" ]; then WOV_USERNAME=$(git config user.name); fi
  printf "Enter your name (${WOV_USERNAME}): "
  read A
  if [ "${A}" != "" ]; then WOV_USERNAME="${A}"; fi

  # ---------------------------------------------------------------------
  # Select user email
  echo
  if [ "${WOV_USEREMAIL}" == "" ]; then WOV_USEREMAIL=$(git config user.email); fi
  printf "Enter your email (${WOV_USEREMAIL}): "
  read A
  if [ "${A}" != "" ]; then WOV_USEREMAIL="${A}"; fi

  WOV_BASEDIR=$(git rev-parse --show-toplevel)

  # Ensure data is updated
  git config user.name  "${WOV_USERNAME}"
  git config user.email "${WOV_USEREMAIL}"

  # Ensure lines in .gitignore
  echo "... creating .gitignore"
  LINES=("*.swp" ".DS_Store" "wovtools/secrets" "wovtools/cache" "wovtools/db/*.deltas" "wovtools/db/registry" "wovtools/local.json" "*.old" "*.orig" ".mochawesome-report" "*.log")
  touch .gitignore
  for f in "${LINES[@]}"; do
    echo "  ... adding to .gitignore: $f"
    if ! grep -qF "${f}" .gitignore ; then echo "${f}" >> .gitignore ; fi
  done


  echo "... create wovtools directory structure"
  # ---------------------------------------------------------------------
  # Create conf, k8s and containers directories
  mkdir -p ${WOV_BASEDIR}/wovtools/cache
  mkdir -p ${WOV_BASEDIR}/wovtools/cmds


  # ---------------------------------------------------------------------
  # Create the config.json 
  echo " ... check to create config.json"
  if [ ! -e ${WOV_BASEDIR}/wovtools/config.json ]; then 
    echo "   ... try to create config.json"
    cat <<EOF > ${WOV_BASEDIR}/wovtools/config.json
{
  "ver" : "initing",
  "project" : {
    "type" : "",
    "project" : "${PROJECT}",
    "title" : "",
    "description" : ""
  },
  "archive" : {
    "env" : "",
    "repository" : ""
  },
  "nodeploy" : [],
  "secrets" : {
    "dev" : [ 
      "cluster_defaults.json",
      "cluster_myaccess.json",
      "cluster_mymanaged.json",
      "repositories.json",
      "${PROJECT}.json",
      "${PROJECT}db.json",
      "${PROJECT}_${WOV_ME}.json",
      "${PROJECT}db_${WOV_ME}.json"
    ],
    "prod" : [
      "cluster_defaults.json",
      "cluster_myaccess.json",
      "cluster_mymanaged.json",
      "repositories.json",
      "${PROJECT}.json",
      "${PROJECT}db.json",
      "${PROJECT}_prod.json",
      "${PROJECT}db_prod.json"
    ]
  },
  "secretsmods": {
    "local" : {
      "description" : "For deverlopers to develop locally.",
      "routes": [
        [ "db.CLUSTERlocal",      "db"     ],
        [ "appcore.CLUSTERlocal", "appcore"   ]
      ]
    },
    "vh" : {
      "description" : "Used to setup a development pod 'vh'.",
      "routes": [
        [ "appcore.CLUSTERvh", "appcore"   ]
      ]
    }
  }
}
EOF
  fi
  echo "   ... exit to create config.json"


  # ---------------------------------------------------------------------
  # Create the wovtools/local.json 
  echo " ... check to create local.json"
  if [ ! -e ${WOV_BASEDIR}/wovtools/local.json ]; then 
    echo "   ... try to create local.json"
    cat <<EOF > ${WOV_BASEDIR}/wovtools/local.json
{
  "ver-local" : 1,
  "localcontext" : "local",
  "secrets" : {
    "${WOV_ME}" : [
      "cluster_myaccess.json",
      "cluster_mymanaged.json",
      "repositories.json",
      "${PROJECT}.json",
      "${PROJECT}db.json",
      "${PROJECT}_cw.json",
      "${PROJECT}db_cw.json"
    ]
  },
  "secretsmods" : {
  }
}
EOF
fi
  echo "   ... created local.json"


  # now commit so we can build branches
  # Build a git revision and all branches
  if [ "$ISNEWGIT" == "1" ]; then
    git add .gitignore wovtools/config.json
    git commit -a -m "initial commit"
  fi




  # ---------------------------------------------------------------------
  # Create branches

  echo
  echo "NOTE: Are the next commands for (push --set-upstream origin X) going to blow up? Do I have to set remote first before calling this?"
  echo "      git remote add origin [URL]"
  echo

  RR=$(git rev-parse --verify prod 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch 'prod', pushing to origin"; 
    git checkout -b prod || exit 1
    git push --set-upstream origin prod || exit 1
  fi
  RR=$(git rev-parse --verify dev 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch 'dev', pushing to origin"; 
    git checkout -b dev || exit 1
    git push --set-upstream origin dev || exit 1
  fi
  if [ "$(git rev-parse --verify master 2> /dev/null ; echo $?)" != "0" ]; then git branch -d master; echo "  ... deleting branch 'master' (prod will be default)"; fi

#    git push -f origin prod
#  echo "TODO: set branch remote and make sure prod is the default"
#  echo " git push -u <remote_name> <local_branch_name>"
#  git push --set-upstream origin prod
  touch .gitignore

  # Select user branch/stage
#  echo
#  printf "Select a user stage to use (i.e. this will be the git branch and the stage portion of the Kubernetes namespace.\n"
#  printf "  - User stage (i.e. your initials or username) (${WOV_ME}) : "
#  read A
#  [[ ${A} =~ ^[A-Za-z][A-Za-z_0-9]+$ ]] || ( echo "ERROR: bad user stage name (i.e. [A-Za-z][A-Za-z_0-9]*)" ; exit 1)
#  if [ "${A}" != "" ]; then WOV_ME=${A}; fi
#  if [ "${WOV_ME}" == "" ]; then echo "ERROR: must provide a stage name."; exit 1; fi

  # ---------------------------------------------------------------------
  # Select user branch/stage
  RR=$(git rev-parse --verify ${WOV_ME} 2> /dev/null)
  if [ "$?" != "0" ]; then 
    echo "  ... creating branch '${WOV_ME}', pushing to origin"
    git checkout -b ${WOV_ME} || exit 1
    git push --set-upstream origin ${WOV_ME} || exit 1
  fi



  # ---------------------------------------------------------------------
  # Create secrets repo
  # ---------------------------------------------------------------------
  SECRETSDIR="`wov-cd -e secrets`/${WOV_ME}_secrets"
  if [ "${SECRETSDIR}" == "" ]; then
    echo "ERROR: Unknown secrets dir. Add an entry to ~/.wovtools, for : dirs.secrets.dir."
    exit 1
  fi
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets" ]; then
    ln -s "${SECRETSDIR}" "${WOV_BASEDIR}/wovtools/secrets"
    if [ "$?" != "0" ]; then
      echo "ERROR: failed linking to '${SECRETSDIR}' at '${WOV_BASEDIR}/wovtools/secrets'."
      exit 1
    fi
  fi

  # make sure default secret files exist
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}.json"
{
  "www" : {
    "STAGEdev" : {
      "app"   : {"fullurl" : "http://app-dev.${PROJECT}.com"}
    },
    "STAGEprod" : {
      "app"   : {"fullurl" : "http://app.${PROJECT}.com"}
    }
  }
}
EOF
  fi

  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}db.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}db.json"
{
  "${PROJECT}db" : {
    "host"         : null,
    "instancename" : "${PROJECT}",
    "username"     : "postgres",
    "version"      : "9.6.11-R1",
    "database"     : "",
    "password"     : "",
    "type"         : "postgres",
    "port"         : 5432,
    "host"         : ".rds.amazonaws.com",

    "instanceAvailabilityZone"    : "c",
    "instanceAvailabilityZoneAlt" : "d",
    "instance" : {
      "class"   : "db.t2.small",
      "storage" : 20
    }
  }
}
EOF
  fi

  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}_${WOV_ME}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}_${WOV_ME}.json"
{
  "//tokencmd" : "openssl rand -hex 20",
  "microservice" : { "STAGE${WOV_ME}" : { "token" : "GENERATE A TOKEN" } },
  "www" : { "STAGE${WOV_ME}" : { "app" : { "urlscheme" : "https", "url" : "app-${WOV_ME}.${PROJECT}.com" } } }
}
EOF
  fi


  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}db_${WOV_ME}.json" ]; then 
    cat <<EOF > "${WOV_BASEDIR}/wovtools/secrets/${PROJECT}db_${WOV_ME}.json"
{
  "${PROJECT}db" : { "STAGE${WOV_ME}" : { "//" : "Separate database, should use separate user/pass", "database" : "" } }
}
EOF
  fi


  # /end secrets



  # Move back to basedir
  cd ${WOV_BASEDIR}



  # set project version from initing to a value



}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Initialize this project directory in a new WovTools project.

#  -f : force push
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
    echo
    fDisplayOptions
    exit 0


  else
    echo
    printf "\n\n***ERROR: unknown option '$1'.\n\n"
    echo
    fDisplayOptions
    exit 1
  fi
done











# ---------------------------------------------------------------------
echo "... ensure directory structure"
if [ "$(wov-env &> /dev/null ; echo $?)" == "1" ]; then
  echo "... creating new wovtools project in this directory."
  InitProject
else
  echo "... updating project: ${PROJECT}"
fi

echo "... loading WovTools values."
initargs=( "$@" )
set ""
. wov-env
#. wov-ns-check
set -- "${initargs[@]}"

wov-env -e

# ---------------------------------------------------------------------
# query for new/updated data, overwriting env vars.

echo 
printf "Project Title [i.e. what shall we call it?]: (${WOV_PROJECTTITLE}) "
read A
if [ "${A}" != "" ]; then WOV_PROJECTTITLE=${A}; fi


echo
printf "Project Type [i.e. unused for now, but will be used for initial gen of project]: (%s) " "${WOV_PROJECTTYPE}"
read A
if [ "${A}" != "" ]; then WOV_PROJECTTYPE=${A}; fi

echo
printf "Project Description (one line): (${WOV_PROJECTDESCRIPTION}) "
read A
if [ "${A}" != "" ]; then WOV_PROJECTDESCRIPTION=${A}; fi

echo
printf "Remote Docker Repository (i.e. you can skip for now): (${WOV_ARCHIVEREPOSITORY}) "
read A
if [ "${A}" != "" ]; then WOV_ARCHIVEREPOSITORY=${A}; fi

echo
printf "Archive Env Location (i.e. S3 location (ex. s3://${WOV_PROJECT}.mycompany.com/archive ): (${WOV_ARCHIVEENV}) "
read A
if [ "${A}" != "" ]; then WOV_ARCHIVEENV=${A}; fi


echo "... writing 'wovtools/config.json'"
jq ' .ver='${WOV_VERSION}' | .project.type="'"${WOV_PROJECTTYPE}"'" | .project.project="'"${WOV_PROJECT}"'"  | .project.title="'"${WOV_PROJECTTITLE}"'"  | .project.description="'"${WOV_PROJECTDESCRIPTION}"'" | .operation={} | .archive.env="'"${WOV_ARCHIVEENV}"'" | .archive.repository="'"${WOV_ARCHIVEREPOSITORY}"'"' ${WOV_BASEDIR}/wovtools/config.json > ${WOV_BASEDIR}/wovtools/.config.json.$$ && cp ${WOV_BASEDIR}/wovtools/.config.json.$$ ${WOV_BASEDIR}/wovtools/config.json
rm ${WOV_BASEDIR}/wovtools/.config.json.*





