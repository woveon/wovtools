#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
DORETAIN=0
FOLD=80


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
pushenvargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushenvargs[@]}"



# Cache the current values
WOV_CUR_PVER=${WOV_PVER}
WOV_CUR_SVER=${WOV_SVER}


if [ "${WOV_STAGE}" == "prod" ]; then
  printf "\n\n**** deploying to production *********************************\n\n"
  printf "   Are you sure? (yes|NO) "
  read $A
  if [ "$A" == "yes" ] || [ "$A" == "YES" ]; then
    printf "  ... ok, continuing.\n"
  else
    printf "\n  ... stopping.\n"
    exit 1
  fi
fi


#set -x


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Deploys a running kubernetes project from an archive.

  --pver|--sver X : sets the Project and Secret version for roll-backs
  -r|--retain : retains the deployment values locally (potential security risk)
  -f : force push
  -h : this help
  -q/-v : quiet/verbose

EOF
}



# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-r" ] || [ "$1" == "--retain" ]; then
    shift
    DORETAIN=1

  elif [ "$1" == "--pver" ]; then
    shift
    WOV_PVER="$1"
    shift

  elif [ "$1" == "--sver" ]; then
    shift
    WOV_SVER="$1"
    shift

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


## all args gone by now so not backing up args
#. wov-push


# If deploying the latest PVER, check that all code is pushed to archive
if [ "${WOV_CUR_PVER}" == "${WOV_PVER}" ]; then
  wov-git-check -q ${WOV_BASEDIR}
  R1=$?
  wov-git-check -q ${WOV_BASEDIR}/wovtools/secrets
  R2=$?
  if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then exit 1; fi
fi

# If deploying the latest SVER, check that all env is pushed to archive
if [ "${WOV_CUR_SVER}" == "${WOV_SVER}" ]; then
  pushenvargs=( "$@" )
  set ""
  . wov-push-env -q
  set -- "${pushenvargs[@]}"
fi

ARCHBASE=${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}


# --------------------------------------------------------------------- 
# Make directory to put files
DEPLOYDIR=${WOV_BASEDIR}/wovtools/cache/.deployments/${WOV_PVER}_${WOV_STAGE}_${WOV_SVER}.$$
mkdir -p ${DEPLOYDIR}/conf
mkdir -p ${DEPLOYDIR}/k8s
chmod -R 700 ${DEPLOYDIR}


# --------------------------------------------------------------------- 
# Pull env files
aws s3 sync ${WOV_ARCHIVEENV}/${ARCHBASE}/conf ${DEPLOYDIR}/conf  --delete
aws s3 sync ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s ${DEPLOYDIR}/k8s  --delete

# --------------------------------------------------------------------- 
# Add labels
if [ $DOECHO -ge 1 ]; then echo "  ... labeling namespace"; fi
R=$(kubectl get namespaces | grep ${WOV_NS})
if [ "$?" != "0" ]; then
  printf "\n\nERROR: missing namespace '${WOV_NS}'. Type : 'kubectl create namespace ${WOV_NS}' to create one.\n\n"
  exit 1
fi
kubectl label namespace ${WOV_NS} --overwrite WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}

# --------------------------------------------------------------------- 
# Deploy the conf ConfigMap files
FILES=$(cd ${DEPLOYDIR}/conf; ls *.ck8s 2> /dev/null)
for F in ${FILES}; do
  f=${F%.ck8s}
  if [ $DOECHO -ge 1 ]; then echo "  ... creating ConfigMap ${f} from ${F}"; fi
  DATA=$(awk 'NF { print }' ${DEPLOYDIR}/conf/${F} | awk -F'=' '!/^($$|[[:blank:]]*#)/ { print "    --from-literal=" $0 , "\\" }')
  kubectl delete configmap ${f} #2> /dev/null
  kubectl create configmap ${f} ${DATA}
  if [ "$?" != "0" ]; then
    printf "\nERROR: failed creating ConfigMap $f.\n"
    printf " - check file ${DEPLOYDIR}/conf/${F}\n"
    exit 1
  fi
  kubectl label  configmap ${f} --overwrite WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}
done

# --------------------------------------------------------------------- 
# Deploy the conf secret files
FILES=$(cd ${DEPLOYDIR}/conf; ls *.sk8s 2> /dev/null)
for F in ${FILES}; do
  f=${F%.sk8s}
  if [ $DOECHO -ge 1 ]; then echo "  ... creating Secret ${f} from ${F}"; fi
  DATA=$(awk 'NF { print }' ${DEPLOYDIR}/conf/${F} | awk -F'=' '!/^($$|[[:blank:]]*#)/ { print "    --from-literal=" $0 , "\\" }')
  kubectl delete secret ${f} #2> /dev/null
  kubectl create secret generic ${f} ${DATA}
  kubectl label  secret ${f} --overwrite WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}
done

# --------------------------------------------------------------------- 
# Deploy the k8s files
if [ $DOECHO -ge 1 ]; then echo "... deploying Kubernetes"; fi
if [ $DOECHO -ge 2 ]; then echo "  ... from ${DEPLOYDIR}/k8s"; fi
kubectl apply -f ${DEPLOYDIR}/k8s
#FILES=$(cd ${DEPLOYDIR}/k8s; ls *.yaml)
#for F in ${FILES}; do
#  f=${F%.yaml}
#  if [ $DOECHO -ge 1 ]; then echo "  ... apply k8s: ${F}"; fi
#  kubectl apply -f ${DEPLOYDIR}/k8s/${F}
#  # kubectl label secret ${f} --overwrite WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}
#done


# --------------------------------------------------------------------- 
# Cleanup
if [ ${DORETAIN} == 1 ]; then
  echo "... skipping cleanup"
else
  rm -Rf ${DEPLOYDIR}
fi

