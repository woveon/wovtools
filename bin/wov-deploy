#!/usr/bin/env bash

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {files ...}

Deploys and updates a running kubernetes project, either from a specific and versioned push, or into a personal dev stage during development.

files   : all by default, or type them here and do individual only

 Deploy Types (one required):
  --dev   : Push current development environment to current development cluster (NOT PRODUCTION). 
  --stage : Proper call to roll a version to a stage in the cluster

   Deploy Options:
    --pver|--sver X : sets the Project and Secret version for roll-backs
    --conf-only        : Only push configuration files (ConfigMaps and Secrets)
    -f : force push
    --vh : build vh configuration (default)
    --VH : no build VH configuration
    -r|--retain        : retains the deployment values locally (potential security risk)
    --dry-run          : pull files but don't deploy


 Utility:
  -lversions         : list deployable versions in the Archive
  --check-containers : check that these containers exist in the container repository
  --health           : checks health of deployed microservices
    --health-no-tls/--health-tls : force http/https on routes

 General Options:
  -h : this help
  -q/-v : quiet/verbose


EOF
}

. wov-env-ops fDisplayOptions "$@"
. wov-env-common



DRYRUN=0
CONFONLY=0
DEPLOYTYPE=
#BUILDVH=1

# Cache the current (and actual) values, and allow WOV_PVER/SVER to be manipulated
WOV_CUR_PVER=${WOV_PVER}
WOV_CUR_SVER=${WOV_SVER}

# Recipes for ConfigMaps and Secrets, read from cache directory
RECIPESCM=()
RECIPESSE=()



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doAddLabels()
{
  local R=
  local Re=

  # --------------------------------------------------------------------- 
  # Add labels
  l_ "... labeling namespace"
  R=$(kubectl -n ${WOV_NS} get namespaces | grep ${WOV_NS})
  if [ "$?" != "0" ]; then
    printf "\n\nERROR: missing namespace '${WOV_NS}'. Type : 'kubectl create namespace ${WOV_NS}' to create one.\n\n"
    exit 1
  fi
  R=$(kubectl -n ${WOV_NS} label --overwrite namespace ${WOV_NS} -v=0 WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}) ; Re=$?
  if [ $Re -ne 0 ]; then
    l_error "Failed to label namespace '${WOV_NS}'."
    exit 1
  else
    l_verbose "  ...${R}"
  fi
}


# Converts recipes into microservice names
#  $1 - directory with cm/se k8s files
#  $@ - named recipes, otherwise all from directory are used
function doBuildRecipes()
{
  # Files for Configmap and Secrets file
  CMDIR=${1}/cm
  SEDIR=${1}/se
  shift

  # New microservice for each container if you give them on the command line, or just read the directory
  if [ "${#@}" == "0" ]; then
    # l_ "CMDIR: ${CMDIR}"
    RECIPESCM=( $(cd ${CMDIR} && find * -maxdepth 0 -type f 2> /dev/null) )
    RECIPESSE=( $(cd ${SEDIR} && find * -maxdepth 0 -type f 2> /dev/null) )
  else
    for r in "${@}"; do
      RECIPESCM+=( "${r}" )
      RECIPESSE+=( "${r}" )
    done
  fi
}


# --------------------------------------------------------------------- 
# Reads the files and creates ConfigMap and Secrets
#  $1 = deploy directory source (ex. ${WOV_CACHEDIR}/clusters/${WOV_CLUSTER}, or pulled from archive)
#  $2 = configuration (ConfigMap/Secret) extention (ex. 'vh' so for microservice 'apirest', creates 'apirestvh' )
#       NOTE: use 'null' for no extension (so it doesn't ignore "" passed in)
#  $* = recipes
# --------------------------------------------------------------------- 
function doDeployConf()
{
  local R=
  local Re=
  local retval=0
  local DEPLOYSRC=$1
  local CONFEXT=$2
  if [ "$CONFEXT" == "null" ]; then CONFEXT=""; fi
  shift
  shift

  l_verbose "... deploy configmaps and secrets: from ${DEPLOYSRC:${#WOV_BASEDIR}+1} : ${@}"

  doBuildRecipes ${DEPLOYSRC} $@

  # Add in project level CM/SE
  # RECIPESCM+=( "${WOV_PROJECT}" )
  # RECIPESSE+=( "${WOV_PROJECT}" )

  # Create ConfigMap PLUGIN
  # --------------------------------------------------------------------- 
  # l_ "RECIPESCM : ${RECIPESCM[@]}"
  for f in "${RECIPESCM[@]}"; do

    l_verbose "  ...create K8s ConfigMap '${f}' in: '${DEPLOYSRC:${#WOV_BASEDIR}+1}'"

    local MSNAME=${f}
    local MSNAME_lower=`echo ${MSNAME} | tr '[:upper:]' '[:lower:]'`
    local CMFILE="${DEPLOYSRC}/cm/${MSNAME}"          # full path to file

    # delete existing configmap
    kubectl -n ${WOV_NS} delete configmap "${MSNAME_lower}${CONFEXT}" > /dev/null 2>&1
      # no check because it could be that the cm does not exist

    # if no configmap file, error out
    if [ ! -e "${CMFILE}" ]; then 
      l_error "No ConfigMap file '${CMFILE:${#WOV_BASEDIR}+1}'"
      retval=1
      exit 1
      # printf "\n\nERROR: no configmap '${MSNAME}${CONFEXT}', file ${CMFILE}. (RECIPES: '${RECIPES[@]}')\n\n"
      continue; 
    fi

    # l_ "CMFILE: ${CMFILE}"
    # Convert X=Y into ConfigMap commands in DATA
    DATA=()
    while read l; do
      # echo ":$l"
      d=$(echo $l | awk 'NF { print }' | awk -F'=' '!/^($$|[[:blank:]]*#)/ { print "--from-literal=" $0 }' )
      if [ "$d" != "" ]; then DATA+=("$d"); fi
    done <${CMFILE}

    # l_ "DATA: ${DATA[@]}"
    R=$(kubectl -n ${WOV_NS} create configmap "${MSNAME_lower}${CONFEXT}" "${DATA[@]}") ; Re=$?
    if [ $Re -ne 0 ]; then
      l_error "Failed creating ConfigMap '${MSNAME_lower}${CONFEXT}' from '${CMFILE}'."
      l_error "CMFILE values: (should be 'k=v' format for K8s ConfigMap generation)."
      cat ${CMFILE}
      retval=1
      exit 1
    fi
  done


  # Create Secret PLUGIN
  # --------------------------------------------------------------------- 
  for f in "${RECIPESSE[@]}"; do

    l_verbose "  ...create K8s Secret '${f}' in: '${DEPLOYSRC:${#WOV_BASEDIR}+1}'"

    local MSNAME=${f}${FILEEXT}
    local MSNAME_lower=`echo ${MSNAME} | tr '[:upper:]' '[:lower:]'`
    local SEFILE="${DEPLOYSRC}/se/${MSNAME}"          # full path to file

    # delete existing secret
    kubectl -n ${WOV_NS} delete secret "${MSNAME_lower}${CONFEXT}" > /dev/null 2>&1 

    # if no secret file, continue on (not all have secrets)
    if [ ! -e "${SEFILE}" ]; then
      l_error "No Secret file '${SEFILE:${#WOV_BASEDIR}}'"
      retval=1
      continue
    fi

    # Convert X=Y into Secret commands in DATA
    DATA=()
    while read l; do
      #echo ":$l"
      d=$(echo $l | awk 'NF { print }' | awk -F'=' '!/^($$|[[:blank:]]*#)/ { print "--from-literal=" $0 }' )
      if [ "$d" != "" ]; then DATA+=("$d"); fi
    done <${SEFILE}

    # Create and label secret
    R=$(kubectl -n ${WOV_NS} create secret generic "${MSNAME_lower}${CONFEXT}" "${DATA[@]}") ; Re=$?
    if [ $Re -ne 0 ]; then
      l_error "Failed creating Secret '${MSNAME_lower}${CONFEXT}' from '${SEFILE}'.\n"
      retval=1
      exit 1
    fi

    R=$(kubectl -n ${WOV_NS} label secret "${MSNAME_lower}${CONFEXT}" --overwrite WOV_DEPLOYED=`date +%s` WOV_PVER=${WOV_PVER} WOV_SVER=${WOV_SVER}) ; Re=$?
    if [ $Re -ne 0 ]; then l_warn "Failed labeling '${MSNAME_label}${CONFEXT}'. CONTINUING..."; fi
  done

  return $retval
}


# --------------------------------------------------------------------- 
# If dev deploy, then might not have an image to use. test if aws image exists
# NOTE: only for AWS ECR... other Docker registries will be problematic...
#  $* - named containers (will check if 'deployment' or not to be safe)
# --------------------------------------------------------------------- 
function doCheckContainerImagesExist()
{
  local imageissues=()
  local containers=()
  local retval=0

  l_verbose "... testing container images exist"

  # Get RECIPES array from args or just get them all
  R=( "$@" ) ; if [ ${#R[@]} -eq 0 ]; then fGetMicroserviceRecipes; R=( "${RECIPES[@]}" ); fi

  l_verbose "  ...recipes to search for container images: ${R[@]}"

  # NOTE: This commented out code looks at directories, and the k8s yaml there
#  # for each recipe, there should be a deployment
#  for ms in ${R[@]}; do
#    local k8sfile="$(WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT})/k8s/${ms}.yaml"
#    local k=`grep -i 'kind' ${k8sfile} | sed 's/.*://g' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'`
#    if [ "$k" == "deployment" ]; then
#      # NOTE: assume 1 container image in deployment
#      local image=`yq r ${k8sfile} spec.template.spec.containers[0].image`
#      l_ "found image : ${image}"
#      local kk=`basename ${image}`
#      l_ "found kk : ${kk}"
#      kk="${kk%:*}"
#      containers+=("${kk[0]}")
#      if [ ${DOECHO} -ge 2 ]; then printf "  ... check for container $kk\n"; fi
#    fi
#  done
#
#  l_ "container image tags to find: ${containers[@]}"

#  #local rdir=${WOV_CACHEDIR}/clusters/${WOV_CLUSTER}
#  local rdir="$1"
#  shift
#
#
#  local containers=()
#
#  # Build files to check for containers, from arguments or all directory files
#  local k8sfiles=()
#  if [ "$#" == "0" ]; then
#    k8sfiles=( $(cd ${rdir} && ls *.yaml) ) ; k8sfilese=$?
#    if [ $k8sfilese != 0 ]; then echo "ERROR: failed to find k8s files."; exit 1; fi
#  else
#    for ms in ${*}; do
#      k8sfiles+=( "deployment-${ms}.yaml" )
#    done
#  fi
#
#  if [ $DOECHO -ge 2 ]; then echo "k8sfiles:  ${k8sfiles[@]}"; fi
#
#  for f in ${k8sfiles[@]}; do
#    # local k=`yaml get $f kind`
#    # echo "  - file : ${f}"
#    local k=`grep -i 'kind' $rdir/$f | sed 's/.*://g' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'`
#    if [ "$k" == "deployment" ]; then
#      # NOTE: assume 1 container image in deployment
#      local image=`yq r $rdir/$f spec.template.spec.containers[0].image`
#      local kk=`basename ${image}`
#      kk="${kk%:*}"
#      containers+=("$kk")
#      if [ ${DOECHO} -ge 2 ]; then printf "  ... check for container $kk\n"; fi
#    fi
#  done
##  echo "containers :  ${containers[@]}"

  # R is the recipes in wovtools/msrecipes, or command line
  for ms in ${R[@]}; do

    # images are always lowercase but microservices are not, so msl is ms lowercased
    local msl=$(echo ${ms} | tr '[:upper:]' '[:lower:]')
    local img="${WOV_PROJECT}/${msl}"
    local tag="${WOV_STAGE}_${WOV_PVER}"

    l_verbose "  ...search for image ${img}:${tag}"

    # test if image exists
    aws ecr list-images --repository-name ${img} --filter=tagStatus=TAGGED | jq '.imageIds[].imageTag' | grep "${tag}" > /dev/null
    if [ "$?" == "0" ]; then
      l_verbose "  ... container image ${msl}:${tag} exists"
    else
      l_error "image '${img}:${tag}' does not exist in AWS ECR! This will fail to load pod."
      retval=1
      imgissues+=( "$ms" )
    fi
  done

  if [ ${#imgissues} -ne 0 ]; then
    l_error "Run (minus the '${WOV_PROJECT}'): 'wov-push-container ${imgissues[*]}'"
  fi

  return $retval
}


# --------------------------------------------------------------------- 
#  $1 - source directory
#  $* - specific k8s files to deploy. if none, deploy all in directory.
# --------------------------------------------------------------------- 
function doDeployK8s()
{
  local DEPLOYSRC=$1
  shift

  # Files for Configmap file
  K8SDIR=${DEPLOYSRC}/k8s

  # Deploy the k8s files
  l_ "... deploying Kubernetes"
  l_verbose "  ... from ${K8SDIR:${#WOV_BASEDIR}+1}"

  # If $# is not empty, then this is called with recipes, so convert those to files
  FILES=()
  if [ "$#" != "0" ]; then
    for r in ${@:1}; do
      echo "HERE: this makes assumptions about the names of these files... either skip that or do a grep for the deployment and name"
      FILES+=( "deployment-${r}" )
    done
  else
    # echo "k8sdir ${K8SDIR}"
    FILES=( $(cd ${K8SDIR} && ls *.yaml | sed -e 's/\(.*\)\..*/\1/') ) ; FILESe=$?
    if [ $FILESe != 0 ]; then echo "ERROR: failed to find files."; exit 1; fi
  fi

      set -x
  l_verbose "...K8s files to deploy: ${FILES[*]}"
  for f in "${FILES[@]}"; do
    if [ ! -e ${K8SDIR}/$f.yaml ]; then
      l_error "Unknown k8s file '$f.yaml' in '${K8SDIR:${#WOV_BASEDIR}+1}'."

      # NOTE: using ^ and $ for exact match of string
    elif [ "$(jq '.nodeploy[] | test("'"^${f}$"'")' ${WOV_CONFIGFILE_MERGED})" == "true" ]; then
      l_ "  ...skipping '$f': as it is on the nodeploy list."
    else
      printf "  ..."
      kubectl -n ${WOV_NS} apply -f "${K8SDIR}/$f.yaml"

      # Per type of k8s instructions
      local k=`grep -i 'kind' "${K8SDIR}/$f.yaml" | sed 's/.*://g' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'`
      if [ "$k" == "deployment" ]; then
        # label deployments for wov command can find them
        kubectl label --overwrite deployment alywandata wovtools.project=${WOV_PROJECT} wovtools.ms=${f}
      fi
    fi
      set +x
  done
}






# ---------------------------------------------------------------------
# Push current development environment to cluster. 
# ---------------------------------------------------------------------
function doDeployDev()
{
  local retval=0

#  echo "WOV_ORIGIN: ${WOV_ORIGIN}"

  if [ ${WOV_STAGE} == 'prod' ] || [ ${WOV_STAGE} == 'dev' ]; then
    printf "\n\n\nERROR: deploying straight into stage ${WOV_STAGE} is not allowed. Do a 'wov-push' and then a 'wov-deploy --stage'.\n\n"
    exit 1
  fi

  if [ ${DOECHO} -ge 1 ]; then printf "... dev development\n"; fi

  # Ensure the cluster's environment (and vh if needed) is up to date

  if [ ${DRYRUN} -ne 1 ]; then
    l_ "  ... deploy DEV cluster configuration '${WOV_CLUSTER}'."
  else
    l_ "  ... [DRY RUN] deploy DEV cluster configuration '${WOV_CLUSTER}'."
  fi

  # wov-env-build -q --cluster ${WOV_CLUSTER}
  if [ "$?" != "0" ]; then exit 1; fi
#  if [ "$BUILDVH" == "1" ]; then 
#    if [ $DOECHO -ge 1 ]; then printf "  ... deploy cluster configuration 'vh'.\n"; fi
#    wov-env-build -q --cluster vh
#    if [ "$?" != "0" ]; then exit 1; fi
#  fi


  # Deploy to cluster, the relevant K8s "stuff"
  # local k8sdir="`WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT}`"
  local k8sdir="`WOV_getClusterConfigDir self ${WOV_CONTEXT}`"
  doDeployConf "${k8sdir}" "null" $*
  # l_ "CONFONLY ${CONFONLY}"
  # if [ "$BUILDVH" == "1" ]; then l_warn "FIX ME. directoyr is wrong"; doDeployConf ${WOV_CACHEDIR}/clusters/vh "vh" $*; fi
  if [ ${DRYRUN} -ne 1 ]; then 
    if [ "${CONFONLY}" == "0" ]; then

      if [ $retval -eq 0 ]; then
        # Make sure images exist before patch
        doCheckContainerImagesExist "$@"
        retval=$?
      fi

      if [ $retval -eq 0 ]; then
        # Add metadata
        doAddLabels
        retval=$?
      fi

      if [ $retval -eq 0 ]; then
        # Update the cluster to current environments
        # doDeployK8s ${WOV_CACHEDIR}/clusters/${WOV_CLUSTER} $*
        doDeployK8s "${k8sdir}" "$@"
        retval=$?
      fi

      if [ $retval -eq 0 ]; then
        # Point to development containers and make sure they are available
        doPatchDeployments $*
        retval=$?
      fi

    fi
  fi

  return $retval
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function join_by { local IFS="$1"; shift; echo "$*"; }


# ---------------------------------------------------------------------
# Patch deployemnts to point to STAGE_dev. each deployment overwrites this, so call each time to keep
# ---------------------------------------------------------------------
function doPatchDeployments()
{
  l_ "... patching deployment to use '${WOV_STAGE}_dev' tagged containers."

  if [ ${WOV_STAGE} == 'prod' ]; then
    printf "\n\n\nERROR: patching straight into production is not allowed. Do a 'wov-push' and then a 'wov-deploy --stage'.\n\n"
    exit 1
  fi

  # use recipes from args, or just read them in
  R=( "$@" ) ; if [ ${#R[@]} -eq 0 ]; then fGetMicroserviceRecipes; R=( "${RECIPES[@]}" ); fi

  # for each Microservice (aka Deployment), patch it
  for r in "${R[@]}"; do

    local d="$(echo "$r" | tr '[:upper:]' '[:lower:]')"

    if [ "$d" != "$r" ]; then
      l_verbose "patch deployment: $d, ms : (actual ms name: $r)"
    fi

    # NOTE: using ^ and $ for exact match of string
    if [ "$(jq '.nodeploy[] | test("'"^${d}$"'")' ${WOV_CONFIGFILE_MERGED})" == "true" ]; then
      printf "...skipping patch of '$d': as it is on the nodeploy list.\n"
      continue
    fi

    # get container and remove trailing tag
    cntr_raw=$(kubectl -n ${WOV_NS} get deployment $d -o json) ; cntr_rawe=$?
    if [ $cntr_rawe != 0 ]; then
      echo "ERROR: failed to find existing deployment to patch. Do a full deploy."
      exit 1
    fi
    cntr=$(echo ${cntr_raw} | jq -r '.spec.template.spec.containers[0].image')
    cntr_bits=(${cntr//:/ })
    #echo "${cntr_bits[@]}"
    unset 'cntr_bits[${#cntr_bits[@]}-1]'
    #echo "${cntr_bits[@]}"
    cntr1=`join_by : ${cntr_bits}`
    #echo "  cntr1: ${cntr1}"
    cntr2="${cntr1}:${WOV_STAGE}_dev"
    #echo "  cntr2: ${cntr2}"

    # patch for ${STAGE}_dev containers for deployment
    local patchport="{ \"spec\" : { \"template\" : { \"spec\" : { \"containers\" : [{ \"name\" : \"$d\", \"image\" : \"${cntr2}\"}]}}}}"
    #printf "    ${patchport}\n"
    printf "  ..."
    kubectl -n ${WOV_NS} patch deployment $d -p "$patchport"
    A=$?
    if [[ $A == 0 ]]; then
      if [ $DOECHO -ge 2 ]; then printf "    ... patch success\n"; fi
      RETVAL=0
    elif [[ $A == 1 ]]; then
      if [ $DOECHO -ge 2 ]; then printf "    ... not patched\n"; fi
      RETVAL=0
    else
      if [ $DOECHO -ge 2 ]; then printf "    ... patch failed (error code $A)\n"; fi
      RETVAL=1
  fi
  done
}

# ---------------------------------------------------------------------
# Proper roll to stage call
# ---------------------------------------------------------------------
function doDeployStage()
{
  local R=
  local Re=

  # Little more feedback
  if [ "${WOV_CUR_PVER}" != "${WOV_PVER}" ] || [ "${WOV_CUR_SVER}" != "${WOV_SVER}" ]; then
    printf " deploying version: ${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}\n"
  fi
  printf "\n"

  if [ ${DRYRUN} -ne 1 ]; then
    l_ "  ... deploy STAGE cluster '${WOV_CONTEXT}'."
  else
    l_ "  ... [DRY RUN] deploy STAGE cluster '${WOV_CONTEXT}'."
  fi

#  # Build the cluster configuration, origin self so we can push that
#  wov-env-build --origin self --context ${WOV_CONTEXT} -q --cluster
#  if [ $? -ne 0 ]; then exit 1; fi


  # Pull environment from the Archive (that was just built)
  # --------------------------------------------------------------------- 
  local ARCHPATH="$(WOV_getArchiveRelativePath ${WOV_CLUSTER})"
  # local ARCHBASE="$(getRelativeArchivePath ${WOV_CLUSTER})"
  local DEPLOYSRC=${WOV_CACHEDIR}/.deployments/${ARCHPATH}.$$

  mkdir -p ${DEPLOYSRC}
  if [ "$?" != "0" ]; then exit 1; fi
  chmod 700 ${DEPLOYSRC}
  if [ "$?" != "0" ]; then exit 1; fi

  l_verbose "...pulling deployment from Archive : '${WOV_ARCHIVEENV}/${ARCHPATH}'"
  l_verbose "...placing into '${DEPLOYSRC:${#WOV_BASEDIR}+1}'"
  if [ ! -e ${DEPLOYSRC} ]; then
    mkdir -p ${DEPLOYSRC}
    if [ $? -ne 0 ]; then l_error "Could not create directory to store config at : '${DEPLOYSRC}'"; exit 1; fi
  fi

  # Pull AWS S3 files
  R=$(cd ${DEPLOYSRC} ; aws s3 sync --quiet "${WOV_ARCHIVEENV}/${ARCHPATH}" "." --delete) ; Re=$?
  if [ $Re -ne 0 ]; then
    l_error "Failed to pull from AWS S3 : '${R}'."
    exit 1
  fi

  # Check Containers exist before deploying
  doCheckContainerImagesExist "$@"
  if [ $? -ne 0 ]; then exit 1; fi


  if [ ${DRYRUN} -ne 1 ]; then 
    if [ "${CONFONLY}" == "1" ]; then
      doDeployConf ${DEPLOYSRC} "null" $*
    else
      doAddLabels
      doDeployConf ${DEPLOYSRC} "null" $*
      doDeployK8s  ${DEPLOYSRC} $*
      rm -Rf ${DEPLOYSRC}
    fi
  else
    l_ "  ...dryrun success"
  fi

}


# ---------------------------------------------------------------------
# Check routes. Uses a search for '.healthpath' as opposed to recipes.
#  NOTE: This is pretty limited since it only has 3 vars.
# $1= if exists, use it's value for http/https (otherwise, use http/https as specified)
# ---------------------------------------------------------------------
doHealthChecks()
{
  local ccd=`WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT}`
  local routes=( "/healthz" $(cat ${ccd}/config.json | jq -r '.. | select( type=="object" ) | select(.healthpath != null) | .healthpath' 2> /dev/null) ) ; Re=$?
  # local routes=( "/healthz" $(cat ${WOV_BASEDIR}/wovtools/cache/clusters/${WOV_CLUSTER}/secrets.json | jq -r '.. | select( type=="object" ) | select(.healthpath != null) | .healthpath' 2> /dev/null) ) ; Re=$?
#  local routes=$(cat ${WOV_BASEDIR}/wovtools/cache/clusters/${WOV_CLUSTER}/secrets.json | jq -r ".health.routes[]" 2> /dev/null ); Re=$?
  if [ $Re != 0 ] || [ "$routes" == "" ]; then printf "ERROR: failed finding .*.healthroutes in secrets.\n"; exit 1; fi

  local retval=0
  local MSG=
  local PROTO=
  local STATUS=
  local CT=
  local SERVER=

  if [[ ${DOECHO} -ge 2 ]]; then echo "Health Routes: ${routes[@]}"; fi

  for r in ${routes[@]}; do
    local URL=`echo "${r}" | sed  \
      -e 's/{WOV_STAGE}/'"${WOV_STAGE}"'/g' \
      -e 's/{WOV_ME}/'"${WOV_ME}"'/g' \
      -e 's/{WOV_PROJECT}/'"${WOV_PROJECT}"'/g'`
    # echo " check route ${r}: ${URL}"
    local domain="$(wov-env --var WOV_www_api_url)"
    local schema="$(wov-env --var WOV_www_api_urlscheme)"
    if [ "${1}" != "" ]; then local schema=$1; fi
    local URL="${schema}://${domain}${URL}"

    local CMD="curl -sS $URL"
    printf "  ... health check: ${URL}'\n"
    #printf "  ... ${URL}\n"
    local R=$(${CMD} 2>&1)
    local RR=$?
    # echo " '$R:$RR' "
    if [ "$RR" != "0" ]; then
      printf "\n\nERROR ($RR) : $R\n"
      retval=1
    else
      # parse http header
      # FROM : https://stackoverflow.com/questions/24943170/how-to-parse-http-headers-using-bash
      shopt -s extglob # Required to trim whitespace; see below
      while IFS=':' read key value; do
        # trim whitespace in "value"
        value=${value##+([[:space:]])}; value=${value%%+([[:space:]])}
        case "$key" in
          Server) SERVER="$value"
            ;;
          Content-Type) CT="$value"
          ;;
          #        HTTP*) read PROTO STATUS MSG <<< "$key$value}"
#        HTTP*) read PROTO STATUS MSG <<< "$key{$value:+:$value}"
          HTTP*) read PROTO STATUS MSG <<< "$key$value"
              ;;
        esac
      done < <(curl -sI ${URL})

      MSG=${MSG/$'\r'/} # remove \r that gets match in sed above

      if [[ ${CT} = application/json* ]]; then
        printf "    - application/json: '${PROTO}' '${STATUS}' "
        echo "$R" | jq -c
      elif [[ ${CT} = text/html* ]]; then
        # curl -sI ${URL}
        # echo "CT: ${CT}"
        # echo "'${STATUS}' '${SERVER}' '${MSG}'"
        if [ "${STATUS}" == "200" ]; then
          printf "    - text/html: ${PROTO} ${STATUS} ${MSG}\n"
        else
          printf "\n*** ERROR: Failed retreiving ${CT}: ${STATUS} ${MSG}\n"
          echo "$R"
          retval=1
        fi
      elif [[ ${CT} = text/plain* ]]; then
        if [ "${STATUS}" == "200" ]; then
          printf "    - text/plain: '${PROTO}' '${STATUS}' '${MSG}'\n"
        else
          printf "\n*** ERROR: Failed retreiving ${CT}: ${STATUS} ${MSG}\n"
          echo "$R"
          retval=1
        fi
      else
        printf "\nRESULT(${RR}): $R\n"
        printf "*** ERROR: Unknown content type : '${CT}'\n"
        curl -sI ${URL}
        retval=1
      fi
    fi
  done
}




# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doListVersions
{  
  l=${WOV_CLUSTER}
  #l=wov-aws-va-dog
  # echo "TOOD: put back to WOV_CLUSTER and not dog"
  #local extra=
  #if [ "${WOV_CUR_PVER}" != "${WOV_PVER}" ]; then
  #  extra="${WOV_PVER}"
  #else
  #  extra="*"
  #fi
  #if [ "${WOV_CUR_SVER}" != "${WOV_SVER}" ]; then
  #  extra="${extra}-${WOV_SVER}"
  #else
  #  extra="${extra}-*"
  #fi
  #echo "extra ${extra}"

  local vers=( $(aws s3 ls ${WOV_ARCHIVEENV}/${ARCHBASE}${l}/${WOV_PROJECT}/${WOV_STAGE}/ | awk '{print $2}') )

  for f in ${vers[@]}; do
    echo ${f%/}
  done

}

if [ ${WOV_DODEFAULTCOMMAND} == 1 ]; then
  # build cluster files too now (for --dev deploy)
  wov-env-build --origin self --context ${WOV_CONTEXT} -q  --cluster
fi

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "--dry-run" ]; then
    shift
    DRYRUN=1

  elif [ "$1" == "--conf-only" ]; then
    shift
    CONFONLY=1

#  elif [ "$1" == "--vh" ]; then
#    shift
#    BUILDVH=1
#  elif [ "$1" == "--VH" ]; then
#    shift
#    BUILDVH=0


  elif [ "$1" == "-lversions" ]; then
    shift
    doListVersions
    exit 0

  elif [ "$1" == "--check-containers" ]; then
    shift
    doCheckContainerImagesExist "${@}"
    Re=$?
    if [ $Re -eq 0 ]; then l_ "  ...success"; fi
    exit ${Re}

  elif [ "$1" == "--dev" ]; then
    shift
    DEPLOYTYPE=dev

  elif [ "$1" == "--stage" ]; then
    shift
    DEPLOYTYPE=stage

  elif [ "$1" == "--pver" ]; then
    shift
    WOV_PVER="$1"
    shift

  elif [ "$1" == "--sver" ]; then
    shift
    WOV_SVER="$1"
    shift

  elif [ "$1" == "--health" ]; then
    shift ; doHealthChecks ; WOV_DODEFAULTCOMMAND=0;
  elif [ "$1" == "--health-tls" ]; then
    shift ; doHealthChecks https ; WOV_DODEFAULTCOMMAND=0;
  elif [ "$1" == "--health-no-tls" ]; then
    shift ; doHealthChecks http ; WOV_DODEFAULTCOMMAND=0;

  elif [ "$1" == "-p" ] || [ "$1" == "--patch" ]; then
    shift
    DEPLOYTYPE=patch
    #doPatchDeployments

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




if [ ${WOV_DODEFAULTCOMMAND} == 1 ]; then

  wov-ns-check
  if [ $? -ne 0 ]; then l_error "  ... exiting"; exit 1; fi

  # ---------------------------------------------------------------------
  # ---------------------------------------------------------------------
  printf "\n"
  figlet wov-deploy
  printf " version: ${WOV_STAGE}_${WOV_CUR_PVER}_${WOV_CUR_SVER}\n"


  if [ "${WOV_STAGE}" == "prod" ]; then
    printf "\n\n**** deploying to production *********************************\n\n"
    printf "   Are you sure? (yes|NO) "
    read A
    if [ "$A" == "yes" ] || [ "$A" == "YES" ]; then
      printf "  ... ok, continuing.\n"
    else
      printf "\n  ... stopping.\n"
      exit 1
    fi
  fi

  if [ "$#" != "0" ]; then
    printf " microservice recipes: ( $* )\n"
  else
    printf " microservice recipes: ALL\n"
  fi

  if [ "${DEPLOYTYPE}" == "" ]; then
    echo ""
    echo "***ERROR deploy needs to specify incremental or full"
    echo "  --dev   [...] : just deploy to the current development environment target (non-production)"
    echo "  --stage [...] : deploy versioned system"
    echo "  --patch [...] : patch deployments to point to the STAGE_dev container (--dev does for its own deployments)"
    echo ""
    exit 1

  elif [ "${DEPLOYTYPE}" == "dev" ]; then
    doDeployDev $*

  elif [ "${DEPLOYTYPE}" == "patch" ]; then
    # Ensure the cluster's environment is up to date and send 
    # wov-env-build -q --cluster ${WOV_CLUSTER}
    doPatchDeployments $*

  elif [ "${DEPLOYTYPE}" == "stage" ]; then
    doDeployStage $*

  fi

fi
