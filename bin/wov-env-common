#!/usr/bin/env bash


# ---------------------------------------------------------------------
# Echo Undefined if ""
# ---------------------------------------------------------------------
function EUndef()
{
  if [ "$1" != "" ]; then
    echo "${1}"
  else
    echo "undefined"
  fi
}


# ---------------------------------------------------------------------
# Sets global RECIPES variable
# ---------------------------------------------------------------------
function fGetMicroserviceRecipes()
{
  RECIPES=( $(cd ${WOV_BASEDIR}/wovtools/msrecipes && find * -maxdepth 0 -type f 2> /dev/null) )

#  echo "${RECIPES[@]}"
}


# ---------------------------------------------------------------------
# from: https://stackoverflow.com/a/8574392/2664702
# Returns: 0 success/found, 1 fail/not found
# ---------------------------------------------------------------------
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# ---------------------------------------------------------------------
# Used to generate the path where CLuster configuration would sit in
# the Archive. 
#  NOTE: The local Cluster Configuration is not generated with this.
#        Use WOV_getClusterConfigDir for that.
#  $1 - Cluster
# ---------------------------------------------------------------------
function WOV_getArchiveRelativePath()
{
  echo "${1}/${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}"
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function exitIfProd()
{
  local R="$(git rev-parse --abbrev-ref HEAD)" ; Re=$?
  if [ "$Re" != "0" ]; then
    >&2 printf "ERROR: exiting because could not determine stage. git failed.\n"
    exit 1
  fi
  if [ "${R}" == "prod" ] || [ "${R}" == "dev" ]; then
    >&2 printf "ERROR: exiting because in stage '${R}'.\n"
    exit 1
  fi
}

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function exitIfProdOrDev()
{
  local R="$(git rev-parse --abbrev-ref HEAD)" ; Re=$?
  if [ "$Re" != "0" ]; then
    >&2 printf "ERROR: exiting because could not determine stage. git failed.\n"
    exit 1
  fi
  if [ "${R}" == "prod" ]; then
    >&2 printf "ERROR: exiting because in stage 'prod'.\n"
    exit 1
  fi
}


# ---------------------------------------------------------------------
# Store the local context cluster (from merged raw file) in $LOCALCONTEXT
# Only checks wovtools/local.json
# ---------------------------------------------------------------------
function retreiveLocalContextCluster()
{ if [ "${LOCALCONTEXT}" == "" ]; then LOCALCONTEXT=`jq -r ".curorigin" "${WOV_CONFIGFILE_MINERAW}"`; fi }



  # [res] [dbserver]
# NOTE: DB is for the RDS databse name, and 1st part of hostname
# return : 0=success,1=fail
function doResName()
{
  local retval=""

  if [ "$2" == "" ]; then
    printf "\n\nERROR: resource name not provided.\n"
    retval=1
  else
    retval=0

    # Subnet for X, zone Y
    if [ "$1" == "SN" ]; then
      # 3rd params sets availability zone
      # if [ "$4" != "" ]; then z=$4; else z=${WOVDB_AVAILZONE}; fi
      echo "${2}-sn-${3}${4}"

    # UNFLAVORED: DB Subnet for X, zone Y : note: this will be in hte default VPC
    elif [ "$1" == "DBSN" ]; then
      echo "${2}-dbsn-${3}${4}"
        # 3rd param sets availability zone

    # UNFLAVORED: DB SubnetGroup for X : note: this will be in hte default VPC
    elif [ "$1" == "DBSNG" ]; then
      echo "${2}-dbsng"

    # UNFLAVORED: DB Security Group for cluster X
    elif [ "$1" == "DBSG" ]; then
      echo "${2}-dbsg"

    # UNFLAVORED: DB Route Table for cluster X
    elif [ "$1" == "DBRT" ]; then
      echo "${2}-dbrt"

    # Security Group for X
    elif [ "$1" == "SG" ]; then
      echo "${2}-SG-${3}"

    # Database Name
    elif [ "$1" == "DB" ]; then
      if [ "$3" == "localhost" ]; then echo "localhost"; 
      elif [ "$3" == "" ]; then echo "undefined"; 
      else echo "${2}-db-${3}" ; fi

    # Peered connection from default VPC to cluster's, for the db
    elif [ "$1" == "PEERCONN" ]; then
      echo "${2}-peerconn"

    elif [ "$1" == "DNS" ]; then
      DBNAME=$(doResName DB ${2} ${3})
      echo $(aws rds describe-db-instances --db-instance-identifier ${DBNAME} --query 'DBInstances[0].Endpoint.Address' --output text)
    else
      printf "\n\nERROR: unknown resource of ${1} to doResName.\n"
      retval=1
    fi
  fi

  return $retval
}
