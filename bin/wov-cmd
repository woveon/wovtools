#!/usr/bin/env bash

DOECHO=1
FOLD=80
DIDLIST=0

cmdargs=( "$@" )
set ""
. wov-build -e
. wov-env
. wov-ns-check
set -- "${cmdargs[@]}"
CMDDIR=${WOV_BASEDIR}/wovtools/cmds


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doList() 
{
  ls ${CMDDIR}
  DIDLIST=1
}

# check that stages align, but project does not need to for commands,
# as this allows running commands in another project withouth changing K8s namespace
# NOTE: while the above is true, it screws up a bunch of other things so ocmmenting out
#if [ "${WOV_GSTAGE}" != "${WOV_KSTAGE}" ]; then
#  printf "\n\nERROR: stages do not match.\n\n"
#  exit 1
#fi



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Runs a command found in the cmds directory. 

These commands have access to wov-env variables.

  -v|-q : verbose/quiet output
  -h    : this help text

EOF
}

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do
#  echo "param '$1'"

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-l" ]; then
    shift
    doList

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




if [ "$DIDLIST" == "0" ]; then

  CMDFILE=${CMDDIR}/$1

  if [ ! -e  ${CMDFILE} ]; then
    printf "\n\nERROR: no cmd named '$1'.\n" 2>&1
    exit 1
  elif [ ! -x ${CMDFILE} ]; then
    printf "\n\nERROR: cmd '$1' not executable (run 'chmod 775 ${CMDFILE}').\n" 2>&1
    exit 1
  else
    shift
    ${CMDFILE} $*
  fi

fi

