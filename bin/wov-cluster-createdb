#!/usr/bin/env bash

DOECHO=1
FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib


function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` WOVDB [options]

This creates a database for a cluster, by selecting the correct 'generator' script to use. 

  WOVDB - name of the WovDB

Generator Types:
----------------
  rds    - AWS's RDS db (requires wov-cluster-configdbnet to be run)
  docker - a locally running db for instance
  helm   - uses a helm chart to create a db in a cluster (persistence through a volume)

This is a work in progress!

EOF
}

. wov-env-ops fDisplayOptions "$@"
if [ ${WOV_DODEFAULTCOMMAND} -eq 0 ]; then exit 0; fi

. wov-db-common
. <(wov-env --provider --envs)

WOVDB=$1 ; if [ "$WOVDB" == "" ]; then fDisplayOptions; l_error "Bad WovDB name of '${WOVDB}'."; exit 1; fi


# --------------------------------------------------------------------- 
function doCreateDB()
{
  doDBConfigReadAndValidate "${WOVDB}"
  l_verbose "WOV_ORIGIN: ${WOV_ORIGIN}"
  l_verbose && doDBConfigDisplay "${WOVDB}"

  if   [ "${DB_generator}" == "helm" ]; then
    wov-cluster-createhelmdb ${WOVDB}
  elif [ "${DB_generator}" == "docker" ]; then
    doCreateDBDocker ${WOVDB}
  elif [ "${DB_generator}" == "rds" ]; then
    wov-cluster-createrdsdb ${WOVDB}
  else
    l_error "Unknown generator (from WOV_${WOVDB}_generator) of : '${DB_generator}'."
    exit 1
  fi
}

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doCreateDBDocker()
{
  local WOVDB=$1
  local R=
  local Re=
  local retval=1

  return $retval
}


doCreateDB
