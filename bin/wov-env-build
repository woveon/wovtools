#!/usr/bin/env bash

FOLD=$(tput cols)
DOECHO=1
HAS_SECRET=0
HAS_CLEAN=0
HAS_BUILDENV=0
#DONSIGNORE=0
DOFORCE=0
LOCALCONTEXT=

CONFEXT=
  # see wov-push-k8s

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fWovEnvBuildDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Builds WovTool configurations for secrets (-s) and clusters (-c) (K8s, ConfigMap and Secrets). By default, clusters are any 'on' secrets mods, the 'localcontext' (in the wovtools/local.json file) and current context from CLUSTER and STAGE settings.


  -q             : quiet
  -v             : verbose
  --clean        : cleans the cache
  -f/--force     : force build of secrets and cluster

  -s/--secrets X : build secrets for cluster X
  -c/--cluster X : build the secret and Kubernetes files for cluster X
  --local        : build local secrets



EOF
}
if [ "$1" == '--help' ] || [ "$1" == '-h' ]; then fWovEnvBuildDisplayOptions; exit 0; fi



# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
buildargs=( "$@" )
set ""
. wov-env
set -- "${buildargs[@]}"


# --------------------------------------------------------------------- 
# vars - NOTE: moved to wov-env
# --------------------------------------------------------------------- 
#WOV_CACHEDIR=${WOV_BASEDIR}/wovtools/cache
#SECRETSFILE_RAW=${WOV_BASEDIR}/wovtools/config.json
#SECRETSFILELOCAL_RAW=${WOV_BASEDIR}/wovtools/local.json
#SECRETSFILEMERGED_RAW=${WOV_CACHEDIR}/.merged.json

#SECRETFILE_BASE=${WOV_CACHEDIR}/current
#SECRETFILELAST_BASE=${WOV_CACHEDIR}/last


# --------------------------------------------------------------------- 
# Ensure the WOV_CACHEDIR exists and is protected and then merge
# files config.json and local.json together in SECRETSFILEMERGED_RAW 
# if they have changed.
# --------------------------------------------------------------------- 
#mkdir -p ${WOV_CACHEDIR}
#chmod -R 700 ${WOV_CACHEDIR}
#if [ ${SECRETSFILE_RAW} -nt ${SECRETSFILEMERGED_RAW} ] || [ ${SECRETSFILELOCAL_RAW} -nt ${SECRETSFILEMERGED_RAW} ]; then
#  echo "... merged file out of date, creating: ${SECRETSFILEMERGED_RAW}"
#  echo "" > ${SECRETSFILEMERGED_RAW}
#  chmod 600 ${SECRETSFILEMERGED_RAW}
#  jq -s ".[0] * .[1]" ${SECRETSFILE_RAW} ${SECRETSFILELOCAL_RAW} >> ${SECRETSFILEMERGED_RAW}
#fi


# --------------------------------------------------------------------- 
# Creates the local context secrets.json file
# --------------------------------------------------------------------- 
function fBuildLocalSecrets()
{
  retreiveLocalContextCluster
  fBuildSecrets $LOCALCONTEXT
}


# --------------------------------------------------------------------- 
# Store the local context cluster (from merged raw file) in $LOCALCONTEXT
# --------------------------------------------------------------------- 
function retreiveLocalContextCluster()
{ if [ "${LOCALCONTEXT}" == "" ]; then LOCALCONTEXT=`jq -r ".localcontext" ${WOV_FILE_SECRETSMERGED}`; fi }


# --------------------------------------------------------------------- 
# Generates the secrets for a cluster
#  wovtools/cache/secrets/current_X.json
# --------------------------------------------------------------------- 
function fBuildSecrets()
{
  # if verbose, keep intermediate files for debugging
  local MV=mv
  if [ "$DOECHO" == "2" ]; then MV=cp; fi

  local CLUSTER=$1
  if [ "$CLUSTER" == "" ]; then printf "\n\nERROR: no CLUSTER defined for building secret.\n\n"; exit 1; fi

  local CLUSTER_DIR="${WOV_CACHEDIR}/clusters/${CLUSTER}"
  mkdir -p ${CLUSTER_DIR}
  chmod -R 700 ${CLUSTER_DIR}

  local SECRETFILE="${CLUSTER_DIR}/secrets.json"
  local SECRETFILELAST="${CLUSTER_DIR}/.last.json"

  if [ "$DOECHO" == "2" ]; then echo "CLUSTER=${CLUSTER}"; fi
  if [ "$DOECHO" == "2" ]; then echo "SECRETFILE=${SECRETFILE}"; fi

  # Read the source secrets files from WOV_FILE_SECRETSMERGED , to 
  # generate the SECRETFILE for the CLUSTER.
  # ---------------------------------------------------------------------
  local SRCSECRETFILES=( $(jq -r ".secrets.${WOV_STAGE}[] " ${WOV_FILE_SECRETSMERGED} 2> /dev/null) )
  if [ "$?" != "0" ] || [ "${#SRCSECRETFILES}" == "0" ]; then
    printf "\n\nERROR: either no entry or no files for stage '${WOV_STAGE}' in config.json file '.secrets'.\n"
    printf "  - You probably just need to create an entry, similar to the other stages.\n\n"
    exit 1
  fi


  # ---------------------------------------------------------------------
  # Build temp secret file
  # ---------------------------------------------------------------------
  echo "" > ${SECRETFILE}_
  chmod 600 ${SECRETFILE}_

  # start with abbreviated versions of "basic config"
  cat >> ${SECRETFILE}_ <<EOF
{
  "CONTEXT"  : "${WOV_CONTEXT}",
  "CLUSTER"  : "${WOV_CLUSTER}",
  "CLTYPE"   : "${WOV_CLTYPE}",
  "PROVIDER" : "${WOV_PROVIDER}",
  "REGION"   : "${WOV_REGION}",
  "FLAVOR"   : "${WOV_FLAVOR}",
  "NS"       : "${WOV_NS}",
  "PROJECT"  : "${WOV_PROJECT}",
  "STAGE"    : "${WOV_STAGE}",
  "ME"       : "${WOV_ME}",

  "PROJECT"            : "${WOV_PROJECT}",
  "PROJECTTYPE"        : "${WOV_PROJECTTYPE}",
  "PROJECTTITLE"       : "${WOV_PROJECTTITLE}",
  "PROJECTDESCRIPTION" : "${WOV_PROJECTDESCRIPTION}",

  "ARCHIVEREPOSITORY" : "${WOV_ARCHIVEREPOSITORY}",
  "ARCHIVEENV"        : "${WOV_ARCHIVEENV}",

  "USERNAME"  : "${WOV_USERNAME}",
  "USEREMAIL" : "${WOV_USEREMAIL}",

  "PVER" : "${WOV_PVER}",
  "SVER" : "${WOV_SVER}",

  "//LBL"   : "Chose stage then pver so user doing a lot of commits won't bury production images when listing.",
  "LBL_SRC" : "${WOV_STAGE}_${WOV_PVER}",
  "LBL_ENV" : "${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}"
}
EOF

  # STEP 1: Check for source file existence
  for sf in ${SRCSECRETFILES[*]}; do
    if [ ! -e ${WOV_BASEDIR}/wovtools/secrets/$sf ]; then
      printf "\n\nERROR: file for secret build does not exist: 'wovtools/secrets/$sf'.\n"
      exit 1
    fi
  done


  # STEP 2: merge src secret files files in order
  for sf in ${SRCSECRETFILES[*]}; do
    if [ "$DOECHO" == "2" ]; then echo "  ... adding secret file $sf"; fi
    echo "" > ${SECRETFILE}.2
    chmod 600 ${SECRETFILE}.2
    jq -s ".[0] * .[1]" ${SECRETFILE}_ ${WOV_BASEDIR}/wovtools/secrets/$sf >> ${SECRETFILE}.2
    ${MV} ${SECRETFILE}.2 ${SECRETFILE}_
  done


  # TODO: move this to -s switch, as it is how we find mods that are on
#  # - get mods that are 'on'
#  SMODS=$(jq -r '.stagemods[] | select(.status == "on") | .["name"]' ${WOV_FILE_SECRETSMERGED} )
#  #echo "SMODS: ${SMODS}"
#  # for each mod
#  for m in ${SMODS[*]}; do
    #echo "m: $m"
#  done


  # STEP 3: CLUSTER Select
  # - concat child attributes into parent that are prefixed by CLUSTERx, where x is your CLUSTER
  echo "" > ${SECRETFILE}.3
  chmod 600 ${SECRETFILE}.3
  if [[ $DOECHO -ge 1 ]]; then   echo "  ... using cluster     : ${WOV_CLUSTER}"; fi
  wov_stage-select ${SECRETFILE}_ CLUSTER${WOV_CLUSTER} >> ${SECRETFILE}.3
  ${MV} ${SECRETFILE}.3  ${SECRETFILE}_


  # STEP 4: STAGE Select
  # - concat child attributes into parent that are prefixed by STAGEx, where x is your stage
  # cat ${SECRETFILE}
  echo "" > ${SECRETFILE}.4
  chmod 600 ${SECRETFILE}.4
  if [[ $DOECHO -ge 1 ]]; then   echo "  ... using stage       : ${WOV_STAGE}"; fi
  wov_stage-select ${SECRETFILE}_ STAGE${WOV_STAGE} >> ${SECRETFILE}.4
  ${MV} ${SECRETFILE}.4  ${SECRETFILE}_


  # STEP 5: Secrets Mods for a cluster (from wovtools/config.json|local.json), which applies modifications for a cluster to MERGED_RAW data
  #       : NOTE: also any STAGEME is converted to the WOV_ME variable stage
  # get routes
  local clusterentry=`jq -r '.secretsmods.'"${CLUSTER}"  ${WOV_FILE_SECRETSMERGED} 2> /dev/null` 
  if [ "${clusterentry}" != "null" ]; then
    if [[ $DOECHO -ge 1 ]]; then echo "  ... using secretsmods : ${CLUSTER}"; fi

    local rts=( $(jq -r '.secretsmods.'"${CLUSTER}"' | .routes[] | "\(.[0]) \(.[1])"' ${WOV_FILE_SECRETSMERGED} 2> /dev/null ) )
    #echo "rts: ${#rts[@]} ${rts[@]}"

    # NOTE: doing this in order of entries
    while [[ "${#rts[@]}" != "0" ]]; do
      rtfrom=${rts[0]}
      rtto=${rts[1]}
      rts=( "${rts[@]:2}" ) # shift twice
      #echo "rt: ${rtfrom} -> ${rtto}"
      # rewrite any ME->STAGE in route
      rtto=$(echo $rtto | sed "s/ME/${WOV_STAGE}/")
      #echo "rt: ${rtfrom} -> ${rtto}"

      # rewrite routes in SECRETFILE, remove original graft, then move back to SECREFILE for next mod
      echo "" > ${SECRETFILE}.5
      chmod 600 ${SECRETFILE}.5
      jq '.'"${rtto}"' += .'"${rtfrom}"'' ${SECRETFILE}_ >> ${SECRETFILE}.5
      # TODO: remove original graft

      # mv file
      ${MV} ${SECRETFILE}.5 ${SECRETFILE}_
    done


    # use SECRETFILE if no SECRETFILE or differs from SECRETFILE_. otherwise just delete.
    if [ ! -e ${SECRETFILE} ]; then mv ${SECRETFILE}_ ${SECRETFILE};
    else 
      diff ${SECRETFILE}_ ${SECRETFILE} > /dev/null
      if [ "$?" != "0" ]; then mv ${SECRETFILE}_ ${SECRETFILE}; 
      else rm ${SECRETFILE}_; fi
    fi

  else
    if [ "$DOECHO" == "2" ]; then echo "  ... no secretsmods entry for cluster: ${CLUSTER}"; fi
  fi

  # mark as secret being updated
  HAS_SECRET=1


  # Update local context if this was it
  retreiveLocalContextCluster
  if [ "${LOCALCONTEXT}" == "${CLUSTER}" ]; then
    if [ "$DOECHO" == "2" ]; then echo "  ... updating local context"; fi
    mkdir -p     "${WOV_CACHEDIR}/clusters/local"
    chmod -R 700 "${WOV_CACHEDIR}/clusters/local"
    cp "${WOV_CACHEDIR}/clusters/${LOCALCONTEXT}/secrets.json" "${WOV_CACHEDIR}/clusters/local/secrets.json" 
  fi

  # Is secret different from last run?
  local SECRETDIFF=1
  if [ -e "${SECRETFILELAST}" ]; then
    if [ "`diff ${SECRETFILE} ${SECRETFILELAST} && echo $?`" == "0" ]; then
      SECRETDIFF=0
        # --- no diff so turn this off
    fi
  fi

  if [ "$DOECHO" == "2" ] && [[ $SECRETDIFF -gt 0 ]]; then
    echo "... (re)build secrets for '${CLUSTER}'."
  fi

  # Update secret since it was used
  cp ${SECRETFILE} ${SECRETFILELAST}

  return ${SECRETDIFF}
}



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fCleanCacheAll() 
{
  HAS_CLEAN=1
  _fCleanCache "clusters" "secrets"
}
function _fCleanCache() 
{
  BUILDDIRS=( "$*" )
  for f in ${BUILDDIRS[@]}; do
    DEST=${WOV_BASEDIR}/wovtools/cache/$f
    if [ $DOECHO -ge 2 ]; then echo "  ... clean cache in dir '${DEST}'."; fi
    rm -fR ${DEST}/* || true
  done
}


# ---------------------------------------------------------------------
# build all .wov files in a directory
#   from ${WOV_BASEDIR}/wovtools/{ks8|cm|se}
#     to ${WOV_BASEDIR}/wovtools/cache/clusters/$1/X
#  $2 - 1 if secrets have changed
# ---------------------------------------------------------------------
fBuildClusterDir()
{
  # printf "\nfBuildClusterDir\n\n\n"
  local CLUSTER=$1
  if [ "$CLUSTER" == "" ]; then printf "\n\nERROR: no CLUSTER defined for building secret.\n\n"; exit 1; fi
  local CLUSTER_DIR="${WOV_CACHEDIR}/clusters/${1}"
  local SECRETFILE="${CLUSTER_DIR}/secrets.json"
  local SECRETFILELAST="${CLUSTER_DIR}/.last.json"


  # ---------------------------------------------------------------------
  # Clear out old files
  # ---------------------------------------------------------------------
  #_fCleanCache "clusters/${CLUSTER}/k8s" "clusters/${CLUSTER}/se" "clusters/${CLUSTER}/cm"


  # ---------------------------------------------------------------------
  # K8s files, compile
  # ---------------------------------------------------------------------
  mkdir -p  "${CLUSTER_DIR}/k8s"
  chmod 700 "${CLUSTER_DIR}/k8s"

  # Find k8s files to compile
  WOVFILES=$(cd ${WOV_BASEDIR}/wovtools/k8s; ls *.wov 2> /dev/null)
  if [ "${WOVFILES}" == "" ]; then echo "  ... no files found in wovtools/k8s/*.wov."; fi

  # Compile them if needed
  for f in ${WOVFILES}; do

    # file versions 
    SRC=${WOV_BASEDIR}/wovtools/k8s/${f}
    DEST=${CLUSTER_DIR}/k8s/${f%.wov}

    # check if we need to compile
    # ------------------------
    local dowecompile=${DOFORCE}
    if [ "$2" == "1" ]; then dowecompile=1;                         # secrets changed?
    elif [ ! -e "${DEST}" ]; then dowecompile=1;                     # no dest file
    elif [ "${SRC}" -nt "${DEST}" ]; then dowecompile=1;             # src has changed after dest
    # elif [ "${SECRETFILE}" -nt "${DEST}" ]; then dowecompile=1;    # secrets have changed after dest
    fi

    # compile dir if needed
    if [[ ${dowecompile} -eq 1 ]]; then
      if [ "$DOECHO" == "2" ] || [ "$DOECHO" == "2" ]; then echo "  ... build ${SRC}"; fi
      #echo " --- `basename ${DEST}` needs to be built"
#      echo "SHOULD CALL: wov-compile ${SECRETFILE} ${SRC} > ${DEST}"
      wov-compile ${SECRETFILE} ${SRC} > ${DEST}
    else
      if [ "$DOECHO" == "2" ]; then echo "  ... skipping ${SRC}"; fi
    fi

  done


  # ---------------------------------------------------------------------
  # cm/se : build K8s ConfigMap and Secrets
  # ---------------------------------------------------------------------
  # Each container recipe is for a microservice
  local RECIPES=( )   # here, specify 
  if [ "${#RECIPES[@]}" == "0" ]; then
    RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers && find * -maxdepth 0 -type f 2> /dev/null)
  fi
  # echo "Container Recipes: ${RECIPES}"

  # ensure directories
  mkdir -p  "${CLUSTER_DIR}/cm"
  mkdir -p  "${CLUSTER_DIR}/se"
  chmod 700 "${CLUSTER_DIR}/cm"
  chmod 700 "${CLUSTER_DIR}/se"

  local hasbuiltbasecm=0
  local hasbuiltbasese=0
  # --- ex. {PROJECT}{CONTAINER} is normal, but base would be {PROJECT} ex. plem vs plemov

  # Build ConfigMap and Secrets if needed
  for f in ${RECIPES}; do

    local CONTAINERNAME=$f
    local MICROSERVICE=${WOV_PROJECT}${CONTAINERNAME}
    if [ $DOECHO -ge 2 ]; then echo "... build ConfigMap and Secret for '${MICROSERVICE}${CONFEXT}'."; fi

    # Create CM file to read in
    local CMFILE1=${CLUSTER_DIR}/cm/${MICROSERVICE}${CONFEXT}
    local CMFILE2=${CLUSTER_DIR}/cm/${WOV_PROJECT}${CONFEXT}

    # Check if we need to compile K8s ConfigMap
    local dowecompile=${DOFORCE}
    if [ "$2" == "1" ]; then dowecompile=1;                                  # secrets changed?
    elif [ ! -e "${CMFILE1}" ] && [ ! -e "${CMFILE2}" ] ; then dowecompile=1; # no CMFILE file
    elif [ -e "${CMFILE1}" ] && [ ${CLUSTER_DIR}/secrets.json -nt "${CMFILE1}" ]; then dowecompile=1; # existing CMFILE1 and old
    elif [ -e "${CMFILE2}" ] && [ ${CLUSTER_DIR}/secrets.json -nt "${CMFILE2}" ]; then dowecompile=1; # existing CMFILE2 and old
    fi

    # Compile K8s ConfigMap file
    if [ "${dowecompile}" == "1" ]; then 
      local CMFILE="${CMFILE1}"
      rm -f ${CMFILE} || true
      touch ${CMFILE}
      chmod 600 ${CMFILE}
      wov-env --cluster ${CLUSTER} --cm ${MICROSERVICE} >> ${CMFILE} 2>&1
      if [ "$?" != "0" ]; then
        rm ${CMFILE}
        CMFILE="${CMFILE2}"
        if [ "$hasbuiltbasecm" == "0" ]; then
          if [[ $DOECHO -ge 2 ]]; then echo "  ... using config for ${WOV_PROJECT}, instead of ${MICROSERVICE}"; fi
          wov-env --cluster ${CLUSTER} --cm ${WOV_PROJECT} >> ${CMFILE}
          if [ "$?" != "0" ]; then exit 1; fi
          hasbuiltbasecm=1
          if [ "${DOECHO}" == "2" ]; then echo "  ... compiled ${CMFILE}."; fi
        fi
      else
        if [ "${DOECHO}" == "2" ]; then echo "  ... compiled ${CMFILE}."; fi
      fi
    else
      if [ "${DOECHO}" == "2" ]; then echo "  ... skipped K8s ConfigMap file."; fi
    fi

    # Create SE file to read in
    local SEFILE1=${CLUSTER_DIR}/se/${MICROSERVICE}${CONFEXT}
    local SEFILE2=${CLUSTER_DIR}/se/${WOV_PROJECT}${CONFEXT}

    # Check if we need to compile K8s Secrets
    local dowecompile=${DOFORCE}
    if [ "$2" == "1" ]; then dowecompile=1;                                  # secrets changed?
    elif [ ! -e "${SEFILE1}" ] && [ ! -e "${SEFILE2}" ] ; then dowecompile=1; # no SEFILE file
    fi

    # Compile K8s Secrets file
    if [ "${dowecompile}" == "1" ]; then
      local SEFILE="${SEFILE1}"
      rm -f ${SEFILE} || true
      touch ${SEFILE}
      chmod 600 ${SEFILE}
      wov-env --cluster ${CLUSTER} --se ${MICROSERVICE} >> ${SEFILE} 2>&1
      if [ "$?" != "0" ]; then
        rm ${SEFILE}
        SEFILE="${SEFILE2}"
        if [ "$hasbuiltbasese" == "0" ]; then
          wov-env --cluster ${CLUSTER} --se ${WOV_PROJECT} >> ${SEFILE}
          if [ "$?" != "0" ]; then exit 1; fi
          hasbuiltbasese=1
          if [ "${DOECHO}" == "2" ]; then echo "  ... compiled ${SEFILE}."; fi
        fi
      else
        if [ "${DOECHO}" == "2" ]; then echo "  ... compiled ${SEFILE}."; fi
      fi
    else
      if [ "${DOECHO}" == "2" ]; then echo "  ... skipped K8s Secret file."; fi
    fi

  done


  # mark as done
  HAS_BUILDENV=1

}



# --------------------------------------------------------------------- 
# Handle Params
# --------------------------------------------------------------------- 
while [[ $1 =~ ^- ]]; do
#  echo "param '$1'"

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

#  elif [ "$1" == "-i" ]; then
#    shift
#    DONSIGNORE=1

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "--local" ]; then
    shift
    fBuildLocalSecrets

  elif [ "$1" == "-s" ] || [ "$1" == "--secrets" ]; then
    shift
    fBuildSecrets $1
    shift

  elif [ "$1" == "-c" ] || [ "$1" == "--cluster" ]; then
    shift
    fBuildSecrets $1
    SECRETDIFF=$?
    fBuildClusterDir $1 ${SECRETDIFF}
    shift

#  elif [ "$1" == "-s" ] || [ "$1" == "--secrets" ]; then
#    echo "IMPLEMENT THIS: do multiple calls to fBuildSecrets X and fBuildClusterDir X"
#    exit 1
#    shift
#    if [ "$DONSIGNORE" == "0" ]; then
#      buildargs=( "$@" )
#      set ""
#      . wov-ns-check
#      set -- "${buildargs[@]}"
#    fi
#    fBuildSecrets


#  elif [ "$1" == "-k" ]; then
#    echo "IMPLEMENT THIS: do multiple calls to fBuildSecrets X and fBuildClusterDir X"
#    exit 1
#    shift
#    fBuildClusterDir $1
#    shift

  elif [ "$1" == "--clean" ]; then
    shift
    fCleanCacheAll

  elif [ "$1" == "-f" ] || [ "$1" == "--force" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fWovEnvBuildDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fWovEnvBuildDisplayOptions
    exit 1
  fi
done


if [[ ${HAS_SECRET} -eq 0 ]] && [[ ${HAS_BUILDENV} -eq 0 ]] && [[ ${HAS_CLEAN} -eq 0 ]]; then
  echo
  echo "ERROR: no command passed."
  echo
  fWovEnvBuildDisplayOptions
  exit 1
fi
