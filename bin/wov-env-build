#!/usr/bin/env bash

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fWovEnvBuildDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Builds WovTool configurations for secrets (-s) and clusters (-c) (K8s, ConfigMap and Secrets). By default, clusters are any 'on' secrets mods, the 'curorigin' (in the wovtools/myconfig.json file) and current context from CLUSTER and STAGE settings.


  Leading Commands - Must be placed first
  --context X : set context (ignores K8s context) (TODO FIX: redundant with secrets and cluster X)
  DEPRECATED -n/--namespace : override namespace
  -h/--help      : list this help


  Modifying Commands
  -q             : quiet
  -v             : verbose (and leaves intermediate files in cache/cluster )
  --clean        : cleans the cache
  -f/--force     : force build of secrets and cluster


  Commands
  --config  : build cluster configuration from context
  --cluster : build the K8s files (deployment, secrets, configmap, etc) with the config



EOF
}


. wov-env-ops fWovEnvBuildDisplayOptions "$@"

HAS_SECRET=0
HAS_CLEAN=0
HAS_BUILDENV=0
#DONSIGNORE=0
DOFORCE=0
#LOCALCONTEXT=
#GLOBALCONTEXT=
#FORCEDNS=
  # -- Can force this to be a namespace instead of from git/K8s

CONFEXT=
  # see wov-push-k8s




# --------------------------------------------------------------------- 
# Leading commands:
# --------------------------------------------------------------------- 


#LEADINGCOMMANDS=1
#while [ "$LEADINGCOMMANDS" == "1" ]; do
#  if 
#  else
#    LEADINGCOMMANDS=0
#  fi
#done


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
envbuildargs=( "$@" )
set ""
# . wov-env-loader --context "${GLOBALCONTEXT}"
. wov-env-common
. wov-push-common
. wov-db-common
set -- "${envbuildargs[@]}"

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 


#echo "wov-env-build currently ${WOV_CONTEXT}"


# --------------------------------------------------------------------- 
# Namespace - global, forced or normal (from git/K8s)
# --------------------------------------------------------------------- 

# Global namespace
#echo "Checkign Vars"
#echo "WOV_PROJECT  ${WOV_PROJECT}"
#echo "WOV_KPROJECT ${WOV_KPROJECT}"
#echo "WOV_WPROJECT ${WOV_WPROJECT}"
#echo "WOV_STAGE    ${WOV_STAGE}"
#echo "WOV_KSTAGE   ${WOV_KSTAGE}"
#echo "WOV_GSTAGE   ${WOV_GSTAGE}"

# Check Namespace agreement from K8s/Git if not manually setting it
#if [ "$GLOBALCONTEXT" == "" ]; then
#  wov-ns-check
#  if [ "$?" != "0" ]; then
#    if [ "${WOV_KPROJECT}" != "${WOV_WPROJECT}" ]; then
#      printf "ERROR: WOV_KPROJECT/WOV_WPROJECT differences need to be fixed.\n\n"
#      exit 1
#    elif [ "${WOV_KSTAGE}" != "${WOV_GSTAGE}" ]; then
#      printf "WARNING: WOV_KSTAGE/WOV_GSTAGE differ. Assuming Kubernetes ${WOV_KSTAGE} and continuing (Allows building when git branches differ).\n\n"
#    else
#      printf "ERROR: Unknown namespace differences. Needs to be fixed.\n\n"
#      printf "WOV_PROJECT/KPROJECT/WPROJECT: '${WOV_PROJECT}' '${WOV_KPROJECT}' '${WOV_WPROJECT}'\n"
#      printf "WOV_STAGE/KSTAGE/GSTAGE      : '${WOV_STAGE}' '${WOV_KSTAGE}' '${WOV_GSTAGE}'\n"
#      exit 1
#    fi
#  fi
#fi


# --------------------------------------------------------------------- 
# Ensure the WOV_CACHEDIR exists and is protected and then merge
# files config.json and myconfig.json together in SECRETSFILEMERGED_RAW 
# if they have changed.
# --------------------------------------------------------------------- 
#mkdir -p ${WOV_CACHEDIR}
#chmod -R 700 ${WOV_CACHEDIR}
#if [ ${SECRETSFILE_RAW} -nt ${SECRETSFILEMERGED_RAW} ] || [ ${SECRETSFILELOCAL_RAW} -nt ${SECRETSFILEMERGED_RAW} ]; then
#  echo "... merged file out of date, creating: ${SECRETSFILEMERGED_RAW}"
#  echo "" > ${SECRETSFILEMERGED_RAW}
#  chmod 600 ${SECRETSFILEMERGED_RAW}
#  jq -s ".[0] * .[1]" ${SECRETSFILE_RAW} ${SECRETSFILELOCAL_RAW} >> ${SECRETSFILEMERGED_RAW}
#fi



# --------------------------------------------------------------------- 
# Generates the secrets for a cluster
#  wovtools/cache/secrets/current_X.json
# --------------------------------------------------------------------- 
function fBuildConfig()
{
  # if verbose, keep intermediate files for debugging
  local MV=mv
  local needles=( "CLUSTER" "STAGE" "ORIGIN" )
  if [ "$DOECHO" == "2" ]; then MV=cp; fi

  mkdir -p ${WOV_CLUSTERDIR}
  chmod -R 700 ${WOV_CLUSTERDIR}

  local SECRETFILELAST="${WOV_CLUSTERDIR}/.config.json"
  l_ "  ... using origin      : ${WOV_ORIGIN}"

  l_verbose "  CLUSTER=${WOV_CLUSTER}"
  l_verbose "  SECRETFILE=${WOV_SECRETFILE}"

  # Read the source secrets files from WOV_CONFIGFILE_MERGED , to 
  # generate the WOV_SECRETFILE for the CLUSTER.
  # ---------------------------------------------------------------------
  local SRCSECRETFILES=( $(jq -r ".secrets.${WOV_STAGE}[] " ${WOV_CONFIGFILE_MERGED} 2> /dev/null) )
  if [ "$?" != "0" ] || [ "${#SRCSECRETFILES}" == "0" ]; then
    printf "\n\nERROR: either no entry or no files for stage '${WOV_STAGE}' in ${WOV_CONFIGFILE_MAIN} file '.secrets'.\n"
    printf "  - You probably just need to create an entry in wovtools/config|local.json, similar to the other stages.\n\n"
    exit 1
  fi

  # Find the databases as array, then flatten for WOV_DATABASES
  DATABASES=( $(doFindDatabases) )
  WOV_DATABASES="${DATABASES[@]}"


  # ---------------------------------------------------------------------
  # Build temp secret file
  # ---------------------------------------------------------------------
  echo "" > ${WOV_SECRETFILE}_
  chmod 600 ${WOV_SECRETFILE}_

  # start with abbreviated versions of "basic config"
  cat >> ${WOV_SECRETFILE}_ <<EOF
{
  "CONTEXT"  : "${WOV_CONTEXT}",
  "CLUSTER"  : "${WOV_CLUSTER}",
  "CLTYPE"   : "${WOV_CLTYPE}",
  "PROVIDER" : "${WOV_PROVIDER}",
  "REGION"   : "${WOV_REGION}",
  "FLAVOR"   : "${WOV_FLAVOR}",
  "NS"       : "${WOV_NS}",
  "PROJECT"  : "${WOV_PROJECT}",
  "STAGE"    : "${WOV_STAGE}",
  "ME"       : "${WOV_ME}",

  "PROJECT"            : "${WOV_PROJECT}",
  "PROJECTTYPE"        : "${WOV_PROJECTTYPE}",
  "PROJECTTITLE"       : "${WOV_PROJECTTITLE}",
  "PROJECTDESCRIPTION" : "${WOV_PROJECTDESCRIPTION}",
  "DATABASES"          : "${WOV_DATABASES}",

  "ARCHIVEREPOSITORY" : "${WOV_ARCHIVEREPOSITORY}",
  "ARCHIVEENV"        : "${WOV_ARCHIVEENV}",

  "USERNAME"  : "${WOV_USERNAME}",
  "USEREMAIL" : "${WOV_USEREMAIL}",

  "PVER" : "${WOV_PVER}",
  "SVER" : "${WOV_SVER}",

  "//LBL"   : "Chose stage then pver so user doing a lot of commits won't bury production images when listing.",
  "LBL_SRC" : "${WOV_STAGE}_${WOV_PVER}",
  "LBL_ENV" : "${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}"
}
EOF

  # STEP 1: Check for source file existence
  for sf in ${SRCSECRETFILES[*]}; do
    # echo "looking for ${WOV_BASEDIR}/wovtools/secrets/$sf"
    if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/$sf" ]; then
      printf "ERROR: file for secret build does not exist: 'wovtools/secrets/$sf'.\n"
      printf "  : Your wovtools/{config|local}.json has entries for files @: '.secrets.${WOV_STAGE}'.\n"
      exit 1
    fi
  done



  # STEP 2: merge src secret files files in order
  for sf in ${SRCSECRETFILES[*]}; do
    if [ "$DOECHO" == "2" ]; then echo "  ... adding secret file $sf"; fi
    echo "" > ${WOV_SECRETFILE}.2
    chmod 600 ${WOV_SECRETFILE}.2
    jq -s ".[0] * .[1]" ${WOV_SECRETFILE}_ ${WOV_BASEDIR}/wovtools/secrets/$sf >> ${WOV_SECRETFILE}.2
    ${MV} ${WOV_SECRETFILE}.2 ${WOV_SECRETFILE}_
  done


  # STEP 3: Needle in Haystack Selection
  # - concat child attributes into parent that are prefixed by NEEDLEx, where x is your CLUSTER, STAGE or ORIGIN
  for needle in "${needles[@]}"; do
    local fullneedle=WOV_${needle}
    fullneedle=${!fullneedle}
    echo "" > ${WOV_SECRETFILE}.3${needle}
    chmod 600 ${WOV_SECRETFILE}.3${needle}
    l_verbose "  ... replace needle    : ${fullneedle} => ${needle}"
    wov_stage-select ${WOV_SECRETFILE}_ ${needle} ${fullneedle} >> ${WOV_SECRETFILE}.3${needle}
    if [ "$?" != "0" ]; then exit 1; fi
    ${MV} ${WOV_SECRETFILE}.3${needle}  ${WOV_SECRETFILE}_
  done


#  # STEP 4: STAGE Select
#  # - concat child attributes into parent that are prefixed by STAGEx, where x is your stage
#  # cat ${WOV_SECRETFILE}
#  echo "" > ${WOV_SECRETFILE}.4
#  chmod 600 ${WOV_SECRETFILE}.4
#  l_ "  ... using stage       : ${WOV_STAGE}"
#  wov_stage-select ${WOV_SECRETFILE}_ STAGE ${WOV_STAGE} >> ${WOV_SECRETFILE}.4
#  if [ "$?" != "0" ]; then exit 1; fi
#  ${MV} ${WOV_SECRETFILE}.4  ${WOV_SECRETFILE}_


  # STEP 5: Secrets Mods for a cluster (from wovtools/config.json|myconfig.json), which applies modifications for a cluster to MERGED_RAW data
  #       : NOTE: also any STAGEME is converted to the WOV_ME variable stage
  # get routes
  local clusterentry=`jq -r '.originmods.'"${WOV_CLUSTER}"  ${WOV_CONFIGFILE_MERGED} 2> /dev/null` 
  if [ "${clusterentry}" != "null" ]; then
    if [[ $DOECHO -ge 1 ]]; then echo "  ... using originmods  : ${WOV_CLUSTER}"; fi

    local rts=( $(jq -r '.originmods.'"${WOV_ORIGIN}"' | .routes[] | "\(.[0]) \(.[1])"' ${WOV_CONFIGFILE_MERGED} 2> /dev/null ) )
    #l_verbose "rts: ${#rts[@]} ${rts[@]}"

    # NOTE: doing this in order of entries
    while [[ "${#rts[@]}" != "0" ]]; do
      rtfrom=${rts[0]}
      rtto=${rts[1]}
      rts=( "${rts[@]:2}" ) # shift twice
      #echo "rt: ${rtfrom} -> ${rtto}"
      # rewrite any ME->STAGE in route
      rtto=$(echo $rtto | sed "s/ME/${WOV_STAGE}/")
      l_verbose "  ... stage 5: ${rtfrom} -> ${rtto}"

      # rewrite routes in WOV_SECRETFILE, remove original graft, then move back to SECREFILE for next mod
      echo "" > ${WOV_SECRETFILE}.5
      chmod 600 ${WOV_SECRETFILE}.5
      jq '.'"${rtto}"' += .'"${rtfrom}"'' ${WOV_SECRETFILE}_ >> ${WOV_SECRETFILE}.5
      # TODO: remove original graft

      # mv file
      ${MV} ${WOV_SECRETFILE}.5 ${WOV_SECRETFILE}_
    done


    # use WOV_SECRETFILE if no WOV_SECRETFILE or differs from WOV_SECRETFILE_. otherwise just delete.
#    if [ ! -f ${WOV_SECRETFILE} ]; then mv ${WOV_SECRETFILE}_ ${WOV_SECRETFILE};
#    else 
#      diff ${WOV_SECRETFILE}_ ${WOV_SECRETFILE} > /dev/null
#      if [ "$?" != "0" ]; then mv ${WOV_SECRETFILE}_ ${WOV_SECRETFILE}; 
#      else rm ${WOV_SECRETFILE}_; fi
#    fi

  else
    if [ "$DOECHO" == "2" ]; then echo "  ... no originmods entry for cluster: ${WOV_CLUSTER}"; fi
#    ${MV} ${WOV_SECRETFILE}_  ${WOV_SECRETFILE}
  fi

#  # STEP 6,6a&7: Clean CLUSTER, STAGE and ORIGIN from the raw code. Have to do it after the mods above since those
#  #           can rewrite CLUSTER over STAGE.
#  echo "" > ${WOV_SECRETFILE}.6a
#  chmod 600 ${WOV_SECRETFILE}.6a
#  wov_stage-select ${WOV_SECRETFILE}_ ORIGIN ${WOV_ORIGIN} clean >> ${WOV_SECRETFILE}.6a
#  #wov_stage-select ${WOV_SECRETFILE}_ CLUSTER ${WOV_CLUSTER} clean >> ${WOV_SECRETFILE}.6
#  if [ "$?" != "0" ]; then exit 1; fi
#  ${MV} ${WOV_SECRETFILE}.6a  ${WOV_SECRETFILE}_
#
#  echo "" > ${WOV_SECRETFILE}.7
#  chmod 600 ${WOV_SECRETFILE}.7
#  wov_stage-select ${WOV_SECRETFILE}_ STAGE ${WOV_STAGE} clean >> ${WOV_SECRETFILE}.7
#  ${MV} ${WOV_SECRETFILE}.7  ${WOV_SECRETFILE}_

  # STEP 6/7: Clean CLUSTER, STAGE and ORIGIN from the raw code. Have to do it after the mods above since those
  #           can rewrite CLUSTER over STAGE.
  for needle in "${needles[@]}"; do
    local fullneedle=WOV_${needle}
    fullneedle=${!fullneedle}
    echo "" > ${WOV_SECRETFILE}.6${needle}
    chmod 600 ${WOV_SECRETFILE}.6${needle}
    l_verbose "  ... clean needle      : ${fullneedle} => ${needle}"
    wov_stage-select ${WOV_SECRETFILE}_ ${needle} ${fullneedle} clean >> ${WOV_SECRETFILE}.6${needle}
    if [ "$?" != "0" ]; then exit 1; fi
    ${MV} ${WOV_SECRETFILE}.6${needle}  ${WOV_SECRETFILE}_
  done

  # Specific post-processing of variables
  fPostBuildSecretsJSON 8 ${WOV_SECRETFILE}

  # FINAL: move it back into place
  ${MV} ${WOV_SECRETFILE}_  ${WOV_SECRETFILE}

  # mark as secret being updated
  HAS_SECRET=1


  # echo "'${WOV_SECRETFILE}' '${SECRETFILELAST}'"

  # Is secret different from last run?
  local SECRETDIFF=1
  if [ -e "${SECRETFILELAST}" ]; then
    if [ "`diff ${WOV_SECRETFILE} ${SECRETFILELAST} && echo $?`" == "0" ]; then
      SECRETDIFF=0
        # --- no diff so turn this off
    fi
  fi

  if [ "$DOECHO" == "2" ] && [[ $SECRETDIFF -gt 0 ]]; then
    echo "... (re)build secrets for '${WOV_CLUSTER}'."
  fi

  # Update secret since it was used
  cp ${WOV_SECRETFILE} ${SECRETFILELAST}

  return ${SECRETDIFF}
}


# --------------------------------------------------------------------- 
# Post processing rules
# --------------------------------------------------------------------- 
# $1 file to dump to
# $2 SECRETFILE
# --------------------------------------------------------------------- 
function fPostBuildSecretsJSON()
{
  local cmd=""

  # make and protect the file
  echo "" > ${2}.${1}
  chmod 600 ${2}.${1}

  # build database host values for .DB.host by calling doResName
  for db in ${DATABASES[@]}; do
    local subhost=`jq -r ".${db}.subhost" ${2}_`
    # echo "subhost : ${subhost}"
    if [ "${cmd}" != "" ]; then cmd+=" | "; fi
    cmd+=" .${db}.hostres=\"$(doResName DB ${WOV_CLUSTER} ${subhost})\" "
    #echo "cmd : ${cmd}"
  done
  
  # run command that adds all the hosts
  if [ "${cmd}" != "" ]; then 
    jq "${cmd}" "${2}_" >> ${2}.${1}
    if [ $? != 0 ]; then
      echo "ERROR: post build on secrets failed for cmd: '${cmd}'."
      exit 1
    fi

    # Success, use the file
    ${MV} ${2}.${1} ${2}_
  else
    rm -f ${2}.${1} || true
  fi
}



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fCleanCacheAll() 
{
  HAS_CLEAN=1
  _fCleanCache "clusters" "secrets"
}
function _fCleanCache() 
{
  BUILDDIRS=( "$*" )
  for f in ${BUILDDIRS[@]}; do
    DEST=${WOV_BASEDIR}/wovtools/cache/$f
    if [ $DOECHO -ge 2 ]; then echo "  ... clean cache in dir '${DEST}'."; fi
    rm -fR ${DEST}/* || true
  done
}


# ---------------------------------------------------------------------
# build all .wov files in a directory
#   from ${WOV_BASEDIR}/wovtools/k8s}
#     to ${WOV_BASEDIR}/wovtools/cache/clusters/$1/k8s
# build cm/se files from containers
#     to ${WOV_BASEDIR}/wovtools/cache/clusters/$1/{cm|se}
#  $1 - 1 if secrets have changed
# ---------------------------------------------------------------------
fBuildCluster()
{
  local SECRETFILELAST="${WOV_CLUSTERDIR}/.last.json"

  # ---------------------------------------------------------------------
  # K8s files, compile
  # ---------------------------------------------------------------------
  mkdir -p  "${WOV_CLUSTERDIR}/k8s"
  chmod 700 "${WOV_CLUSTERDIR}/k8s"

  if [ -d ${WOV_BASEDIR}/wovtools/k8s ]; then

    # Find k8s files to compile
    WOVFILES=$(cd ${WOV_BASEDIR}/wovtools/k8s; ls *.wov 2> /dev/null)
    if [ "${WOVFILES}" == "" ]; then echo "  ... no files found in wovtools/k8s/*.wov."; fi

    # Compile them if needed
    for f in ${WOVFILES}; do

      # file versions 
      SRC=${WOV_BASEDIR}/wovtools/k8s/${f}
      DEST=${WOV_CLUSTERDIR}/k8s/${f%.wov}

      # determine if filename starts with project or microservice.
      # extract microservice out of the filename: (MS-k8sname|MS).yaml.wov -> (MS-k8sname|MS) -> MS
      MS=( $(echo $f | tr "." "\n") )
      MS0=( $(echo ${MS[0]} | tr "-" "\n") )
      # echo "ms '${ms}'  MS0 '${MS0[@]}' MS '${MS[@]}'  proj: ${WOV_PROJECT} file: ${f}"
      if [ "${MS0[0]}" == "${WOV_PROJECT}" ]; then
        ms=""
        D="{}"
      else
        ms=${MS0[0]}
        D="{\"MS\" : \"${ms}\"}"
      fi

      # check if we need to compile
      # ------------------------
      local dowecompile=${DOFORCE}
      if [ "$1" == "1" ]; then dowecompile=1;                         # secrets changed?
      elif [ ! -e "${DEST}" ]; then dowecompile=1;                     # no dest file
      elif [ "${SRC}" -nt "${DEST}" ]; then dowecompile=1;             # src has changed after dest
        # elif [ "${WOV_SECRETFILE}" -nt "${DEST}" ]; then dowecompile=1;    # secrets have changed after dest
      fi

      # compile dir if needed
      if [[ ${dowecompile} -eq 1 ]]; then
        if [ "$DOECHO" == "2" ] || [ "$DOECHO" == "2" ]; then echo "  ... build ${SRC}"; fi
        #echo " --- `basename ${DEST}` needs to be built"
        #      echo "SHOULD CALL: wov-compile ${WOV_SECRETFILE} ${SRC} > ${DEST}"
        # echo "{\"MS\" : \"${ms}\"}"
        # crate a new file descriptor. pipe stderr from wov-compile into it while stdout goes to file; later, pipe 4 back to 1 and capture it
        exec 4>&2
        R=$({ wov-compile -d "${D}" ${WOV_SECRETFILE} ${SRC} 2>&4 > ${DEST}; } 4>&1 )
        Re=$?
        # release
        exec 4>&-
        if [ ${Re} != 0 ]; then
          if [[ ${R} = "Templating Error: \""* ]]; then
            RR=$(echo "${R}" | sed 's/.*"\([a-z]*\)".*/\1/')
            l_warn  "  ... ensure variable '${RR}', used by '${SRC:${#WOV_BASEDIR}+1}', is in configuration."
          else
            l_warn  "  ...wov-compile failed with: '${R}'."
            l_warn  "  ...probably missing variable in configuration."
          fi
          l_warn  "  ...using vars from '${WOV_SECRETFILE:${#WOV_BASEDIR}+1}'."
          l_error "ERROR: for microservice '${ms}', failed to compile file : ${SRC:${#WOV_BASEDIR}+1}."
          rm -f ${DEST} || true
          exit 1
        fi

        # validate output
        python -c 'import yaml, sys; yaml.safe_load(sys.stdin)' < ${DEST}
        if [ $? != 0 ]; then
          echo "WARNING: generated invalid yaml: ${DEST} from ${SRC}"
        fi

      else
        l_verbose "  ... no compile needed, skipping ${SRC}"
      fi

    done
  fi

  # ensure directories
  mkdir -p  "${WOV_CLUSTERDIR}/cm"
  mkdir -p  "${WOV_CLUSTERDIR}/se"
  chmod 700 "${WOV_CLUSTERDIR}/cm"
  chmod 700 "${WOV_CLUSTERDIR}/se"

  local hasbuiltbasecm=0
  local hasbuiltbasese=0

  # ---------------------------------------------------------------------
  # cm/se : build K8s ConfigMap and Secrets
  # ---------------------------------------------------------------------
  # Each container recipe is for a microservice

  fGetMicroserviceRecipes
  for f in "${RECIPES[@]}"; do

    # Create CM file to dump into and clear out
    # NOTE: if builing to CMFILE2, then all recipes would build that and only need to build once... TODO / OPTIMIZATION
    if [ $DOECHO -ge 2 ]; then echo "  ... review ConfigMap and Secret for '${f}${CONFEXT}'."; fi
    local CMFILE=${WOV_CLUSTERDIR}/cm/${f}${CONFEXT}
    l_verbose "  ... build ConfigMap ${f}${CONFEXT} in ${CMFILE}"

    # Check if we need to compile K8s ConfigMap
    local dowecompile=${DOFORCE}
    if [ "$1" == "1" ]; then dowecompile=1;                                  # secrets changed?
    elif [ ! -e "${CMFILE}" ]; then dowecompile=1; # no CMFILE file
    elif [ -e "${CMFILE}" ] && [ ${WOV_SECRETFILE} -nt "${CMFILE}" ]; then dowecompile=1; # existing CMFILE and old
    fi
    if [ $DOECHO -ge 2 ] && [ "${dowecompile}" == "1" ]; then echo "  ... compile ConfigMap for '${f}${CONFEXT}'."; fi

    # Compile K8s ConfigMap file
    if [ "${dowecompile}" == "1" ]; then 
      rm -f ${CMFILE} || true
      touch ${CMFILE}
      chmod 600 ${CMFILE}
      wov-env --context ${WOV_WORKINGCONTEXT} --cm ${f} >> ${CMFILE} 2>&1
      local a=$?
      if [ "$a" == "1" ]; then
        if [ $DOECHO -ge 1 ]; then l_error "Missing Config needed to generate ConfigMap for recipe ${f}  ... skipping ${WOV_CLUSTER}/cm/${f}.\n"; fi
        rm ${CMFILE} 
      elif [ "$a" == "2" ]; then
        l_error "Failed generating configmap in cluster: '${WOV_CLUSTER}' for: '${f}'.\n" >&2
        cat ${CMFILE}
        exit 1
      else
        # sort and uniq to remove duplicates  #??? Needed anymore???
        touch ${CMFILE}  # make sure it exists
        touch ${CMFILE}.1
        chmod 600 ${CMFILE}.1
        sort ${CMFILE} | uniq >> ${CMFILE}.1
        mv ${CMFILE}.1 ${CMFILE}
        if [ $DOECHO -ge 1 ]; then printf "  ... compiled ${WOV_CLUSTER}/cm/${f}.\n"; fi
      fi
    fi

    local SEFILE=${WOV_CLUSTERDIR}/se/${f}${CONFEXT}

    # Check if we need to compile K8s Secrets
    local dowecompile=${DOFORCE}
    if [ "$1" == "1" ]; then dowecompile=1;                                 # secrets changed?
    elif [ ! -e "${SEFILE}" ] && [ ! -e "${SEFILE}" ] ; then dowecompile=1; # no SEFILE file
    fi

    # Compile K8s Secret file
    if [ "${dowecompile}" == "1" ]; then 
      rm -f ${SEFILE} || true
      touch ${SEFILE}
      chmod 600 ${SEFILE}
      wov-env --context ${WOV_WORKINGCONTEXT} --se ${f} >> ${SEFILE} 2>&1
      local a=$?
      if [ "$a" == "1" ]; then
        if [ $DOECHO -ge 1 ]; then l_error "Missing Config needed to generate K8s Secrets for recipe ${f}  ... skipping ${WOV_CLUSTER}/se/${f}.\n"; fi
        rm ${SEFILE} 
      elif [ "$a" == "2" ]; then
        l_error "Failed generating K8s Secret in cluster: '${WOV_CLUSTER}' for: '${f}'.\n" >&2
        cat ${SEFILE}
        exit 1
      else
        # sort and uniq to remove duplicates  #??? Needed anymore???
        touch ${SEFILE}  # make sure it exists
        touch ${SEFILE}.1
        chmod 600 ${SEFILE}.1
        sort ${SEFILE} | uniq >> ${SEFILE}.1
        mv ${SEFILE}.1 ${SEFILE}
        if [ $DOECHO -ge 1 ]; then printf "  ... compiled ${WOV_CLUSTER}/se/${f}.\n"; fi
      fi
    fi
  done

  # mark as done
  HAS_BUILDENV=1
}



# --------------------------------------------------------------------- 
# Handle Params
# --------------------------------------------------------------------- 
while [[ $1 =~ ^- ]]; do
#  echo "param '$1'"

  if [ "$1" == "--config" ]; then
    shift
    fBuildConfig

  elif [ "$1" == "--cluster" ]; then
    shift
    fBuildConfig
    fBuildCluster $?

  elif [ "$1" == "--clean" ]; then
    shift
    fCleanCacheAll

  elif [ "$1" == "-f" ] || [ "$1" == "--force" ]; then
    shift
    DOFORCE=1

  else
    echo
    echo "***ERROR (`basename $0`): unknown option '$1'."

    echo
    fWovEnvBuildDisplayOptions
    exit 1
  fi
done


if [[ ${HAS_SECRET} -eq 0 ]] && [[ ${HAS_BUILDENV} -eq 0 ]] && [[ ${HAS_CLEAN} -eq 0 ]]; then
  echo
  echo "ERROR: no command passed."
  echo
  fWovEnvBuildDisplayOptions
  exit 1
fi
