#!/usr/bin/env bash


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when pushing content.\n\n"
  exit 1
fi
wov-build -e

pushcontainersargs=( "$@" )
set ""
echo "NOTE: see how I load variables through this redirect and source... should do for all"
. <(wov-env -c --exports)
. wov-ns-check
set -- "${pushcontainersargs[@]}"

DOECHO=1
DOFORCE=0
DOPUSH=1
FOLD=$(tput cols)
BLOCK=0
SSHKEY=
RECIPES=( )


echo "NOTE[$0]: Skipping git checks.... will do on wov-push."

## Check local code is checked in and pushed
#wov-git-check ${WOV_BASEDIR}
#R1=$?
#wov-git-check ${WOV_BASEDIR}/wovtools/secrets
#R2=$?
#if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then 
#  printf "\nERROR: wov-build-containers exiting\n" 1>&2
#  exit 1;
#fi



# If NodeJS project...
if [ -e "${WOV_BASEDIR}/node_modules" ]; then
  echo "  ... check for npm 'linked' packages"
  R3=$(find ${WOV_BASEDIR}/node_modules/* -type l -maxdepth 1)
  if [ "${R3}" != "" ]; then
    printf "\nLinked Node Modules:\n"
    printf "  : ${R3}\n"
    printf "\nERROR: You have linked node modules. Type 'npm install'.\n\n"
    exit 1
  fi
fi



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {containercode ...}

Runs the recipe scripts and if there is a change, build the containers.

ex. `basename $0` -f ggg hhh  
    -> for project iii,  forces the building of containers iiiggg and iiihhh



The recipes for containers should:

1) copy code from ${SRCDIR} to the ${DESTDIR} directory
  - where SRCDIR is the root of your git and DESTDIR is the root of the container to be built (i.e. wovtools/cache/containers/CONTAINER).

2) create a sub-recipes to insert into the Dockerfile. There are BUILD and RUN stages, where BUILD contains ssh keys to access private repos. RUN tells the container how to run.
  - ${DESTDIR}/SECRET/prebuild.docker - called before all files copied into container (do npm installs here)
  - ${DESTDIR}/SECRET/build.docker - all code is in the container
  - ${DESTDIR}/SECRET/run.docker - instructions on how to run container

  --key X : ssh key to add ex. ${HOME}/.ssh/id_rsa
  -p/P : do push, no push
  -h : this help
  -l : list containers
  -f : force build
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# Put contents together in container directory
#  NOTE: later will decide if we need to build a container, based upon this
# ---------------------------------------------------------------------
function doPackContainer
{
  # build the content in wovtools/cache/containers/$f
  mkdir -p ${DESTDIR}
  mkdir -p ${DESTDIR}/SECRET/sshkeys
  chmod -R 700 ${DESTDIR}/SECRET
  echo "" > ${DESTDIR}/SECRET/ssh-config
  echo "" > ${DESTDIR}/Dockerfile

  echo "  ... pack container using recipe: '$f'"
  cd ${WOV_BASEDIR} && SRCDIR=${SRCDIR} DESTDIR=${DESTDIR} CONTAINER=${CONTAINER} ${WOV_BASEDIR}/wovtools/containers/$f
  if [ "$?" != "0" ]; then
    printf "\n\nERROR: failed building container.\n\n"
    exit 1
  fi

  # put ssh keys and config options 
  PRIVATEREPOS=( $(cat ${WOV_SECRETFILE} |  jq -r '.repositories | to_entries[] | .key' 2> /dev/null) )
  if [ "$?" != "0" ]; then
    printf "\nERROR: no 'repositories' entry in secrets. If you have no private repos, create a blank entry.\n"
    exit 1
  fi
  echo "  ... adding keys for private repos"
  for repo in "${PRIVATEREPOS[@]}"; do
    # for each item in private repo, append to ssh/config and add its key
    # echo "  ... add in repo key ${repo}, update .ssh/config"

    repoURL=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].host')
    #echo "    ... repoURL ${repoURL}"

#    repoUser=$(ssh -G ${repo} | grep "^user " | awk '{print $2}')
    repoUser=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].user')
    #echo "    ... repoUser ${repoUser}"

    #repoKeyFile=$(ssh -G ${repo} | grep "^identityfile " | awk '{print $2}')
    repoKeyFile=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].privkeyloc')
    repoKeyFile="${repoKeyFile/#\~/$HOME}"
      # expand tilde to $HOME
    #echo "    ... repoKeyFile ${repoKeyFile}"
    echo "    ... repo: '${repo}'  url: '${repoURL}'  user: '${repoUser}'  keyfile: '${repoKeyFile}'"
    cat <<EOF >> ${DESTDIR}/SECRET/ssh-config

# repo: ${repo}
Host ${repoURL}
  User ${repoUser}
  IdentityFile /root/.ssh/$(basename ${repoKeyFile})
EOF


    if [ ! -e ${repoKeyFile} ]; then
      echo "ERROR: unable to find key file '${repoKeyFile}'."
      exit 1
    fi
    cp ${repoKeyFile} ${DESTDIR}/SECRET/sshkeys/.

  done


  # --------------------------------------------------------------------- 
  # start building Dockerfile for the container
  echo "**** Should do all variables like this ****"
  _CONTAINERBASE="WOV_${WOV_PROJECT}${CONTAINERNAME}_containerfrom"
  CONTAINERBASE=${!_CONTAINERBASE}
  #CONTAINERBASE=$(cat ${WOV_SECRETFILE} | jq -r '.'${WOV_PROJECT}'.'${CONTAINERNAME}'.containerfrom')
  if [ "${CONTAINERBASE}" == "null" ]; then
    printf "\nERROR: Docker container for '${repo}' has no known base to build from in secret: '${WOV_PROJECT}.${CONTAINERNAME}.containerfrom'.\n\n"
    printf "   Check: \n"
    printf "     - secrets are rebuilt (wov-build -e)\n"
    printf "     - secrets contain entry for '${WOV_PROJECT}.${CONTAINERNAME}.containerfrom'. ('wov-ed -c secrets/current.json')\n"
    printf "     - secret file containing that entry is included in this stage (see wovtools/confing.json secrets.${WOV_STAGE})\n\n"
    exit 1
  fi

  # ... setup
  if [ $DOECHO -ge 1 ]; then echo "  ... building container Dockerfile"; fi
  cat <<EOF > ${DESTDIR}/Dockerfile
# ===================================================================== 
# Build Section
# ===================================================================== 
# - This section has secret content in SECRETS dir, that will be deleted
# - Install build tools and build code, only /usr/src/app will survive
# ===================================================================== 
FROM ${CONTAINERBASE} as wovtools

# alpine linux does not have ssh client
RUN if which apk; then apk add --no-cache openssh-client; fi

# Use specific keys for private repos
RUN mkdir -p /root/.ssh
RUN touch /root/.ssh/known_hosts
RUN chmod 600 /root/.ssh/known_hosts
ADD SECRET/ssh-config /root/.ssh/config
RUN chmod 600 /root/.ssh/config

EOF

  if [ $DOECHO -ge 2 ]; then echo "  ... adding keys"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Adding ssh keys
COPY SECRET/sshkeys/. /root/.ssh/.
RUN chmod 600 /root/.ssh/*
EOF

  if [ $DOECHO -ge 2 ]; then echo "  ... add in call to each repo, so it adds to known hosts"; fi
  for repo in "${PRIVATEREPOS[@]}"; do
    local repoURL=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].host')
    cat <<EOF >> ${DESTDIR}/Dockerfile

# Adding repos to ssh known_hosts  (||true because returns non-0 on success, so added '-v' for output)
RUN ssh -o StrictHostKeyChecking=no -vT ${repoURL} || true
EOF
  done


  # Prebuild, if exists
  # ... add in section to build code from user script /secure/
  if [ -e "${DESTDIR}/SECRET/prebuild.docker" ]; then
    if [ $DOECHO -ge 2 ]; then echo "  ... creating prebuild section"; fi
    cat <<EOF >> ${DESTDIR}/Dockerfile
# Copy in content necessary for prebuild
WORKDIR /usr/src/app
EOF
    cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Prebuild instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/prebuild.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF
  fi



  if [ $DOECHO -ge 2 ]; then echo "  ... creating build section"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Copy in local content
WORKDIR /usr/src/app
COPY . .
EOF

  # ... add in section to build code from user script /secure/
  if [ ! -e "${DESTDIR}/SECRET/build.docker" ]; then
    echo "ERROR: no 'build.docker' file in '${DESTDIR}/SECRET', should be created in wovtools container script."
    exit 1
  fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Build instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/build.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF

  # ... clean up secure and start insecure
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Clean up secrets
RUN rm -Rf /usr/src/app/SECRET
RUN rm -Rf /root/.ssh
EOF

  # ... create insecure section to run from (no keys unless you add), /insecure/
  if [ $DOECHO -ge 2 ]; then echo "  ... creating run section"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# ===================================================================== 
# Run Section
# ===================================================================== 
# - insecure section to run from (no keys unless you add)
# - copied from 'run.docker'
# ===================================================================== 
FROM ${CONTAINERBASE}
RUN if which apk;     then apk --no-cache update; fi
RUN if which apt-get; then apt-get -y update;     fi

COPY --from=wovtools /usr/src/app /usr/src/app
WORKDIR /usr/src/app

EOF
  if [ ! -e "${DESTDIR}/SECRET/run.docker" ]; then
    echo "ERROR: no 'run.docker' file in '${DESTDIR}/SECRET', should be created in wovtools container script."
    exit 1
  fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Run instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/run.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF

}


# ---------------------------------------------------------------------
# Pack all into Docker container and archive last build.
# ---------------------------------------------------------------------
function doBuildContainer
{
  echo "  ... creating container '${CONTAINER}'"
#  if [ "${SSHKEY}" != "" ]; then
#    echo "      ... adding ssh key to build: '${SSHKEY}'"
#    cp ${SSHKEY} ${DESTDIR}/$(basename ${SSHKEY})
#    SS="--build-arg SSH_KEY=$(basename ${SSHKEY})"
#  fi

#  docker build ${SS} -f ${DESTDIR}/Dockerfile -t ${WOV_PROJECT}/${CONTAINER}:latest ${DESTDIR} || exit 1
  docker build -f ${DESTDIR}/Dockerfile -t ${WOV_PROJECT}/${CONTAINER}:latest ${DESTDIR} || exit 1

#  if [ "${SSHKEY}" != "" ]; then
#    echo "      ... removing key from dest: '${DESTDIR}/$(basename ${SSHKEY})'"
#    rm ${DESTDIR}/$(basename ${SSHKEY})
#  fi

  echo "    ... archiving build of container '${CONTAINER}'"
  mkdir -p ${ARCHDIR}
  rsync -ai --delete ${DESTDIR}/ ${ARCHDIR} &> /dev/null
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doList()
{
  C=$(ls ${WOV_BASEDIR}/wovtools/containers/* 2> /dev/null )
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then echo $C; else echo "No containers"; fi
}

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-p" ]; then
    shift
    DOPUSH=1

  elif [ "$1" == "-P" ]; then
    shift
    DOPUSH=0

  elif [ "$1" == "--key" ]; then
    shift
    SSHKEY=$1
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-l" ]; then
    shift
    doList
    BLOCK=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




# Find the recipes
if [ "${BLOCK}" == "0" ]; then
 
  RECIPES=( "$@" )
  if [ "${#RECIPES[@]}" == "0" ]; then
    RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers && find * -maxdepth 0 -type f 2> /dev/null)
  fi
#  echo "R: ${RECIPES}"

  # Build containers if needed
  for f in ${RECIPES}; do

    if [ $DOECHO -ge 1 ]; then printf "\n%-${FOLD}s\n" "-" | tr ' ' '-' ; echo "... build container '${f}'."; fi

    CONTAINERNAME=$f
    CONTAINER=${WOV_PROJECT}${CONTAINERNAME}
    SRCDIR=${WOV_BASEDIR}
    DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${CONTAINERNAME}
    ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${CONTAINERNAME}
    # echo "CONTAINERNAME=${CONTAINERNAME}"
    # echo "CONTAINER=${CONTAINER}"
    # echo "SRCDIR=${SRCDIR}"
    # echo "DESTDIR=${DESTDIR} # more like a 'content' dir as this is all copied in here"
    # echo "ARCHDIR=${ARCHDIR} # location of archive of DESTDIR"


#    echo "    ... DESTDIR=${DESTDIR}"
#    echo "    ... CONTAINER=${CONTAINER}"
    if [[ ! -e "${WOV_BASEDIR}/wovtools/containers/$f" ]]; then 
      echo "ERROR: recipe for container ${f} does not exist (${WOV_BASEDIR}/wovtools/containers/$f).";
      exit 1
    elif [[ ! -x "${WOV_BASEDIR}/wovtools/containers/$f" ]]; then 
      echo "ERROR: recipe for container ${f} not executable (${WOV_BASEDIR}/wovtools/containers/$f).";
      exit 1
    else

      doPackContainer ${f}

      # Just packed container, do we need to build it? Do diffs against archive, then compare remote container
      NEEDSBUILD=0
      diff -q -r ${DESTDIR} ${ARCHDIR} > /dev/null
      NEEDSBUILD=$?
      if [ "$NEEDSBUILD" != "0" ]; then 
        echo "  ... packed container differs so will build.";
      else
        echo "  ... check push container status"
        wov-pushcontainer-check -q ${f}
        NEEDSBUILD=$?
        if [ "$NEEDSBUILD" != "0" ]; then 
          echo "  ... pushed containers differ so will build.";
        fi
      fi
        #echo "NEEDSBUILD: ${NEEDSBUILD}"
        # printf "\n\n\n\nNEEDSBUILD: $NEEDSBUILD\n\n\n"
        #    echo "NEEDSBUILDOUT: $NEEDSBUILDOUT"
        #    if [ ${NEEDSBUILD} == 1 ] || [ $DOFORCE == 1 ]; then
        #      echo "    ... forcing container build."
        #
        #    elif [ "$(docker images -q ${CONTAINER})" == "" ]; then 
        #      docker images -q ${CONTAINER}
        #      echo "    ... no existing container, building"
        #      NEEDSBUILD=1
        #
        #    elif [ ! -e ${ARCHDIR} ]; then 
        #      echo "    ... no ${ARCHDIR}, building"
        #      NEEDSBUILD=1; 
        #
        #    elif [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then 
        #      echo "    ... diffs when comparing ${DESTDIR} to ${ARCHDIR}, building"
        #      NEEDSBUILD=1; 
        #    fi
        #
      if [ "${NEEDSBUILD}" ==  "4" ]; then exit  ${NEEDSBUILD}; fi
      if [ "${NEEDSBUILD}" ==  "3" ]; then exit  ${NEEDSBUILD}; fi
      if [ "${NEEDSBUILD}" ==  "2" ]; then exit  ${NEEDSBUILD}; fi

      # Build
      JUSTBUILT=0
      if [ "${NEEDSBUILD}" == "1" ] || [ "${DOFORCE}" == "1" ]; then
        JUSTBUILT=1

        doBuildContainer ${f}

      else
        echo "  ... container build not needed"
      fi


      # Do we push the container?
      if [ "$DOPUSH" == "0" ]; then
        printf "  ... skipping container push\n"
      else

        # echo "needsbuild '${NEEDSBUILD}'"

        # Tag and Push
        if [ "${NEEDSBUILD}" == "1" ] || [ "${NEEDSBUILD}" == "5" ] || [ "${DOFORCE}" == "1" ]; then
          echo "  ... tag repo"
          docker tag ${WOV_PROJECT}/${CONTAINER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}

          echo "  ... push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"

          # If just built, dump log, since it will have to push a lot of data
  #        if [ "${JUSTBUILT}" == "1" ]; then
            R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1 | tee /dev/tty )
            RR=$?
  #        else
#          R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1 )
#          RR=$?
#        fi
          # echo "R: ${R} RR=${RR}"
          if [[ $R == 'name unknown'* ]]; then
            printf "\n\n  ...${R}.\n"
            exit 1
          fi
          if [[ $R == *'Your Authorization Token has expired.'* ]]; then
            echo "    ... auto-login to AWS attempt"
            AWSAUTHCMD=$(aws ecr get-login --no-include-email)
            eval ${AWSAUTHCMD}
            if [ "$?" != "0" ]; then
              echo "      ... FAILED auto-login to AWS attempt"
              exit 1
            else
              echo "      ... SUCCESS auto-login to AWS attempt"
              echo "    ... re-push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
              R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1  | tee /dev/tty)
              if [ "$?" != "0" ]; then
                printf "\n\n  ...still errors: ${R}.\n"
                exit 1
              fi
            fi
          fi

        else
          echo "  ... container push not needed"
        fi
        echo "  ... done '${CONTAINER}'."
      fi
    fi


  done

  printf "\nCompleted Building:\n"
  for f in ${RECIPES}; do
    echo "  ... built: ${WOV_PROJECT}/${WOV_PROJECT}${f}"
  done
  printf "    run locally: 'docker run CONTAINER'\n"
  printf "     open shell: 'docker run --rm -it CONTAINER bash'\n"
fi
