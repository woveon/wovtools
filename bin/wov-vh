#!/usr/bin/env bash


DOECHO=1
FOLD=140
DIDCOMMAND=0


# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
wovvargs=( "$@" )
set ""
. wov-env -c
. wov-ns-check
set -- "${wovvargs[@]}"


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] resource/file

Virtual commands. 

  -s : start the virtual machine
  --config : mount all secrets and configmaps to the vh
  --route-service [service] [pod] - patches the service to point to the given pod
  -l : login (alias for wov-pshell vh)
  -h : this help
  -q/-v : quiet/verbose

EOF
#  -h-repos : help with editing remote repos on vh
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doStart()
{
  DIDCOMMAND=1
  CL_ZONES_ARRAY=($CL_ZONES)

  echo "  ... ensuring a volume in AWS: 'vh-vol-${WOV_PROJECT}-${WOV_STAGE}'"

  volid=`aws ec2 describe-volumes --filter Name="tag:Name",Values=\"vh-vol-${WOV_PROJECT}-${WOV_STAGE}\" | jq '.Volumes[0].VolumeId' -r`

  if [ "$volid" == "null" ]; then
    volid=`aws ec2 create-volume --size 20 --region ${CL_REGION} --availability-zone ${CL_REGION}${CL_ZONES_ARRAY[0]} --volume-type gp2 \
      --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=vh-vol-${WOV_PROJECT}-${WOV_STAGE}}]" | jq ".VolumeId" -r`
  fi

  echo "  ... Volume: vh-vol-${WOV_PROJECT}-${WOV_STAGE}, VolumeId: $volid"

  # Wait a sec to make sure it is ready
  sleep 1
  CF=$(doConfig)
  echo "  ... creating a microservice development pod (vh) in ${WOV_NS}."
  cat <<EOF > .file
apiVersion: v1
kind: Pod
metadata:
  name: vh
  labels:
    app: vh
spec:
  hostname: vh
  restartPolicy: Never
  containers:
  - name: vh

    # Run continuously CMD from: https://stackoverflow.com/a/35770783/2664702
    command : ["/bin/bash", "-c", "trap : TERM INT; sleep infinity & wait"]

    # for now, but need to upate for wovtools2
    #image: woveon/container_msdev:1
    image: index.docker.io/wovtools/vh:$(wov-env --vh-label)
    imagePullPolicy: Always
    volumeMounts:
    - mountPath: /usr/src/app
      name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
${CF}
  volumes:
  - name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
    awsElasticBlockStore:
      volumeID: ${volid}
      fsType: ext4
EOF

  kubectl apply -f .file

  echo "  ... wait for running vh"
  wov-pwait -f 20 -w 5 vh


  echo "  ... finish configuring vh"
  echo "    ... pushing ssh keys"
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa" ] || [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub" ] ; then
    echo "echo:ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa"
    ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa
  fi
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa     ${WOV_NS}/vh:/root/.ssh/id_rsa
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub ${WOV_NS}/vh:/root/.ssh/id_rsa.pub


cat <<EOF


 =====================================================================
 =====================================================================
    ____
   / ___| _   _  ___ ___ ___  ___ ___
   \___ \| | | |/ __/ __/ _ \/ __/ __|
    ___) | |_| | (_| (_|  __/\__ \__ \\
   |____/ \__,_|\___\___\___||___/___/

 =====================================================================
 =====================================================================

Created virtual machine for developemnt. (type 'wov-ns' to see)

           Connect: 'wov-pshell vh'   <-- wovpshell is a utility
                                            to connect to any K8s pod
                or: 'wov-v -l'          <-- shortcut

=====================================================================

EOF
}


# ---------------------------------------------------------------------
# Use patch to add the secrets
# ---------------------------------------------------------------------
function doConfig()
{
#  echo "for now, echo it"

  V_S=( $(kubectl get secrets | sed -n '3,$p' | awk '{print $1}') )
  V_CM=( $(kubectl get cm | sed -n '2,$p' | awk '{print $1}') )
#  echo "$V_S"
#  echo "$V_CM"

  CF=""
  printf -v CF "    envFrom:\n"
  for v in "${V_CM[@]}"; do
    printf -v CF "%s    - configMapRef:\n" "$CF"
    printf -v CF "%s        name: $v\n" "$CF"
  done
  for v in "${V_S[@]}"; do
    printf -v CF "%s    - secretRef:\n" "$CF"
    printf -v CF "%s        name: $v\n" "$CF"
  done
  printf "$CF"
}


# ---------------------------------------------------------------------
# route the spec.selector.app from service to vh
# ---------------------------------------------------------------------
function doRouteService()
{
  local patch="{ \"spec\" : { \"selector\" : { \"app\" : \"$2\" }}}"
  # echo "PATCH: $patch"
  kubectl patch service $1 -p "$patch"

}




# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-l" ]; then
    shift
    wov-pshell vh

  elif [ "$1" == "-s" ]; then
    shift
    doStart

  elif [ "$1" == "--config" ]; then
    shift
    doConfig

  elif [ "$1" == "--route-service" ]; then
    shift 
    doRouteService $1 $2
    shift
    shift

#  elif [ "$1" == "--pull-dir" ]; then
#    shift
#    doPullDir $1
#    shift

#  elif [ "$1" == "-h-repos" ] ; then
#    fDisplayHelpRepos
#    exit 0

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done





if [ ${DIDCOMMAND} == 0 ]; then
  printf "\n\nERROR: no command given.\n\n"
  fDisplayOptions
  exit 1
fi
