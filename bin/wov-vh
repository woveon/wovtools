#!/usr/bin/env bash

DOECHO=1
FOLD=`tput cols`
DIDCOMMAND=0
CVcm=
CVse=


# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
wovvargs=( "$@" )
set ""
. wov-env --provider
. wov-ns-check
set -- "${wovvargs[@]}"


NAMESPACE=${WOV_NS}

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] resource/file

Virtual host commands for development in a pod in the cluster. This is used for testing networking, database calls, microservice connections and other development. 

  * The drive /usr/src/app is a persistent volume, so place all your code there and it will persist between vh closings. 
  * Use wov-vh-pushgit and wov-vh-pulldir to move your development environment into and out of the pod.
  * The vh pod is created with the instructions in wovtools/vh.

NOTE: see the wiki regarding 'service re-routing' for development: https://github.com/woveon/wovtools/wiki/Developing-a-Microservice#service-re-routing.

  Pod Controls
  --------------------------------------------------------------------- 
  -s/--start : start the virtual host
  -S/--stop  : stop the virtual host
  -l ...     : login (alias for wov-pshell vh), with following commands run at login (stays logged in)
      ex. wov-vh -l                 # just login and stay logged in
      ex. wov-vh -l "ls ; cd plem"
      ex. wov-vh -l wcd we

  Routing Controls
  --------------------------------------------------------------------- 
  --route-service [service{:TARGETPORT}] : patches the service to point to vh
  --unroute-service [service]            : puts service back to deplpoyment
  -r/--route-list                        : show current route setup


  Utility
  --------------------------------------------------------------------- 
  -n|--namespace         : use a different namespace in the cluster
  -h : this help
  -q/-v : quiet/verbose


EOF
#  -h-repos : help with editing remote repos on vh
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doStart()
{
  DIDCOMMAND=1
  CL_ZONES_ARRAY=( $CL_ZONES )

  local VOLNAME="vh-vol-${WOV_PROJECT}-${WOV_STAGE}"
  echo "  ... ensuring a volume in AWS: '${VOLNAME}'"
  volid=`wov-aws volume-ensure "${VOLNAME}" 20`
#  volid=`aws ec2 describe-volumes --filter Name="tag:Name",Values=\"vh-vol-${WOV_PROJECT}-${WOV_STAGE}\" | jq '.Volumes[0].VolumeId' -r`
#  if [ "$volid" == "null" ]; then
#    volid=`aws ec2 create-volume --size 20 --region ${CL_REGION} --availability-zone ${CL_REGION}${CL_ZONES_ARRAY[0]} --volume-type gp2 \
#      --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=vh-vol-${WOV_PROJECT}-${WOV_STAGE}}]" | jq ".VolumeId" -r`
#  fi
#
  echo "  ... Volume: ${VOLNAME}, VolumeId: $volid"

  # NOTE: removed this since vh has own config - per microservice
#  echo "  ... ensure Configmap and Secrets in AWS: '${WOV_PROJECT}vh'"
#  kubectl get cm      ${WOV_PROJECT}vh &> /dev/null
#  CHECKCM=$?
#  kubectl get secrets ${WOV_PROJECT}vh &> /dev/null
#  CHECKSE=$?
#  if [ "${CHECKCM}" != "0" ]; then echo "FAILED: no Configmap of ${WOV_PROJECT}vh."; fi
#  if [ "${CHECKSE}" != "0" ]; then echo "FAILED: no Secret    of ${WOV_PROJECT}vh."; fi
#  if [ "${CHECKCM}" != "0" ] || [ "${CHECKCM}" != "0" ]; then
#    echo
#    echo "run 'wov-deploy --dev --conf-only' to generate these"
#    echo 
#    exit 1
#  fi


  # Wait a sec to make sure it is ready
  sleep 1
#  CF=$(doConfig)
  doConfigVol
  echo "  ... creating a microservice development pod (vh) in ${WOV_NS}."
  cat <<EOF > ${WOV_BASEDIR}/wovtools/cache/.deployments/vh.$$.yaml
apiVersion: v1
kind: Pod
metadata:
  name: vh
  labels:
    app: vh
spec:
  hostname: vh
  restartPolicy: Never
  containers:
  - name: vh

    # Run continuously CMD from: https://stackoverflow.com/a/35770783/2664702
    command : ["/bin/bash", "-c", "trap : TERM INT; sleep infinity & wait"]

    # for now, but need to upate for wovtools2
    #image: woveon/container_msdev:1
    image: index.docker.io/wovtools/vh:$(wov-env --vh-label)
    resources:
      limits:
        cpu: ".5"
    imagePullPolicy: Always
    volumeMounts:
    - mountPath: /usr/src/app
      name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
    - mountPath: /etc/k8s-config
      name: configmap-volume
    - mountPath: /etc/k8s-secret
      name: secret-volume
# CF was here
  volumes:
  - name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
    awsElasticBlockStore:
      volumeID: ${volid}
      fsType: ext4
  - name: configmap-volume
    projected:
      sources:
${CVcm}
  - name: secret-volume
    projected:
      sources:
${CVse}
EOF


#  echo "${WOV_BASEDIR}/wovtools/cache/.deployments/vh.$$.yaml"
#  cat "${WOV_BASEDIR}/wovtools/cache/.deployments/vh.$$.yaml"
#  echo "...not starting"
#  exit 1

  RR=$(kubectl get pod vh 2> /dev/null)
  if [ "$?" == "0" ]; then
    printf "\nERROR: existing pod 'vh'. Do 'wov-vh --stop' or wait for terminating pod to finish.\n"
    exit 1
  fi

  RR=$(kubectl apply -f ${WOV_BASEDIR}/wovtools/cache/.deployments/vh.$$.yaml)
  if [[ ! $RR =~ created$ ]]; then
    echo $RR
    echo "ERROR: did not create, something wrong. Try 'kubectl get pods'."
    exit 1
  fi

  # TODO NOTE:  here, need to check for if vh stopped/stopping

  echo "  ... wait for running vh"
  wov-pwait -f 5 -w 5 vh


  echo "  ... finish configuring vh"
  echo "    ... pushing ssh keys"
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa" ] || [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub" ] ; then
    echo "echo:ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa"
    ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa
  fi
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa     ${WOV_NS}/vh:/root/.ssh/id_rsa
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub ${WOV_NS}/vh:/root/.ssh/id_rsa.pub
  if [ -e "${WOV_BASEDIR}/wovtools/vh/onbuild.sh" ]; then
    echo "  ... running 'onbuild.sh' in wovtools/vh"
    ${WOV_BASEDIR}/wovtools/vh/onbuild.sh
  else
    echo "  ... no 'onstart.sh' in wovtools/vh, so skipping"
  fi


cat <<EOF


 =====================================================================
 =====================================================================
    ____
   / ___| _   _  ___ ___ ___  ___ ___
   \___ \| | | |/ __/ __/ _ \/ __/ __|
    ___) | |_| | (_| (_|  __/\__ \__ \\
   |____/ \__,_|\___\___\___||___/___/

 =====================================================================
 =====================================================================

Created virtual machine for developemnt. (type 'wov-ns' to see)

           Connect: 'wov-pshell vh'   <-- wovpshell is a utility
                                            to connect to any K8s pod
                or: 'wov-vh -l'          <-- shortcut

=====================================================================

EOF
}


# ---------------------------------------------------------------------
# Add configmap and secret.
# ---------------------------------------------------------------------
function doConfig() {
  local CF=""
  printf -v CF   "    envFrom:\n"
  printf -v CF "%s    - configMapRef:\n" "$CF"
  printf -v CF "%s        name: ${WOV_PROJECT}\n" "$CF"
  printf -v CF "%s    - secretRef:\n" "$CF"
  printf -v CF "%s        name: ${WOV_PROJECT}\n" "$CF"
  printf "$CF"
}


# ---------------------------------------------------------------------
# Mount the configmap and secrets instead of attaching to Pod so they
# can load immediately, instead of requiring a redeploy of the Pod.
# ---------------------------------------------------------------------
function doConfigVol() {

#  printf -v CV   "  - name: configmap-volume\n"
#  printf -v CV "%s    configMap:\n" "$CV"
#  printf -v CV "%s      name: ${WOV_PROJECT}vh\n" "$CV"
#  printf -v CV "%s  - name: secret-volume\n" "$CV"
#  printf -v CV "%s    secret:\n" "$CV"
#  printf -v CV "%s      secretName: ${WOV_PROJECT}vh\n" "$CV"


  # project level CM/Secrets
  printf -v CVcm "%s      - configMap:\n" "$CVcm"
  printf -v CVcm "%s          name: ${WOV_PROJECT}vh\n" "$CVcm"
  printf -v CVcm "%s          optional: true\n" "$CVcm"
  printf -v CVse "%s      - secret:\n" "$CVse"
  printf -v CVse "%s          name: ${WOV_PROJECT}vh\n" "$CVse"
  printf -v CVse "%s          optional: true\n" "$CVse"

  # microservice-level
  local RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers && find * -maxdepth 0 -type f 2> /dev/null)

  # add all generated ConfigMap (via wov-push-k8s)
  for f in ${RECIPES}; do
#    printf -v CVcm "%s  - name: configmap-volume-${f}\n" "$CVcm"
#    printf -v CVcm "%s    configMap:\n" "$CVcm"
#    printf -v CVcm "%s      name: ${WOV_PROJECT}${f}vh\n" "$CVcm"
    printf -v CVcm "%s      - configMap:\n" "$CVcm"
    printf -v CVcm "%s          name: ${WOV_PROJECT}${f}vh\n" "$CVcm"
    printf -v CVcm "%s          optional: true\n" "$CVcm"
  done

  # add all generated Secrets (via wov-push-k8s)
  for f in ${RECIPES}; do
#    printf -v CV "%s  - name: secret-volume-${f}\n" "$CV"
    printf -v CVse "%s      - secret:\n" "$CVse"
    printf -v CVse "%s          name: ${WOV_PROJECT}${f}vh\n" "$CVse"
    printf -v CVse "%s          optional: true\n" "$CVse"
  done
}

# ---------------------------------------------------------------------
# Used to use conf files
#  NOTE: previously attached all configmaps and secrets, but now, 
#        only those in the deployment
# ---------------------------------------------------------------------
function doConfig_old()
{
#  echo "for now, echo it"

  V_S=( $(ls ${WOV_BASEDIR}/wovtools/cache/conf/*.sk8s) )
  V_CM=( $(ls ${WOV_BASEDIR}/wovtools/cache/conf/*.ck8s) )
#  V_S=( $(kubectl get secrets | sed -n '2,$p' | awk '{print $1}' | sed '/^default-token-/d') )
#  V_CM=( $(kubectl get cm | sed -n '2,$p' | awk '{print $1}') )
#  echo "$V_S"
#  echo "$V_CM"

  CF=""
  printf -v CF "    envFrom:\n"
  for V in "${V_CM[@]}"; do
    v=$(basename $V)
    v=${v%.*}
    printf -v CF "%s    - configMapRef:\n" "$CF"
    printf -v CF "%s        name: $v\n" "$CF"
  done
  for V in "${V_S[@]}"; do
    v=$(basename $V)
    v=${v%.*}
    printf -v CF "%s    - secretRef:\n" "$CF"
    printf -v CF "%s        name: $v\n" "$CF"
  done
  printf "$CF"
}


# ---------------------------------------------------------------------
# Show how the microservices are routed
# ---------------------------------------------------------------------
function doRouteList()
{
  kubectl -n ${NAMESPACE} get services -o json | jq -r '.items[] | "\(.metadata.name) => \(.spec.selector.app)"'
}

# ---------------------------------------------------------------------
# route the spec.selector.app from service to vh
# ---------------------------------------------------------------------
function doRouteService()
{
  local srv=( $(echo "${1}" | tr ':' ' ') )
  local RETVAL=1
  # printf "srv ${srv[*]} \n"
  local patch="{ \"spec\" : { \"selector\" : { \"app\" : \"$2\" }}}"
  # echo "PATCH: $patch"

  printf "... route service '${srv[0]}' to '$2'"
  if [ "${#srv[*]}" == "2" ]; then printf " on port '${srv[1]}'.";
  else printf " with no port change."; fi
  printf "\n"

  R=$(kubectl -n ${NAMESPACE} patch service ${srv[0]} -p "$patch")
  if [[ $? == 0 ]]; then
    # printf "  ... success\n"
    RETVAL=0
  else
    printf "\n$R\n"
  fi

  if [ "${#srv[*]}" == "2" ] && [ "${RETVAL}" == "0" ]; then
    local patchport="{ \"spec\" : { \"ports\" : [{ \"targetPort\" : ${srv[1]}, \"port\" : 80, \"protocol\": \"TCP\" }]}}"
    # printf "  ... apply port patch\n"
    # printf "    ${patchport}\n"
    R=$(kubectl -n ${NAMESPACE} patch service ${srv[0]} -p "$patchport")
    if [[ $? == 0 ]]; then
      # printf "  ... success\n"
      RETVAL=0
    else
      printf "${R}\n"
      printf "  ... failed or no change to targetPort\n"
      RETVAL=1
    fi
  fi

#  printf "...deleting deployment '$1'.\n"
#  printf "  NOTE: 'wov-deploy $1' to get it running again.\n"
#  printf "        or 'kubectl apply -f ${WOV_BASEDIR}/wovtools/cache/k8s/$1.yaml'.\n"
#  kubectl delete deployment $1

  DIDCOMMAND=1

  return $RETVAL
}


# ---------------------------------------------------------------------
# Stops the running vh node. 
# ---------------------------------------------------------------------
function doStop() 
{
  kubectl delete pod vh
}



# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-l" ]; then
    shift
    if [ "$#" == 0 ]; then
      kubectl exec -it "vh" -- /bin/bash
    else
      # Generate and send an initfile (which also sources existing init file)
      echo ". /root/.bashrc" > .initfile.$$
      echo "$@" >> .initfile.$$
      kubectl cp .initfile.$$ vh:/tmp/initfile.$$
      rm .initfile.$$
      kubectl exec -it "vh" -- /bin/bash --init-file /tmp/initfile.$$
    fi
    # wov-pshell vh
    DIDCOMMAND=1

  elif [ "$1" == "-S" ] || [ "$1" == "--stop" ]; then
    shift
    doStop
    DIDCOMMAND=1

  elif [ "$1" == "-s" ] || [ "$1" == "--start" ]; then
    shift
    doStart
    DIDCOMMAND=1

  elif [ "$1" == '-n' ] || [ "$1" == '--namespace' ]; then
    shift
    NAMESPACE="$1 "
    shift

#  elif [ "$1" == "--config" ]; then
#    shift
#    doConfig
#    DIDCOMMAND=1

  elif [ "$1" == "--unroute-service" ]; then
    shift 
    if [ "$1" != "" ]; then
      doRouteService $1 $1
      shift 
    else
      printf "ERROR: --route-service requires 1 param.\n" 1>&2
      fDisplayOptions
      exit 1
    fi

  elif [ "$1" == "--route-service" ]; then
    shift 
    if [ "$1" != "" ]; then
      doRouteService $1 vh
      shift
    else
      printf "ERROR: --route-service requires 1 params.\n" 1>&2
      fDisplayOptions
      exit 1
    fi

  elif [ "$1" == "--route-list" ] || [ "$1" == "-r" ]; then
    shift
    doRouteList
    DIDCOMMAND=1

#  elif [ "$1" == "--pull-dir" ]; then
#    shift
#    doPullDir $1
#    shift

#  elif [ "$1" == "-h-repos" ] ; then
#    fDisplayHelpRepos
#    exit 0

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done





if [ ${DIDCOMMAND} == 0 ]; then
  printf "\n\nERROR: no command given.\n\n"
  fDisplayOptions
  exit 1
fi
