#!/usr/bin/env bash


DOECHO=1
FOLD=80
DIDCOMMAND=0


# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
wovvargs=( "$@" )
set ""
. wov-env -c
. wov-ns-check
set -- "${wovvargs[@]}"


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] resource/file

Virtual commands. 

  -s : start the virtual machine
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doStart()
{
  DIDCOMMAND=1
  CL_ZONES_ARRAY=($CL_ZONES)

  echo "  ... ensuring a volume in AWS: 'vh-vol-${WOV_PROJECT}-${WOV_STAGE}'"

  volid=`aws ec2 describe-volumes --filter Name="tag:Name",Values=\"vh-vol-${WOV_PROJECT}-${WOV_STAGE}\" | jq '.Volumes[0].VolumeId' -r`

  if [ "$volid" == "null" ]; then
    volid=`aws ec2 create-volume --size 20 --region ${CL_REGION} --availability-zone ${CL_REGION}${CL_ZONES_ARRAY[0]} --volume-type gp2 \
      --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=vh-vol-${WOV_PROJECT}-${WOV_STAGE}}]" | jq ".VolumeId" -r`
  fi

  echo "  ... Volume: vh-vol-${WOV_PROJECT}-${WOV_STAGE}, VolumeId: $volid"

  # Wait a sec to make sure it is ready
  sleep 1
  echo "  ... creating a microservice development pod (vh) in ${WOV_NS}."
  kubectl apply -f  - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: vh
  labels:
    app: vh
spec:
  hostname: vh
  restartPolicy: Never
  containers:
  - name: vh
    # Run continuously CMD from: https://stackoverflow.com/a/35770783/2664702
    command : ["/bin/bash", "-c", "trap : TERM INT; sleep infinity & wait"]
    # for now, but need to upate for wovtools2
    image: woveon/container_msdev:1
#    image: 686413534598.dkr.ecr.us-east-1.amazonaws.com/container_msdev:1
    imagePullPolicy: Always
    volumeMounts:
#    - mountPath: /usr/src/app/dev
    - mountPath: /usr/src/app
      name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
  volumes:
  - name: vh-vol-${WOV_PROJECT}-${WOV_STAGE}
    awsElasticBlockStore:
      volumeID: ${volid}
      fsType: ext4
EOF

  echo "  ... wait for running vh"
  wov-pwait -f 20 -w 5 vh


  echo "  ... finish configuring vh"
  echo "    ... pushing ssh keys"
  if [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa" ] || [ ! -e "${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub" ] ; then
    echo "echo:ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa"
    ssh-keygen -t rsa -f ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa
  fi
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa     ${WOV_NS}/vh:/root/.ssh/id_rsa
  kubectl cp ${WOV_BASEDIR}/wovtools/secrets/vh_${WOV_NS}_id_rsa.pub ${WOV_NS}/vh:/root/.ssh/id_rsa.pub


  # untested lines here
  kubectl cp ${WOV_BASEDIR}/wovtools/cache/conf/vh/bash_aliases ${WOV_NS}/vh:/root/.bash_aliases
  kubectl cp ${WOV_BASEDIR}/wovtools/cache/conf/vh/inputrc ${WOV_NS}/vh:/root/.inputrc

cat <<EOF


 =====================================================================
 =====================================================================
    ____
   / ___| _   _  ___ ___ ___  ___ ___
   \___ \| | | |/ __/ __/ _ \/ __/ __|
    ___) | |_| | (_| (_|  __/\__ \__ \\
   |____/ \__,_|\___\___\___||___/___/

 =====================================================================
 =====================================================================

Created virtual machine for developemnt. (type 'wov-ns' to see)

           Connect: 'wov-pshell vh'   <-- wovpshell is a utility
                                            to connect to any K8s pod
                or: 'wov-v -l'          <-- shortcut

=====================================================================

EOF
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-s" ]; then
    shift
    doStart

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


if [ ${DIDCOMMAND} == 0 ]; then
  printf "\n\nERROR: no command given.\n\n"
  fDisplayOptions
  exit 1
fi
