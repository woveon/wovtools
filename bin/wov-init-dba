#!/usr/bin/env bash


function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] [microservice]

Creates a microservice Database Archive. Called by wov-init normally. By default it is in interactive mode unless --repo is set.

  --exists-check  : does the Database Archive exist?
  --repo          : sets the Git repository to link Database Archive to. Skips interactive mode.

EOF
}

. wov-env-ops fDisplayOptions "$@"

# Temporary storage
REPO=

# --------------------------------------------------------------------
# Does it exist?
# returns 0 on successfully found, 1 on error not found
# --------------------------------------------------------------------
function isDatabaseArchive()
{
  let retval=1
  if [ -e "${WOV_BASEDIR}/wovtools/db" ] &&
    [ -e "${WOV_BASEDIR}/wovtools/db/archive" ] &&
    [ -e "${WOV_BASEDIR}/wovtools/db/archive/.git" ] &&
    [ -e "${WOV_BASEDIR}/wovtools/db/archive/.gitignore" ] &&
    [ -e "${WOV_BASEDIR}/wovtools/db/archive/.git/config" ]; then
    l_verbose "ARCHIVE> Database Registry exists (at wovtools/db/archive)"
    retval=0
  fi
  return $retval
}

# --------------------------------------------------------------------
# --------------------------------------------------------------------
function doInteractiveBuildDatabaseArchive()
{
  read -r -p "ARCHIVE> Database Archive Git location: (\"${WOV_DBARCHIVE}\") ... Correct? [Y/n] " A
  if [ "${A}" != "" ]; then WOV_DBARCHIVE="${A}"; fi

  doBuildDatabaseArchive
}


# --------------------------------------------------------------------
# --------------------------------------------------------------------
function doBuildDatabaseArchive()
{

  l_ "  ... wovtools/db/archive : Git repo ${WOV_DBARCHIVE}"

  # ensure directory
  if [ ! -e "${WOV_BASEDIR}/wovtools/db/archive" ]; then
    mkdir -p ${WOV_BASEDIR}/wovtools/db/archive
  fi
  chmod -R 700 "${WOV_BASEDIR}/wovtools/db"

  # make gitignore
  if [ ! -e "${WOV_BASEDIR}/wovtools/db/archive/.gitignore" ]; then
    cat <<EOF > ${WOV_BASEDIR}/wovtools/db/archive/.gitignore
*.swp
EOF
  fi

  WOV_DBARCHIVE=`git config --get remote.origin.url`
  WOV_DBARCHIVE="${WOV_DBARCHIVE%.git}_db.git"
  if [ "$?" != "0" ]; then
    printf "\nERROR: remote origin is not set for this repository.\n"
    printf "  Use 'git remote add origin X' to set your remote repository.\n\n"
    exit 1
  fi
  #  WOV_DBARCHIVE="${WOV_DBARCHIVE::-4}_archive.git"


  # make git repository
  cd ${WOV_BASEDIR}/wovtools/db/archive && git init -q

  # configure it
  cat <<EOF > ${WOV_BASEDIR}/wovtools/db/archive/.git/config
[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  ignorecase = true
  precomposeunicode = true
[remote "origin"]
  url = ${WOV_DBARCHIVE}
  fetch = +refs/heads/*:refs/remotes/origin/*
[user]
  name = ${WOV_USERNAME}
  email = ${WOV_USEREMAIL}
[branch "master"]
  remote = origin
  merge = refs/heads/master
EOF

  echo "  ...add to Database Archive Git repo"
  local R=$(git -C "${WOV_BASEDIR}/wovtools/db/archive" add .gitignore) ; Re=$?
  if [ $Re != 0 ]; then
    >&2 echo "ERROR: failed to add .gitignore to DB Archive. go to wovtools/db/archive and 'git status'"
    >&2 echo "  : ${R}"
  fi

  echo "  ...initial Database Archive Git commit"
  local R=$(git -C "${WOV_BASEDIR}/wovtools/db/archive" commit -a -m "Initial Database Archive Git Commit for: ${WOV_PROJECT}") ; Re=$?
  if [ $Re != 0 ]; then
    >&2 echo "ERROR: failed to commit DB Archive. go to wovtools/db/archive and 'git status'"
    >&2 echo "  : ${R}"
  fi

  echo "  ...initial Database Archive Git push"
  git -C "${WOV_BASEDIR}/wovtools/db/archive" push
}


# ---------------------------------------------------------------------
# Command line processing
while [[ $1 =~ ^- ]]; do

  if [ "$1" == '--exists-check' ]; then
    shift
    isDatabaseArchive
    exit $?

  elif [ "$1" == "--repo" ]; then
    shift
    REPO="$1"
    shift

  else
    echo
    echo "***ERROR (`basename $0`): unknown option '$1'."
    echo
    exit 1
  fi

done

if  [ ${WOV_DODEFAULTCOMMAND} -eq 1 ]; then 
  if [ "$REPO" == "" ]; then
    doInteractiveBuildDatabaseArchive
  else
    WOV_DBARCHIVE=${REPO}
    doBuildDatabaseArchive
  fi
fi

