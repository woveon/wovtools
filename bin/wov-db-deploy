#!/usr/bin/env bash
  

# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when deploying content.\n\n"
  exit 1
fi
dbdeployargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${dbdeployargs[@]}"

DOECHO=1
DOFORCE=0
FOLD=$(tput cols)
PVERTARGET=${WOV_PVER}
WOVDB_DBNAME=
DRYRUN=1




# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {files ...}

Deploys a database to the current PVER version. 

  i.e. this is a roll forward...

NOTE: for now, lists db changes to run.

  -D X     : sets stateful database server name
  --pver X : target pver to deploy to (default is current PVER)
  -h       : this help
  -q/-v    : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function doGenDBDeltas()
{
  # get 
  OLDIFS=$IFS
  IFS='|'
  dbverarray=( $(wov-db-cloud -D ${WOVDB_DBNAME} --ver)  )
  IFS=$OLDIFS

  DB_TARGET=$1 # target
  DB_CUR="$(echo -e "${dbverarray[4]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
  C=${DB_TARGET}

  # check if current DB_TARGET exists
  DB_TARGET_CHECK=$(cat ${WOV_BASEDIR}/wovtools/db/archive/${WOVDB_DBNAME}.json | jq -r '.versions["'${C}'"]')
  if [ "${DB_TARGET_CHECK}" == "null" ]; then
    printf "\nERROR: current DB_TARGET does not exist. Find the largest version smaller than yours.\n"
    DB_TARGET_CHECK=( $(cat ${WOV_BASEDIR}/wovtools/db/archive/${WOVDB_DBNAME}.json | jq -r '.versions | to_entries[] | .key' | sort) )
    printf "  ...existing versions: ${DB_TARGET_CHECK[*]}\n"
    printf "  ... set target with '--pver X'\n"
    exit 1
  fi

  ORDER=( "$C" )
  # Start at targe and work back
  while [ "$C" != "" ] && [ "$C" != "${DB_CUR}"  ]; do
    echo "db recurse at $C, going back to ${DB_CUR}, from db target ${DB_TARGET}"
    parray=( $(cat ${WOV_BASEDIR}/wovtools/db/archive/${WOVDB_DBNAME}.json | jq -r '.versions["'${C}'"].parent | .type, .pver, .snapshot') )
    # echo "parray :${parray[@]}"
    C=${parray[1]}
    ORDER=( "${C}" "${ORDER[@]}" )
    echo "order :${ORDER[@]}"
  done

  echo "order :${ORDER[@]}"

  # build deltas
  for i in "${ORDER[@]}"; do
    #if [ "$(cat ${WOV_BASEDIR}/wovtools/db/archive/${WOVDB_DBNAME}.json | jq -r '.versions["'${C}'"].parent.snapshot') )
    printf "\n# = wov-db-deploy =====================================================\n" 
    cat ${WOV_BASEDIR}/wovtools/db/archive/${WOVDB_DBNAME}/$i.deltas
  done

}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
printf "\n"
figlet $(basename $0)
printf " version: ${WOV_STAGE}_${WOV_PVER}_${WOV_SVER}\n"

#figlet WARNING
echo "WARNING: SKIPPING db commit checks for dev purposes, for acutal roll, check first"
#if [ "$(wov-push-db -pc)" != "0" ]; then
#  echo "ERROR: need to commit current db settings before deploy"
#  exit 1
#fi


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-D" ]; then
    shift
    WOVDB_DBNAME=$1
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "--pver" ]; then
    shift
    PVERTARGET="$1"
    shift

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




echo "calling with pver ${PVERTARGET}"
doGenDBDeltas ${PVERTARGET}
