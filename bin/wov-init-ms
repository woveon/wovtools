#!/usr/bin/env bash


DOECHO=1
FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib

REPO_PROVIDER=
CMD_MS=0
MSTYPE=
CMD_REPO=0
CMD_RECIPE=0
CMD_K8S=0
CMD_INGRESS=0
CMD_DEPLOYMENT=0
CMD_SERVICE=0
MSDIR=
SINGLEPROJ=0


function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` (options) [microservicecode]

Creates a microservice boilerplate inside a project.

  --repo-entry PROVIDER
               : build the remote ArchiveRepository entry (i.e. a Git repo)
               : 'aws' is only provider so far

  --ms         : fully build microservice X. Includes Recipe and K8s (but not repo).
   --ms-type X : Specific type of microservice:
           'woveonservice' - A WoveonService based microservice, in nodejs.
           'nodejs'        - A nodejs microservice.

  --recipe     : build microservice recipe for X
               : A recipe is the commands to build the content for and the actual Docker container.

  --single-project : This project has one microservice.

 Kubernetes files...
  --k8s    : build all Kubernetes boilerplate for microservice X
    --ing  : build Kubernetes Ingress boilerplate for microservice X
    --dep  : build Kubernetes Deployment boilerplate for microservice X
    --serv : build Kubernetes Service boilerplate for microservice X


EOF
}

. wov-env-ops fDisplayOptions "$@"


# ---------------------------------------------------------------------
# $1 - project
# $2 - provider
# TODO - move this to an AWS specific file that gets called
# ---------------------------------------------------------------------
function doRepoMicroservice()
{
  local MSC=$1
  local provider=$2
  l_debug "  ...checking if container repo is an AWS ECR '${1}' '${2}'"

  if [ "${provider}" == "aws" ]; then
    if [[ "${WOV_CONTAINERARCHIVE}" == *.dkr.ecr.*.amazonaws.com ]]; then
      l_verbose "  ... ensuring an AWS ECR repository: ${WOV_PROJECT}/${WOV_PROJECT}${MSC}"
      aws ecr create-repository --repository-name "${WOV_PROJECT}/${WOV_PROJECT}${MSC}"
      if [ $? -ne 0 ]; then
        l_error "Could not create AWS CodeCommit repository of '${WOV_PROJECT}/${WOV_PROJECT}/${MSC}' for microservice '${WOV_PROJECT}${MSC}'."
        exit 1
      fi
    fi
  else
    l_error "Unknown providers '${provider}'. WOV_CONTAINERARCHIVE is '${WOV_CONTAINERARCHIVE}'."
    exit 1
  fi
}


function doBuildMicroservice_pre()
{
  l_debug "doBuildMicroservice_pre '${1}' '${2}'"
  local mscode="$1"
  local makeconfig="$2"

  if [ ! -e "${MSDIR}/src" ]; then
    l_ "  ...make MS directory and src: '${MSDIR}'"
    mkdir -p "${MSDIR}/src"
  fi

  if [ "$makeconfig" == "true" ]; then
    echo "  ...creating: src/${WOV_PROJECT}${mscode}config.sh"

    # Init the file for config incorporation into microservices
    if [ ! -e "${MSDIR}/src/${WOV_PROJECT}${mscode}config.sh" ]; then
      touch "${MSDIR}/src/${WOV_PROJECT}${mscode}config.sh"
      chmod 700 "${MSDIR}/src/${WOV_PROJECT}${mscode}config.sh"
      cat <<EOF > "${MSDIR}/src/${WOV_PROJECT}${mscode}config.sh"
#!/usr/bin/env bash

# This file lists the SPECIFIC ENV variables used by your microservice. Both the
# basic (i.e. Kubernetes ConfigMaps) and secrets (i.e. Kubernetes
# Secrets).
#
# List ALL the env vars: (as compiled by merging your secrets files in wovtools/secrets/*)
#   wov-env --envs
#
# List the ConfigMap env vars:
#   wov-env --cm ${WOV_PROJECT}${mscode}
#
# List the Secrets env vars:
#   wov-env --se ${WOV_PROJECT}${mscode}
#
# NOTE: WOV_${WOV_PROJECT}_port below will be empty until a json entry
#       is created in a file like: wovtools/secrets/${WOV_PROJECT}.json.
#
# NOTE: The woveon-service NodeJS package is designed to integrate
#       config information without this .sh file. See it for more
#       information if you are using NodeJS.

if [ "\$1" == "cm" ]; then
  echo "WOV_${WOV_PROJECT}${mscode}_port=\${WOV_${WOV_PROJECT}${mscode}_port}"
#elif [ "\$1" == "se" ]; then
fi
EOF
      # Add to git
      git add "${MSDIR}/src/${WOV_PROJECT}${mscode}config.sh"
      if [ $? -ne 0 ]; then l_error "Could not add '${WOV_PROJECT}${mscode}config.sh' to git."; exit 1; fi
    fi
  fi
}


# ---------------------------------------------------------------------
# $1 - name of ms
# ---------------------------------------------------------------------
function doBuildMicroservice_NodeJS()
{
  l_debug "doBuildMicroservice_NodeJS '$1'"
  local mscode="$1"
  local f=

  doBuildMicroservice_pre $mscode "true"

  l_ "  ...make a nodejs file"
  f="${MSDIR}/src/index.js"
  if [ ! -e "${f}" ]; then
    cat <<EOFF > "${f}"
console.log('${WOV_PROJECT}${mscode}');
EOFF
    # Add to git
    git add "${f}"
    if [ $? -ne 0 ]; then l_error "Could not add 'src/index.js' to git."; exit 1; fi
  fi


  l_verbose '  ...make a nodejs package and set license to UNLICENSED'
  f="${MSDIR}/package.json"
  if [ ! -e "${f}" ]; then
    cd ${MSDIR} ; yarn init --yes
    jqrule=".license=\"UNLICENSED\" | .version=\"0.0.1\" | .main=\"src/index.js\" | .scripts.start=\"node src\" "
    jq -r "${jqrule}" "${MSDIR}/package.json" > "${MSDIR}/package.json_" ; \
      mv "${MSDIR}/package.json_" "${MSDIR}/package.json"

    cd ${MSDIR} ; yarn install

    # Add to git
    git add "${MSDIR}/package.json"
    if [ $? -ne 0 ]; then l_error "Could not add 'package.json' to git."; exit 1; fi
  fi

  local base=$(git rev-parse --show-toplevel)
  l_debug "add in to gitignore : ${base}/.gitignore : NOTE: could be .gitignore or ../.gitignore, depending on 'single/many' project type"
  if [ ! -e "${base}/.gitignore" ]; then echo "ERROR: " ; exit 11; fi
  touch "${base}/.gitignore"
  GITLINES=( "node_modules" "yarn.lock" )
  for f in "${GITLINES[@]}"; do
    l_debug "  ... adding to .gitignore: $f"
    if ! grep -qF "${f}" "${base}/.gitignore" ; then echo "${f}" >> "${base}/.gitignore" ; fi
  done

  doBuildMicroservice_base $mscode
}


# ---------------------------------------------------------------------
# $1 - name of ms
# ---------------------------------------------------------------------
function doBuildMicroservice_WoveonService()
{
  l_debug "doBuildMicroservice_WoveonService '$1'"
  local mscode="$1"
#  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"

  doBuildMicroservice_pre $mscode "false"

  l_ "  ...make a nodejs file"
  f="${MSDIR}/src/index.js"
  if [ ! -e "${f}" ]; then
    cat <<EOFF > "${f}"
console.log('${WOV_PROJECT}${mscode}');
EOFF

    # Add to git
    git add "${MSDIR}/src/index.js"
    if [ $? -ne 0 ]; then l_error "Could not add 'src/index.js' to git."; exit 1; fi
  fi


  f="${MSDIR}/src/${WOV_PROJECT}${mscode}config.js"
  l_debug "  ...make config file : ${f}"
  if [ ! -e "${f}" ]; then
    cat <<EOFF > "${f}"
module.exports = class TConfig extends require('woveon-service').Config {

  /**
   * @param {Logger} _logger - for log spew
   */
  constructor(_logger) {
    super(_logger, 

    // Config Secrets
    [

      // example database values
      // 'WOV_${WOV_PROJECT}db_username',     // ex. 'postgres'
      // 'WOV_${WOV_PROJECT}db_endpoint',     // 'localhost' for ssh tunneling, AWS db for pod
      // 'WOV_${WOV_PROJECT}db_database',     // database name
      // 'WOV_${WOV_PROJECT}db_port',         // ssh tunneling port, or postgres default port 5432
      // 'WOV_${WOV_PROJECT}db_type',         // postgres, mongo, etc.

      // microservice calls to it
      'WOV_${WOV_PROJECT}${mscode}_ver',
      'WOV_${WOV_PROJECT}${mscode}_port',

      // server ingress location
      'WOV_www_api_urlscheme',
      'WOV_www_api_url',
    ],

    // Secret Secrets
    [
      // example for database values
      // 'WOV_${WOV_PROJECT}db_password',
    ]); 
  };
};
EOFF

    # Add to git
    git add "${f}"
    if [ $? -ne 0 ]; then l_error "Could not add '${f}' to git."; exit 1; fi
  fi

  l_verbose '  ...make a nodejs package and set license to UNLICENSED'
  f="${MSDIR}/package.json"
  if [ ! -e "${f}" ]; then
    cd ${MSDIR} ; yarn init --yes
    jqrule=".license=\"UNLICENSED\" | .version=\"0.0.1\" | .main=\"src/index.js\" | .scripts.start=\"node src\" "
    jq -r "${jqrule}" "${MSDIR}/package.json" > "${MSDIR}/package.json_" ; \
      mv "${MSDIR}/package.json_" "${MSDIR}/package.json"
    cd ${MSDIR} ; yarn add woveon-service

    cd ${MSDIR} ; yarn install

    # Add to git
    git add "${f}"
    if [ $? -ne 0 ]; then l_error "Could not add 'package.json' to git."; exit 1; fi
  fi

  local base=$(git rev-parse --show-toplevel)
  l_debug "add in to gitignore : ${base}/.gitignore : NOTE: could be .gitignore or ../.gitignore, depending on 'single/many' project type"
  if [ ! -e "${base}/.gitignore" ]; then echo "ERROR: " ; exit 11; fi
  touch "${base}/.gitignore"
  GITLINES=( "node_modules" "yarn.lock" )
  for f in "${GITLINES[@]}"; do
    l_debug "  ... adding to .gitignore: $f"
    if ! grep -qF "${f}" "${base}/.gitignore" ; then echo "${f}" >> "${base}/.gitignore" ; fi
  done

  doBuildMicroservice_base $mscode
}


# ---------------------------------------------------------------------
# $1 - name of ms
# ---------------------------------------------------------------------
function doBuildMicroservice()
{
  local mscode=$1

  doBuildMicroservice_pre $mscode "true"

  doBuildMicroservice_base $mscode

#   # Add to git
#  git add ${WOV_BASEDIR}/${WOV_PROJECT}${MSCODE}
#  if [ $? -ne 0 ]; then l_error "git could not add newly created project files for some reason."; exit 1; fi
}


# ---------------------------------------------------------------------
# $1 - name of ms
# ---------------------------------------------------------------------
function doBuildMicroservice_base()
{
  local mscode=$1
  local mscode_l="$(echo ${mscode} | tr '[:upper:]' '[:lower:]')"
  local jqrule=
  local msentry=

  doCreateMSRecipe $mscode

  # l_ '  ...check into git'
#  git add "${MSDIR}/src/index.js" "${MSDIR}/package.json" \
#          "${MSDIR}/src/${msname}config.js" "${MSDIR}/wovtools/msrecipes/${msname}"

  l_ '  ...make secret for MS'
  f="${WOV_BASEDIR}/wovtools/secrets/${WOV_MASTERPROJECT}.json"

  msentry=$(cat <<EOF
{
  "containerfrom" : "node:12.6-alpine",
  "ver"           : "v1",
  "port"          : 80,
  "healthpath"    : "/${WOV_PROJECT}${mscode}/v1/pub/health",
  "healthprobetime" : 90,
  "ORIGINlocal"  : {"port" : 75643, "//port" : "make sure you have no conflicts"}
}
EOF
)

  # create the file in secrets or append to it
  l_debug 'create the file in secrets'
  l_debug " msentry : ${msentry}"
  if [ ! -e "${f}" ]; then
    echo $msentry > "${f}"

    # Add to git
    git -C "${WOV_BASEDIR}/wovtools/secrets" add "${WOV_MASTERPROJECT}.json"
    if [ $? -ne 0 ]; then l_error "Could not add '${WOV_MASTERPROJECT}.json' to Secrets Local Archive's git."; exit 1; fi

  else # [ "$(jq -r \".${WOV_PROJECT}${mscode}\" ${f})" == "null" ]; then
    jq -r ".${WOV_PROJECT}${mscode} |= ${msentry}" "${f}"  > "${f}.1"
    if [ $? -eq 0 ]; then mv "${f}.1" "${f}"; 
    else l_error "Failed adding to '${WOV_MASTERPROJECT}.json' file in secrets."; exit 1; fi
  fi

#  # TODO - when append to exising msname.json file, these lines are not needed
#  l_ "  ...add MS json file to myconfig if not in it"
#  jq -r ".secrets.${WOV_ME}[]" ${WOV_CONFIGFILE_MINERAW} | grep "${msname}.json" > /dev/null
#  if [ $? -eq 1 ]; then
#    jqrule=".secrets.${WOV_ME}[ .secrets.${WOV_ME} | length ] |= . + \"${msname}.json\" "
#    jq -r "${jqrule}" "${WOV_CONFIGFILE_MINERAW}" > "${WOV_CONFIGFILE_MINERAW}_" ; \
#      mv "${WOV_CONFIGFILE_MINERAW}_" "${WOV_CONFIGFILE_MINERAW}"
#  fi
#
#  l_ "  ...add MS json file to config dev and prod if not in it"
#  jq -r ".secrets.dev[]" ${WOV_CONFIGFILE_MAINRAW} | grep "${msname}.json" > /dev/null
#  if [ $? -eq 1 ]; then
#    jqrule=".secrets.dev[ .secrets.dev | length ] |= . + \"${msname}.json\" "
#    jq -r "${jqrule}" "${WOV_CONFIGFILE_MAINRAW}" > "${WOV_CONFIGFILE_MAINRAW}_" ; \
#      mv "${WOV_CONFIGFILE_MAINRAW}_" "${WOV_CONFIGFILE_MAINRAW}"
#  fi
#  jq -r ".secrets.prod[]" ${WOV_CONFIGFILE_MAINRAW} | grep "${msname}.json" > /dev/null
#  if [ $? -eq 1 ]; then
#    jqrule=".secrets.prod[ .secrets.prod | length ] |= . + \"${msname}.json\" "
#    jq -r "${jqrule}" "${WOV_CONFIGFILE_MAINRAW}" > "${WOV_CONFIGFILE_MAINRAW}_" ; \
#      mv "${WOV_CONFIGFILE_MAINRAW}_" "${WOV_CONFIGFILE_MAINRAW}"
#  fi
#  # /TODO
  

  
  # Ensure wovtools/myconfig.json has .secrets.STAGE, based upon _dev entry
  # - read in dev entry
  # - remove _dev extentions, replacing with _STAGE
  

  doCreateK8s $mscode
}


# $1 - ms name
function doCreateMSRecipe()
{
  local mscode="$1"
  local mscode_l="$(echo ${mscode} | tr '[:upper:]' '[:lower:]')"

  l_ "  ...Make microservice recipe"
  f="${WOV_BASEDIR}/wovtools/msrecipes/${mscode}"
  if [ ! -e "${f}" ]; then
    cat <<EOFFF > "${f}"
#!/usr/bin/env bash

if [ \$DOECHO -ge 2 ]; then echo "  ... add src"; fi
# ---------------------------------------------------------------------
rsync -ai \\
    --exclude etc --exclude doc --exclude Makefile --exclude README.md \\
    --exclude ".*.swp" --exclude ".*.mk" --exclude ".DS_Store" \\
    --delete --delete-excluded \\
    \${MSDIR}/src/* \${DESTDIR}/src/

#if [ \$DOECHO -ge 2 ]; then echo "  ... add node_modules"; fi
# ---------------------------------------------------------------------
#rsync -ai \\
#    --exclude etc --exclude doc --exclude Makefile --exclude README.md \\
#    --exclude ".*.swp" --exclude ".*.mk" --exclude ".DS_Store" \\
#    --delete --delete-excluded \\
#    \${MSDIR}/node_modules/*  \${DESTDIR}/node_modules

if [ \$DOECHO -ge 2 ]; then echo "  ... add individual files"; fi
# ---------------------------------------------------------------------
echo "  ... add index.js, package.json, package-lock.json"
if [ -e "\${MSDIR}/index.js" ]; then cp \${MSDIR}/index.js \${DESTDIR}/. ; fi
if [ -e "\${MSDIR}/package.json" ]; then cp \${MSDIR}/package.json \${DESTDIR}/. ; fi

# If you need to install private repos, you can add your ssh key to the container here
# if [ \$DOECHO -ge 2 ]; then echo "    ... add ssh key (NOTE: IT IS REMOVED FROM THE CONTAINER FOR YOU!!!)"; fi
# ---------------------------------------------------------------------
# cp \${HOME}/.ssh/id_rsa \${DESTDIR}/id_rsa

# NOTE: WORKDIR is /usr/src/app for all stages

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for pre-build"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/pre-build.docker
EOF

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for build"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/build.docker
RUN npm install
EOF

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for run"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/run.docker

# Define default port
ENV APP_PORT_INT 80

# Run command
CMD  [ "npm", "run", "start" ]
EOF
EOFFF
    chmod 700 "${f}"

    # Add to git
    git add ${WOV_BASEDIR}/wovtools/msrecipes/${MSCODE}
    if [ $? -ne 0 ]; then l_error "Could not add recipe to git."; exit 1; fi
  fi

}

# $1 - ms name
function doCreateK8s()
{
  l_ "  ...k8s directory (${1})"
  mkdir -p "${WOV_BASEDIR}/wovtools/k8s"

  doCreateK8sService $1
  doCreateK8sDeployment $1
  doCreateK8sIngress $1
}


# $1 - ms name
# Let's keep ingress at the project level... so multiple ingress entries will exist, managed by each project
function doCreateK8sIngress()
{
  local mscode="$1"
  local mscode_l="$(echo ${mscode} | tr '[:upper:]' '[:lower:]')"
  local msname="${WOV_PROJECT}${mscode}"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"

  l_debug "mscode '${mscode}'"
  l_debug "msname '${msname}'"

  f="${WOV_BASEDIR}/wovtools/k8s/${WOV_PROJECT}-ingress.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping ingress base k8s"
  else
    l_ "  ...adding ingress base k8s"
    cat <<EOF > ${f}
# Kubernetes Ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{lc MASTERPROJECT}}-{{lc PROJECT}}-ingress
  namespace: {{lc PROJECT}}-{{lc STAGE}}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.org/websocket-services: "{{lc PROJECT}}socket"
spec:
  rules:
  - host: api-{{lc STAGE}}.{{cluster.dns.domain}}
    http:
      paths:
EOF

    # add to git
    git add ${f}
    if [ $? -ne 0 ]; then l_error "git could not add ingress to git."; exit 1; fi
  fi

  R=$(cat ${f} | grep "path: /${msname_l}/" | wc -l | tr -d "[:space:]")
  if [ "$R" != "0" ]; then
    l_ "  ...checking for ingress paths '/${msname_l}/', found '${R}' so skipping"
  else
    l_ "  ...adding ingress paths '/${msname_l}/'"
    cat <<EOF >> ${f}

      # ---------------------------------------------------------------------
      # ${msname_l}
      # ---------------------------------------------------------------------
\{{#if_eq {{STAGE}} "prod"}}
\{{else}}
      # open up private only if not in production
      # ---------------------------------------------------------------------
      - path: /${msname_l}/{{${msname}.ver}}/priv
        backend:
          serviceName: ${msname_l}
          servicePort: 80

      # open up doc only if not in production
      # ---------------------------------------------------------------------
      - path: /${msname_l}/{{${msname}.ver}}/doc
        backend:
          serviceName: ${msname_l}
          servicePort: 80
\{{/if_eq}}
      # pub
      # ---------------------------------------------------------------------
      - path: /${msname_l}/{{${msname}.ver}}/pub
        backend:
          serviceName: ${msname_l}
          servicePort: 80
EOF
  fi
 
}


# $1 - ms name
function doCreateK8sService()
{
  local mscode="$1"
  local mscode_l="$(echo ${mscode} | tr '[:upper:]' '[:lower:]')"
  local msname="${WOV_PROJECT}${mscode}"
  local msname_l="$(echo "${WOV_PROJECT}${mscode}" | tr '[:upper:]' '[:lower:]')"
 
  f="${WOV_BASEDIR}/wovtools/k8s/${msname}-service.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping service k8s"
  else
    l_ "  ...adding service k8s"
    cat <<EOF >> ${f}
# Kubernetes Service
apiVersion: v1
kind: Service
metadata:
  name: ${msname_l}
  namespace: {{lc PROJECT}}-{{lc STAGE}}
  labels:
    app: ${msname_l}
spec:
  selector:
    app: ${msname_l}
  ports:
  - port: 80
    protocol: TCP
    targetPort: {{${msname}.port}}
EOF

    # add to git
    git add ${f}
    if [ $? -ne 0 ]; then l_error "git could not add K8s Service to git."; exit 1; fi
  fi

}


# $1 - ms name
function doCreateK8sDeployment()
{
  local mscode="$1"
  local msname="${WOV_PROJECT}${mscode}"
  local msname_l="$(echo "${WOV_PROJECT}${mscode}" | tr '[:upper:]' '[:lower:]')"

  f="${WOV_BASEDIR}/wovtools/k8s/${msname}.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping deployment k8s"
  else
    l_ "  ...adding deployment k8s"
    cat <<EOF >> ${f}
# Kubernetes Deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ${msname_l}
  namespace: {{lc PROJECT}}-{{lc STAGE}}
spec:
  template:
    metadata:
      labels:
        app: ${msname_l}
    spec:
      containers:
        - image: {{CONTAINERARCHIVE}}/{{PROJECT}}/${msname_l}:{{lc STAGE}}_{{PVER}}
          name: ${msname_l}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          envFrom:
          - secretRef:
              name: ${msname_l}
          - configMapRef:
              name: ${msname_l}
          livenessProbe:
            httpGet:
              path: \\{{${msname}.healthpath}}
              port: 80
            initialDelaySeconds: 3
            periodSeconds: \\{{${msname}.healthprobetime}}
EOF

    # Add to Git
    git add ${f}
    if [ $? -ne 0 ]; then l_error "git could not add K8s Deployment to git."; exit 1; fi
  fi

}


# ---------------------------------------------------------------------
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-e' ]; then
    ECHOMODE=1

  elif [ "$1" == '--repo-entry' ]; then
    CMD_REPO=1
    shift
    REPO_PROVIDER=$1
  elif [ "$1" == '--ms' ]; then
    CMD_MS=1
  elif [ "$1" == '--ms-type' ]; then
    shift
    MSTYPE=$1
  elif [ "$1" == '--recipe' ]; then
    CMD_RECIPE=1
  elif [ "$1" == '--k8s' ]; then
    CMD_K8S=1
  elif [ "$1" == '--ing' ]; then
    CMD_INGRESS=1
  elif [ "$1" == '--dep' ]; then
    CMD_DEPLOYMENT=1
  elif [ "$1" == '--serv' ]; then
    CMD_SERVICE=1

  elif [ "$1" == "--single-project" ]; then
    SINGLEPROJ=1

  else
    echo
    fDisplayOptions
    echo "***ERROR (`basename $0`): unknown option '$1'."
    echo
    exit 1
  fi
  shift
done


if  [ ${WOV_DODEFAULTCOMMAND} -eq 1 ]; then

  if [ "${1}" == "" ]; then
    fDisplayOptions
    l_error "ERROR: need a name for this new microservice."
    exit 1
  else MSCODE=$1; fi

  l_debug   "MSCODE         ${MSCODE}"
  l_verbose "CMD_REPO       ${CMD_REPO}"
  l_verbose "CMD_RECIPE     ${CMD_RECIPE}"
  l_verbose "CMD_K8S        ${CMD_K8S}"
  l_verbose "CMD_INGRESS    ${CMD_INGRESS}"
  l_verbose "CMD_DEPLOYMENT ${CMD_DEPLOYMENT}"
  l_verbose "CMD_SERVICE    ${CMD_SERVICE}"

  # Set the microservice directory
  if [ ${SINGLEPROJ} -eq 1 ]; then MSDIR="${WOV_BASEDIR}"; 
  else MSDIR="${WOV_BASEDIR}/${WOV_PROJECT}${MSCODE}"; fi

  # create repo if set
  if [ ${CMD_REPO} -eq 1 ]; then doRepoMicroservice ${MSCODE} ${REPO_PROVIDER}; fi

  # ms does all
  if [ ${CMD_MS} -eq 1 ]; then
    case ${MSTYPE} in 
      "woveonservice")
        doBuildMicroservice_WoveonService ${MSCODE}
        ;;
      "nodejs")
        doBuildMicroservice_NodeJS ${MSCODE}
        ;;
      "")
        doBuildMicroservice ${MSCODE};
        ;;
      *)
        fDisplayOptions
        l_error "Unknown microservice type of '${MSTYPE}'."
        exit 1;
    esac
  else

    # k8s does the following 3
    if [ ${CMD_K8S} -eq 1 ]; then
      l_debug 'asdfsadfad'
      doCreateK8s ${MSCODE}
    else

      # check each individually
      if [ ${CMD_DEPLOYMENT} -eq 1 ]; then doCreateK8sDeployment ${MSCODE}; fi
      if [ ${CMD_SERVICE} -eq 1 ]; then doCreateK8sService ${MSCODE}; fi
      if [ ${CMD_INGRESS} -eq 1 ]; then doCreateK8sIngress ${MSCODE}; fi
    fi
  fi

  # MS Container recipe
  if [ "${CMD_RECIPE}" -eq 1 ]; then doCreateMSRecipe ${MSCODE}; fi

  git commit -m "Inited microservice '${WOV_PROJECT}${MSCODE}' with wov-init-ms."
  if [ $? -ne 0 ]; then l_error "git could not commit git."; exit 1; fi

fi

