#!/usr/bin/env bash

COMMAND=MS

function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] [microservice]

Creates a microservice boilerplate inside a project.

  --ms X     : fully build microservice X
  --recipe X : build microservice recipe for X

 Kubernetes files...
  --k8s X  : build all Kubernetes boilerplate for microservice X
  --ing X  : build Kubernetes Ingress boilerplate for microservice X
  --dep X  : build Kubernetes Deployment boilerplate for microservice X
  --serv X : build Kubernetes Service boilerplate for microservice X


EOF
}

. wov-env-ops fDisplayOptions "$@"




# ---------------------------------------------------------------------
# $1 - name of ms
# ---------------------------------------------------------------------
function doBuildMicroservice()
{
  local msname="$1"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"
  local f=
  local jqrule=


  l_ "  ...make MS directory and src"
  mkdir -p "${WOV_BASEDIR}/${msname}/src"

  l_ "  ...make a nodejs file"
  f="${WOV_BASEDIR}/${msname}/src/index.js"
  if [ ! -e "${f}" ]; then
    cat <<EOFF > "${f}"
console.log('${msname}');
EOFF
  fi

  l_ "  ...make MSNAMEconfig.js file"
  f="${WOV_BASEDIR}/${msname}/src/${msname}config.js"
  if [ ! -e "${f}" ]; then
    cat <<EOFF > "${f}"
module.exports = class TConfig extends require('woveon-service').Config {

  /**
   * @param {Logger} _logger - for log spew
   */
  constructor(_logger) {
    super(_logger, [
      'WOV_${WOV_PROJECT}db_username',     // ex. 'postgres'
      'WOV_${WOV_PROJECT}db_endpoint',     // 'localhost' for ssh tunneling, AWS db for pod
      'WOV_${WOV_PROJECT}db_database',     // database name
      'WOV_${WOV_PROJECT}db_port',         // ssh tunneling port, or postgres default port 5432
      'WOV_${WOV_PROJECT}db_type',         // postgres, mongo, etc.

      // microservice calls to it
      'WOV_${msname}_ver',
      'WOV_${msname}_port',

      'WOV_www_${WOV_PROJECT}_urlscheme',
      'WOV_www_${WOV_PROJECT}_url',
    ],
    ['WOV_${WOV_PROJECT}db_password']);  // random: try 'openssl rand -hex 40'
  };
};
EOFF
  fi

  doCreateMSRecipe $1

  l_ '  ...make a nodejs package and set license to UNLICENSED'
  f="${WOV_BASEDIR}/${msname}/package.json"
  if [ ! -e "${f}" ]; then
    cd ${WOV_BASEDIR}/${msname} ; yarn init --yes
    jqrule=".license=\"UNLICENSED\" | .version=\"0.0.1\" | .main=\"src/index.js\" | .scripts.start=\"node src\" "
    jq -r "${jqrule}" "${WOV_BASEDIR}/${msname}/package.json" > "${WOV_BASEDIR}/${msname}/package.json_" ; \
      mv "${WOV_BASEDIR}/${msname}/package.json_" "${WOV_BASEDIR}/${msname}/package.json"
  fi

  # l_ '  ...check into git'
#  git add "${WOV_BASEDIR}/${msname}/src/index.js" "${WOV_BASEDIR}/${msname}/package.json" \
#          "${WOV_BASEDIR}/${msname}/src/${msname}config.js" "${WOV_BASEDIR}/wovtools/msrecipes/${msname}"

  l_ '  ...make secret for MS'
  f="${WOV_BASEDIR}/wovtools/secrets/${msname}.json"
  if [ ! -e "${f}" ]; then
    cat <<EOF > "${f}"
{
  "${msname}" : {
    "containerfrom" : "node:12.6-alpine",
    "ver"           : "v1",
    "port"          : 80,
    "healthpath"    : "/${msname}/v1/pub/health",
    "healthprobetime" : 90,
    "ORIGINlocal"  : {"port" : 75643}
  }
}
EOF
  fi

  l_ "  ...add MS json file to myconfig if not in it"
  jq -r ".secrets.${WOV_ME}[]" ${WOV_CONFIGFILE_MINERAW} | grep "${msname}.json" > /dev/null
  if [ $? -eq 1 ]; then
    jqrule=".secrets.${WOV_ME}[ .secrets.${WOV_ME} | length ] |= . + \"${msname}.json\" "
    jq -r "${jqrule}" "${WOV_CONFIGFILE_MINERAW}" > "${WOV_CONFIGFILE_MINERAW}_" ; \
      mv "${WOV_CONFIGFILE_MINERAW}_" "${WOV_CONFIGFILE_MINERAW}"
  fi

  l_ "  ...add MS json file to config dev and prod if not in it"
  jq -r ".secrets.dev[]" ${WOV_CONFIGFILE_MAINRAW} | grep "${msname}.json" > /dev/null
  if [ $? -eq 1 ]; then
    jqrule=".secrets.dev[ .secrets.dev | length ] |= . + \"${msname}.json\" "
    jq -r "${jqrule}" "${WOV_CONFIGFILE_MAINRAW}" > "${WOV_CONFIGFILE_MAINRAW}_" ; \
      mv "${WOV_CONFIGFILE_MAINRAW}_" "${WOV_CONFIGFILE_MAINRAW}"
  fi
  jq -r ".secrets.prod[]" ${WOV_CONFIGFILE_MAINRAW} | grep "${msname}.json" > /dev/null
  if [ $? -eq 1 ]; then
    jqrule=".secrets.prod[ .secrets.prod | length ] |= . + \"${msname}.json\" "
    jq -r "${jqrule}" "${WOV_CONFIGFILE_MAINRAW}" > "${WOV_CONFIGFILE_MAINRAW}_" ; \
      mv "${WOV_CONFIGFILE_MAINRAW}_" "${WOV_CONFIGFILE_MAINRAW}"
  fi
  

  doCreateK8s $1
}


# $1 - ms name
function doCreateMSRecipe()
{
  local msname="$1"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"

  l_ "  ...Make microservice recipe"
  f="${WOV_BASEDIR}/wovtools/msrecipes/${msname}"
  if [ ! -e "${f}" ]; then
    cat <<EOFFF > "${f}"
#!/usr/bin/env bash

if [ \$DOECHO -ge 2 ]; then echo "  ... add src"; fi
# ---------------------------------------------------------------------
rsync -ai \\
    --exclude etc --exclude doc --exclude Makefile --exclude README.md \\
    --exclude ".*.swp" --exclude ".*.mk" --exclude ".DS_Store" \\
    --delete --delete-excluded \\
    \${MSDIR}/src/* \${DESTDIR}/src/

#if [ \$DOECHO -ge 2 ]; then echo "  ... add node_modules"; fi
# ---------------------------------------------------------------------
#rsync -ai \\
#    --exclude etc --exclude doc --exclude Makefile --exclude README.md \\
#    --exclude ".*.swp" --exclude ".*.mk" --exclude ".DS_Store" \\
#    --delete --delete-excluded \\
#    \${MSDIR}/node_modules/*  \${DESTDIR}/node_modules

if [ \$DOECHO -ge 2 ]; then echo "  ... add individual files"; fi
# ---------------------------------------------------------------------
echo "  ... add index.js, package.json, package-lock.json"
if [ -e "\${MSDIR}/index.js" ]; then cp \${MSDIR}/index.js \${DESTDIR}/. ; fi
if [ -e "\${MSDIR}/package.json" ]; then cp \${MSDIR}/package.json \${DESTDIR}/. ; fi

# If you need to install private repos, you can add your ssh key to the container here
# if [ \$DOECHO -ge 2 ]; then echo "    ... add ssh key (NOTE: IT IS REMOVED FROM THE CONTAINER FOR YOU!!!)"; fi
# ---------------------------------------------------------------------
# cp \${HOME}/.ssh/id_rsa \${DESTDIR}/id_rsa

# NOTE: WORKDIR is /usr/src/app for all stages

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for pre-build"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/pre-build.docker
EOF

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for build"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/build.docker
RUN npm install
EOF

if [ \$DOECHO -ge 2 ]; then echo "  ... Docker commands for run"; fi
# ---------------------------------------------------------------------
cat <<EOF > \${DESTDIR}/SECRET/run.docker

# Define default port
ENV APP_PORT_INT 80

# Run command
CMD  [ "npm", "run", "start" ]
EOF
EOFFF
    chmod 700 "${f}"
  fi
}

# $1 - ms name
function doCreateK8s()
{

  l_ "  ...k8s directory"
  mkdir -p "${WOV_BASEDIR}/wovtools/k8s"

  doCreateK8sService $1
  doCreateK8sDeployment $1
  doCreateK8sIngress $1
}

# $1 - ms name
function doCreateK8sIngress()
{
  local msname="$1"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"

  f="${WOV_BASEDIR}/wovtools/k8s/${WOV_PROJECT}-ingress.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping ingress base k8s"
  else
    l_ "  ...adding ingress base k8s"
    cat <<EOF > ${f}
# Kubernetes Ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{lc PROJECT}}-ingress
  namespace: {{lc PROJECT}}-{{lc STAGE}}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.org/websocket-services: "{{lc PROJECT}}socket"
spec:
  rules:
  - host: api-{{lc STAGE}}.{{cluster.dns.domain}}
    http:
      paths:
EOF
  fi

  R=$(cat ${f} | grep "path: /${msname}/" | wc -l | tr -d "[:space:]")
  if [ "$R" != "0" ]; then
    l_ "  ...checking for ingress paths '/${msname}/', found '${R}' so skipping"
  else
    l_ "  ...adding ingress paths '/${msname}/'"
    cat <<EOF >> ${f}

      # ---------------------------------------------------------------------
      # ${msname}
      # ---------------------------------------------------------------------
\{{#if_eq {{STAGE}} "prod"}}
\{{else}}
      # open up private only if not in production
      # ---------------------------------------------------------------------
      - path: /${msname}/{{${msname}.ver}}/priv
        backend:
          serviceName: ${msname_l}
          servicePort: 80

      # open up doc only if not in production
      # ---------------------------------------------------------------------
      - path: /${msname}/{{${msname}.ver}}/doc
        backend:
          serviceName: ${msname_l}
          servicePort: 80
\{{/if_eq}}
      # pub
      # ---------------------------------------------------------------------
      - path: /${msname}/{{${msname}.ver}}/pub
        backend:
          serviceName: ${msname_l}
          servicePort: 80
EOF
  fi
}


# $1 - ms name
function doCreateK8sService()
{
  local msname="$1"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"
 
  f="${WOV_BASEDIR}/wovtools/k8s/${msname}-service.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping service k8s"
  else
    l_ "  ...adding service k8s"
    cat <<EOF >> ${f}
# Kubernetes Service
apiVersion: v1
kind: Service
metadata:
  name: {{lc MS}}
  namespace: {{lc PROJECT}}-{{lc STAGE}}
  labels:
    app: {{lc MS}}
spec:
  selector:
    app: {{lc MS}}
  ports:
  - port: 80
    protocol: TCP
    targetPort: \{{{{MS}}.port}}
EOF
  fi
}


# $1 - ms name
function doCreateK8sDeployment()
{
  local msname="$1"
  local msname_l="$(echo ${msname} | tr '[:upper:]' '[:lower:]')"

  f="${WOV_BASEDIR}/wovtools/k8s/${msname}.yaml.wov"
  if [ -e "${f}" ]; then
    l_ "  ...skipping deployment k8s"
  else
    l_ "  ...adding deployment k8s"
    cat <<EOF >> ${f}
# Kubernetes Deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{lc MS}}
  namespace: {{lc PROJECT}}-{{lc STAGE}}
spec:
  template:
    metadata:
      labels:
        app: {{lc MS}}
    spec:
      containers:
        - image: {{ARCHIVEREPOSITORY}}/{{PROJECT}}/{{lc MS}}:{{lc STAGE}}_{{PVER}}
          name: {{lc MS}}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          envFrom:
          - secretRef:
              name: {{lc MS}}
          - configMapRef:
              name: {{lc MS}}
          livenessProbe:
            httpGet:
              path: \{{{{MS}}.healthpath}}
              port: 80
            initialDelaySeconds: 3
            periodSeconds: \{{{{MS}}.healthprobetime}}
EOF
  fi
}


# ---------------------------------------------------------------------
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-e' ]; then
    ECHOMODE=1

  elif [ "$1" == '--ms' ]; then
    COMMAND=MS
  elif [ "$1" == '--recipe' ]; then
    COMMAND=RECIPE
  elif [ "$1" == '--k8s' ]; then
    COMMAND=K8S
  elif [ "$1" == '--ing' ]; then
    COMMAND=INGRESS
  elif [ "$1" == '--dep' ]; then
    COMMAND=DEPLOYMENT
  elif [ "$1" == '--serv' ]; then
    COMMAND=SERVICE

  else
    echo
    echo "***ERROR (`basename $0`): unknown option '$1'."
    echo
    exit 1
  fi
  shift
done

if [ "${1}" == "" ]; then
  echo "ERROR: need a name for this new microservice."
  exit 1
fi

if  [ ${WOV_DODEFAULTCOMMAND} -eq 1 ]; then
  if [ "${COMMAND}" == "MS" ]; then
    doBuildMicroservice $1
  elif [ "${COMMAND}" == "RECIPE" ]; then
    doCreateMSRecipe $1
  elif [ "${COMMAND}" == "K8S" ]; then
    doCreateK8s $1
  elif [ "${COMMAND}" == "DEPLOYMENT" ]; then
    doCreateK8sDeployment $1
  elif [ "${COMMAND}" == "SERVICE" ]; then
    doCreateK8sService $1
  elif [ "${COMMAND}" == "INGRESS" ]; then
    doCreateK8sIngress $1
  else
    l_error "Unknow command '${COMMAND}'."
  fi
fi

