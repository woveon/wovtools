#!/usr/bin/env bash

FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib


function fWovEnvDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Export the context as variables for scripts or export specific variables. 

This pulls config data from:
 - Wovtools project config (./${WOV_CONFIGFILE_MAIN})
 - Wovtools global config (${WOVCONFIGF})
 - K8s config
 - git

And secrets/config:
 - Wovtools project compiled secrets (./wovtools/cache/clusters/X/config.json)


Command Options:

  -h/--help     : display these options
  -v/--version  : version of wovtools
  --rcAWS       : convert a region code to an AWS code (ex. va-> us-east-1)
  --vh-label    : vh label in DockerHub repo
 
  Basic Environment Configuration:
#  -g/--global X : target output for another context (not from Kubernetes)  NOTE: must be 1st param
  -e             : echo the output with newlines
  -E             : echo the output on one line (bash executable)
  -p/--provider  : run cluster config as well (queries cloud provider via wov-env-PROVIDER)
  --set-origin X : sets the origin in wovtools/myconfig.json
  -lmsc          : lists the microservice codes
  -lms           : lists the microservices

  Ops Resource Names:
  --res SN RES ZONE  : subnet name
  --res DBSNG RES    : DB subnet group
  --res SG RES       : security group
  --res DB RES       : database name
  --res DBDNS RES    : DB DNS address
  --vres RN RES      : verify resource of type RN, name RES

  Project Info:
  --repo         : the ACTUAL name of the Code repo for this project (from Git)
  --repo-d       : the DEFAULT name of the Code repo for this project (generated)
  --repo-p       : the Project Entry name of the Code repo for this project (generated)

  Secrets/Config:
  --envs        : print all the configuration as environment variables (sep lines)
  --conf        : print all the configuration as environment variables (one line)
  --exports     : runs all the configuration as environment variables (no output, sourced)
  --var X       : print this variable X
  --secrets     : prints the merged json secrets file (for debugging)

  Kubernetes Generation 
    NOTE: These use Make to run a script... not good... need better way to run
  # --origin X       : read from file
  #--context X      : set the context (cluster and namespace)
  -c/--cluster X   : set the cluster to X (required for --cm/--se)
  -n/--namespace X : set the namespace to X
  --cm X           : K8S ConfigMap variables for a microservice X (sep lines)
  --se X           : only secrets used by plugin, (sep lines)

  --clear-cluster-cache : clears out cache files for cluster configurations

Example Usage:
  `basename $0`    : sets all environment variables
  `basename $0` -e : set and echo all environment variables
  `basename $0` --var X : set the env variable
  `basename $0` -e --var X : set and echo the env variable

EOF
}
. wov-env-ops fWovEnvDisplayOptions "$@"
l_debug "WOV_CONTEXT '${WOV_CONTEXT}'"


ECHOMODE=0
DOALL=1

PROVIDERVARS=()
RANCLUSTER=0
CONTEXTSET=0


# Default variables to echo
ECHOVARS=( 'WOV_PROJECTTITLE' 'WOV_VERSION' 'WOV_ME' 'WOV_PVER' 'WOV_SVER' \
           'WOV_ORIGIN' 'WOV_WORKINGCONTEXT' 'WOV_MASTERPROJECT' \
           'WOV_CONTEXT' 'WOV_CLUSTER' 'WOV_NS' 'WOV_CLTYPE' 'WOV_PROVIDER' 'WOV_REGION' 'WOV_FLAVOR' 'WOV_PROJECT' 'WOV_STAGE' \
           'WOV_KPROJECT' 'WOV_WPROJECT' 'WOV_KSTAGE' 'WOV_GSTAGE' \
           'WOV_PROJECTTYPE' 'WOV_PROJECTDESCRIPTION' \
           'WOV_USERNAME' 'WOV_USEREMAIL' \
           'WOV_BASEDIR' 'WOV_CONTAINERARCHIVE' 'WOV_K8SARCHIVE' 'WOV_CODEREPOARCHIVE' )

# --------------------------------------------------------------------- 
# Calls wov-env-build to build the secretfile if it does not exist.
# NOTE: does not build k8s
#  if $1 == force, force
# --------------------------------------------------------------------- 
function fBuildClusterSecrets
{ 
#  if [ ! -f "${WOV_SECRETFILE}" ] || [ "$1" == "force" ]; then 
#    # echo "call wov-env-build --context ${WOV_CONTEXT} -q --secrets ${CLUSTER} "
#    wov-env-build --context ${WOV_CONTEXT} -q --config
#    if [ "$?" != "0" ]; then exit 1; fi
#  fi

  #l_debug "fBuildClusterSecrets pre check, ${WOV_SECRETFILE}\n ${WOV_CONFIGFILE_MAIN}"
  #l_debug "1- $([ "${WOV_CONFIGFILE_MAIN}" -nt ${WOV_SECRETFILE} ] && echo 'nt')"

  # ---------------------------------------------------------------------
  # Ensure the SECRET_CACHE_DIR exists and is protected and then merge
  # files config.json and myconfig.json together in SECRETSMERGED_RAW
  # if they have changed.
  # ---------------------------------------------------------------------
  mkdir -m 700 -p ${WOV_CACHEDIR}
  mkdir -m 700 -p ${WOV_CLUSTERDIR}

  # check files that could impact WOV_SECRETFILE generation
  #  - changes to kube config
  #  - newly merged wovtools/config.json|myconfig.json
  #  - wovtools/secrets directory has changes
  #  - git commits that chagne PVER/SVER
  if [ ! -f "${WOV_SECRETFILE}" ] ||
     [ "$1" == "force" ] ||
     [ "${HOME}/.kube/config"                 -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_CONFIGFILE_MERGED}"             -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_BASEDIR}/wovtools/secrets"      -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_CONFIGFILE_MAIN}"               -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_CONFIGFILE_MINE}"               -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_BASEDIR}/wovtools/secrets/.git" -nt "${WOV_SECRETFILE}" ] ||
     [ "${WOV_BASEDIR}/.git"                  -nt "${WOV_SECRETFILE}" ]; then

    l_debug "fBuildClusterSecrets building context ${WOV_CONTEXT}"
    wov-env-build -f --context ${WOV_CONTEXT} -q --config ; Re=$?
    if [ $Re -ne 0 ]; then exit $Re; fi
    touch "${WOV_SECRETFILE}"
    # . wov-env-loader -g ${WOV_CLUSTER}-${WOV_NS}"
  else
    l_debug "fBuildClusterSecrets not building"
  fi
}

function ensureSetContext()
{
  if [ ${CONTEXTSET} -eq 0 ]; then doSetContext $1; fi
}


# ---------------------------------------------------------------------
# $1 - new origin
# ---------------------------------------------------------------------
function doSetOrigin()
{
  jq '.curorigin="'"${1}"'"' "${WOV_CONFIGFILE_MINERAW}" > "${WOV_CONFIGFILE_MINERAW}_.$$" 
  if [ $? == 0 ]; then
    mv "${WOV_CONFIGFILE_MINERAW}_.$$" "${WOV_CONFIGFILE_MINERAW}"
  else
    rm -f "${WOV_CONFIGFILE_MINERAW}_.$$" || true
  fi
}


# --------------------------------------------------------------------- 
# TODO: UPDATE DOCUMENATION HERE AS IT IS WRONG
# Sets the cluster we are generating environment vars for. By default,
# generates using settings in 'local', which is generated by 
# wov-env-build using the 'curorigin' entry. So, 'local' points to
# whatever cluster this project considers the curorigin.
# NOTE: creates the directory, but not file since that would look like 
#       it was current.
# NOTE2: Uses WOV_NS so if you change it with --namespace, then it will
#        be used in setting which stage of the cluster to use.
# $1 - cluster name
# $2 - if true, force build
# --------------------------------------------------------------------- 
function doSetContext
{
  if [ "${WOV_CONTEXT}" != "$1" ]; then
    # echo "...forcing context change"

    # Load up new context for calls below
    . wov-env-loader --context ${1}
    fBuildClusterSecrets force 
  else
    # echo "...rebuild if needed"
    fBuildClusterSecrets
  fi

#  # ---------------------------------------------------------------------
#  # Ensure the SECRET_CACHE_DIR exists and is protected and then merge
#  # files config.json and myconfig.json together in SECRETSMERGED_RAW
#  # if they have changed.
#  # ---------------------------------------------------------------------
#  mkdir -m 700 -p ${WOV_CACHEDIR}
#  mkdir -m 700 -p ${WOV_CLUSTERDIR}
#
#  # check files that could impact WOV_SECRETFILE generation
#  #  - changes to kube config
#  #  - newly merged wovtools/config.json|myconfig.json
#  #  - wovtools/secrets directory has changes
#  #  - git commits that chagne PVER/SVER
#  if [ ! -f "${WOV_SECRETFILE}" ] || 
#     [ "$2" == 'true' ] ||
#     [ "${HOME}/.kube/config"                 -nt "${WOV_SECRETFILE}" ] ||
#     [ "${WOV_CONFIGFILE_MERGED}"             -nt "${WOV_SECRETFILE}" ] || 
#     [ "${WOV_BASEDIR}/wovtools/secrets"      -nt "${WOV_SECRETFILE}" ] ||
#     [ "${WOV_CONFIGFILE_MAIN}"               -nt "${WOV_SECRETFILE}" ] ||
#     [ "${WOV_CONFIGFILE_MINE}"               -nt "${WOV_SECRETFILE}" ] ||
#     [ "${WOV_BASEDIR}/wovtools/secrets/.git" -nt "${WOV_SECRETFILE}" ] ||
#     [ "${WOV_BASEDIR}/.git"                  -nt "${WOV_SECRETFILE}" ]; then
#    
#    # Builds files but does not import
#    fBuildClusterSecrets force 
#    touch "${WOV_SECRETFILE}"
#    # . wov-env-loader -g ${WOV_CLUSTER}-${WOV_NS}"
#  fi

  CONTEXTSET=1
}








## --------------------------------------------------------------------- 
## For dev and prod, check local code and secrets are checked in and pushed.
## @param {bool} $1 - if true, allows for err msg and exit
## @return {bool} - 1 if error, 0 if ok
## --------------------------------------------------------------------- 
#function doGitChecksOnFormalStages()
#{
#  local retval=1
#
#  if [ "$WOV_STAGE" == "prod" ] || [ "$WOV_STAGE" == "dev" ]; then
#
#    local R1=0
#    wov-git-check ${WOV_BASEDIR}
#    R1=$?
#    if [ $R1 -eq 0 ]; then
#      wov-git-check ${WOV_BASEDIR}/wovtools/secrets
#      R2=$?
#      if [ $R2 -eq 0 ]; then
#        retval=0
#      fi
#    fi
#
#    if [ $retval -ne 0 ]; then
#      printf "\n\nERROR: failed git checks.\n\n"
#      exit 1
#    fi
#  fi
#
#  return $retval
#}


# --------------------------------------------------------------------- 
# $1 - cluster name
# $2 - append directory
# NOTE: NOT USED
# USE WOV_getClusterConfigDir
# --------------------------------------------------------------------- 
#function getClusterConfigPath()
#{
#  local CLUSTER=$1
#  local APPENDPATH=$2
#  local ccd=`WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT}`
#  local RETVAL="${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}"
#  if [ "$APPENDPATH" != "" ]; then RETVAL="${RETVAL}/${APPENDPATH}"; fi
#  echo $RETVAL
#}

function doK8sBadContext()
{
  # Kubernetes Context in ~/.kube/config
  printf "\n***ERROR: bad WOV_CONTEXT of '${WOV_CONTEXT}'.\n\n"

  printf "...check kops clusters\n"
  if [ -z ${KOPS_STATE_STORE+x} ]; then 
    echo "WARNING: KOPS_STATE_STORE is unset... skipping cluster listing."
    echo "  - ex. export KOPS_STAGE_STORE='s3://kops.woveon.com'"
  else
    kops get clusters
  fi

  OLDIFS=$IFS
  IFS='.'
  local carray=( $WOV_FLAVOR )
  IFS=$OLDIFS
  WOVCONTEXTMAYBE="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${carray[0]}"
  if [ "${#carray[@]}" != "1" ]; then
    echo "WARNING: WOV_FLAVOR of '${WOV_FLAVOR}' may be from the default kops. You probably need to create a WovTools context of '${WOVCONTEXTMAYBE}'."
  fi

  printf "...checking kubernetes context (cluster/user/namespace)\n"

  kubectl config get-clusters | \grep -- ${WOV_CLUSTER} > /dev/null
  if [ "$?" != "0" ]; then echo "  ... no cluster ${WOV_CLUSTER}"; else echo "  ... found cluster ${WOV_CLUSTER}."; fi

  kubectl config view | yaml json write - | jq -r '.users[].name' | \grep -- ${WOV_CONTEXT} > /dev/null 2>&1
  if [ "$?" != "0" ]; then 
    echo "  ... no user ${WOV_CONTEXT}"
  else
    echo "  ... found user ${WOV_CONTEXT}"
  fi

  kubectl get ns "${WOV_WPROJECT}-${WOV_GSTAGE}" > /dev/null 2>&1
  if [ "$?" != "0" ]; then 
    printf "  ... no kubernetes namespace '${WOV_WPROJECT}-${WOV_GSTAGE}'.\n"
    printf "    - create with: 'kubectl create namespace ${WOV_WPROJECT}-${WOV_GSTAGE}'.\n"
  else
    printf "  ... found kubernetes namespace '${WOV_WPROJECT}-${WOV_GSTAGE}'.\n"
  fi

  kubectl config get-contexts ${WOV_CLUSTER}-${WOV_WPROJECT}-${WOV_GSTAGE} 1> /dev/null 2>&1
  if [ "$?" == "0" ]; then 
    echo "  ... found context ${WOV_CLUSTER}-${WOV_WPROJECT}-${WOV_GSTAGE}"
  else
    echo "  ... no context ${WOV_CLUSTER}-${WOV_WPROJECT}-${WOV_GSTAGE}"
    kubectl config get-contexts ${WOVCONTEXTMAYBE} 1> /dev/null 2>&1
    if [ "$?" == "0" ]; then
      echo "  ... Oh hey, context '${WOVCONTEXTMAYBE}' exists... try 'kubectl config use-context ${WOVCONTEXTMAYBE}'?"
    fi
  fi


  exit 1
}



# vars from kops
# --------------------------------------------------------------------- 
if [ -z ${KOPS_STATE_STORE+x} ]; then 
  echo "ERROR: KOPS_STATE_STORE is unset. ex. export KOPS_STATE_STORE='s3://kops.woveon.com'"
  exit 1
fi


# --------------------------------------------------------------------- 
# Functions
# --------------------------------------------------------------------- 


# --------------------------------------------------------------------- 
# $1 - appending char(s): ex. ' ' or '\n'
# $2 - prepending char(s) : ex. 'export'
# --------------------------------------------------------------------- 
function fDoEcho() 
{

  for f in "${ECHOVARS[@]}"; do
    printf "$2$f='${!f}'$1"
  done
  # if [ "$RANCLUSTER" == "1" ]; then doClusterEcho "$1"; fi
  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "$1"; fi
}


# --------------------------------------------------------------------- 
# TODO: fill this function in, and remove from WIAAS
#  NOTE: fills in REGIONVARS and exports variables as needed.
# --------------------------------------------------------------------- 
function fDoProvider() # Cluster()
{
  RANPROVIDER=1

  if [ "$WOV_PROVIDER" == "aws" ]; then . provider-wov-env-aws; 
  else
    printf "\n\nERROR: Unknown provider to load env vars from : '${WOV_PROVIDER}'.\n\n"
    exit 1
  fi
}


# --------------------------------------------------------------------- 
# $1 - appending char(s): ex. ' ' or '\n'
# $2 - prepending char(s): ex. 'export '
# --------------------------------------------------------------------- 
function doProviderEcho
{
  for f in "${REGIONVARS[@]}"; do
    printf "$2$f='${!f}'$1"
  done
}

# --------------------------------------------------------------------- 
# $1 - appending char(s): ex. ' ' or '\n'
# $2 - prepending char(s): ex. 'export '
# --------------------------------------------------------------------- 
#function doClusterEcho
#{
#  for f in "${CLUSTERVARS[@]}"; do
#    printf "$2$f='${!f}'$1"
#  done
#}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doPrintVarX()
{
#  if [ "$HAS_SECRET" == "0" ]; then fBuildClusterSecrets; fi
  R=`doPrintVarsENVS | grep "$1=" | cut -f2 -d"=" | ${SED} -e "s/^'//" -e "s/'$//"`
  if [ "$R" == "" ]; then
    R=${!1}
  fi
  echo "$R"
}


# --------------------------------------------------------------------- 
# This generates a printout of variables, suitable for sourcing
# BUGS: NOTE: TODO: this loads the environment vars but if the context changes, this is not called again
# --------------------------------------------------------------------- 
function doPrintVarsENVS()
{
#  if [ "$HAS_SECRET" == "0" ]; then fBuildClusterSecrets; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "WOV_\($k)=" + @sh "\(.[$k])" '


  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "\n"; fi

  HAS_BUILDENV=1
}

function doPrintVarsCONF()
{
  doPrintVarsENVS | tr '\n' ' '
}

function doPrintVarsEXPORTS()
{
#  if [ "$HAS_SECRET" == "0" ]; then fBuildClusterSecrets; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "export WOV_\($k)=" + @sh "\(.[$k])" '

  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "\n" "export "; fi

  HAS_BUILDENV=1
}

# --------------------------------------------------------------------- 
# Generate only the necessary env variables for microservices.
#  $1 - microservice name. ex. apisocket, apihal, etc.
#  $2 - "cm" or "se" for ConfigMap or Secrets
#  $3 - ?has newline? '1' puts on different lines, '0' all on same
# NOTE: This works by calling a javscript or shell script that 
#   generates the env vars. This script must end in 'js' or 'sh' and
#   be in ${1}/src/${1}config* or src/${1}config*.
# --------------------------------------------------------------------- 
function fConfGeneration()
{

  local MSCFILE=
  local R=

  # Read in envs
  if [ "${HAS_BUILDENV}" != "1" ]; then . <(doPrintVarsEXPORTS); fi

  # Get echo env vars, checking multiple locations
  if [ -e "${WOV_BASEDIR}/${1}/src/${1}config.js" ]; then
    MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.js"
    if [ "$2" == "cm" ]; then 
      R1=$(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ; RR=$?
      R=( "${R1}" )
    elif [ "$2" == "se" ]; then
      R1=$(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") ; RR=$?
      R=( "${R1}" )
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code: ${MSCFILE}"; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.js" ]; then
    MSCFILE="${WOV_BASEDIR}/src/${1}config.js"
    if [ "$2" == "cm" ]; then

      R1=$(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ; RR=$?
      R=( "${R1}" )
    elif [ "$2" == "se" ]; then 
      R1=$(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") ; RR=$?
      R=( "${R1}" )
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code: ${MSCFILE}"; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/${1}/src/${1}config.sh" ]; then
    MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.sh"
    R1=$(${MSCFILE} $2) ; RR=$?
    R=( "${R1}" )
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code: ${MSCFILE}"; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.sh" ]; then
    MSCFILE="${WOV_BASEDIR}/src/${1}config.sh"
    R1=$(${MSCFILE} $2) ; RR=$?
    R=( "${R1}" )
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code: ${MSCFILE}"; exit 1 ; fi

  else
    (>&2 printf "\nERROR: could not find '${1}config.(js|sh)'. Should be in ./src or ./${1}/src.\n\n")
    exit 1
  fi

  local SEP=' '
  if [ "$3" == "1" ]; then SEP='\n'; fi


  l_debug "Checking for errors in running the config program/script for the microservice."
  if [[ "${R[@]}" =~ "[WARN"  ]]; then
    l_warn  "${R[@]}"
    l_error "Warning message in generation of environment variables. Stopping. See '${MSCFILE} file'."
    if [ "$ECHOMODE" == "2" ]; then
      l_verbose "secret file (${WOV_SECRETFILE}):";
      cat ${WOV_SECRETFILE}
    fi
    exit 2
  fi



  for f in "${R[@]}"; do
    printf "$f$SEP"
  done
  #if [[ "${R[@]}" =~ "[WARN"  ]]; then
  #  printf "\n***ERROR(wov-env): warning message in generation of environment variables. Stopping.\n\n"
  #  exit 2
  #fi
}


## --------------------------------------------------------------------- 
## Check routes
##  NOTE: This is pretty limited since it only has 3 vars.
## $1= if exists, use it's value for http/https (otherwise, use http/https as specified)
## --------------------------------------------------------------------- 
#doHealthChecks() 
#{
#  local ccd=`WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT}`
#  local routes=( "/healthz" $(cat ${ccd}/config.json | jq -r '.. | select( type=="object" ) | select(.healthpath != null) | .healthpath' 2> /dev/null) ) ; Re=$?
#  # local routes=( "/healthz" $(cat ${WOV_BASEDIR}/wovtools/cache/clusters/${WOV_CLUSTER}/secrets.json | jq -r '.. | select( type=="object" ) | select(.healthpath != null) | .healthpath' 2> /dev/null) ) ; Re=$?
##  local routes=$(cat ${WOV_BASEDIR}/wovtools/cache/clusters/${WOV_CLUSTER}/secrets.json | jq -r ".health.routes[]" 2> /dev/null ); Re=$?
#  if [ $Re != 0 ] || [ "$routes" == "" ]; then printf "ERROR: failed finding .*.healthroutes in secrets.\n"; exit 1; fi
#
#  local retval=0
#  local MSG=
#  local PROTO=
#  local STATUS=
#  local CT=
#  local SERVER=
#
#  if [[ ${DOECHO} -ge 2 ]]; then echo "Health Routes: ${routes[@]}"; fi
#
#  for r in ${routes[@]}; do
#    local URL=`echo "${r}" | sed  \
#      -e 's/{WOV_STAGE}/'"${WOV_STAGE}"'/g' \
#      -e 's/{WOV_ME}/'"${WOV_ME}"'/g' \
#      -e 's/{WOV_PROJECT}/'"${WOV_PROJECT}"'/g'`
#    # echo " check route ${r}: ${URL}"
#    local domain="$(wov-env --var WOV_www_api_url)"
#    local schema="$(wov-env --var WOV_www_api_urlscheme)"
#    if [ "${1}" != "" ]; then local schema=$1; fi
#    local URL="${schema}://${domain}${URL}"
#
#    local CMD="curl -sS $URL"
#    printf "  ... health check: ${URL}'\n"
#    #printf "  ... ${URL}\n"
#    local R=$(${CMD} 2>&1)
#    local RR=$?
#    # echo " '$R:$RR' "
#    if [ "$RR" != "0" ]; then
#      printf "\n\nERROR ($RR) : $R\n"
#      retval=1
#    else
#      # parse http header
#      # FROM : https://stackoverflow.com/questions/24943170/how-to-parse-http-headers-using-bash
#      shopt -s extglob # Required to trim whitespace; see below
#      while IFS=':' read key value; do
#        # trim whitespace in "value"
#        value=${value##+([[:space:]])}; value=${value%%+([[:space:]])}
#        case "$key" in
#          Server) SERVER="$value"
#            ;;
#          Content-Type) CT="$value"
#          ;;
##        HTTP*) read PROTO STATUS MSG <<< "$key$value}"
##        HTTP*) read PROTO STATUS MSG <<< "$key{$value:+:$value}"
#          HTTP*) read PROTO STATUS MSG <<< "$key$value"
#              ;;
#        esac
#      done < <(curl -sI ${URL})
#
#      MSG=${MSG/$'\r'/} # remove \r that gets match in sed above
#
#      if [[ ${CT} = application/json* ]]; then
#        printf "    - application/json: '${PROTO}' '${STATUS}' "
#        echo "$R" | jq -c
#      elif [[ ${CT} = text/html* ]]; then
#        # curl -sI ${URL}
#        # echo "CT: ${CT}"
#        # echo "'${STATUS}' '${SERVER}' '${MSG}'"
#        if [ "${STATUS}" == "200" ]; then
#          printf "    - text/html: ${PROTO} ${STATUS} ${MSG}\n"
#        else
#          printf "\n*** ERROR: Failed retreiving ${CT}: ${STATUS} ${MSG}\n"
#          echo "$R"
#          retval=1
#        fi
#      elif [[ ${CT} = text/plain* ]]; then
#        if [ "${STATUS}" == "200" ]; then
#          printf "    - text/plain: '${PROTO}' '${STATUS}' '${MSG}'\n"
#        else
#          printf "\n*** ERROR: Failed retreiving ${CT}: ${STATUS} ${MSG}\n"
#          echo "$R"
#          retval=1
#        fi
#      else
#        printf "\nRESULT(${RR}): $R\n"
#        printf "*** ERROR: Unknown content type : '${CT}'\n"
#        curl -sI ${URL}
#        retval=1
#      fi
#    fi
#  done
#}

# 1 exists, 0 does not, anything else, error
# [res] [resname]
#   -resname, get from doResName func
# TODO move to provider-wov-env-aws
function doResVerify()
{
  local retval=0

  if [ "$2" == "" ]; then printf "\n\nERROR: resname name not provided to resVerify.\n"; fDisplayOptions; exit 1; fi
  if [ "$1" == "SN" ]; then
    R=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=${2}" --query 'Subnets[0]')
    RR=$?
    if [ "$R" == "null" ]; then retval=0; else retval=1; fi

  elif [ "$1" == "DBSNG" ]; then
    R=$(aws rds describe-db-subnet-groups --db-subnet-group-name ${2} >& /dev/null )
    RR=$?
    if [ "$RR" == "0" ]; then retval=1; else retval=0; fi

  elif [ "$1" == "SG" ]; then
    SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${2}" --query 'SecurityGroups[].GroupName' --output=text)
    if [ "${SG}" == "" ]; then
#      echo "  ... no existing secrurity group '${SG}'"
      retval=0
    else
      retval=1
    fi
  else
    printf "\n\nERROR: unknown resource of ${1} to resVerify.\n"
    fDisplayOptions
    exit 1
  fi

  # ??? Should this be retunr, not echo?
  echo $retval
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doClearClusterCache()
{
  local ccd="${WOV_BASEDIR}/wovtools/cache/clusters"
  if [ -e "${ccd}" ]; then
    if [ $DOECHO -ge 1 ]; then echo "  ... clearing '${ccd}'."; fi
    rm -Rf "${ccd}"
  else
    >&2 echo "WARNING: no cluster cache to clear at '${ccd}'."
  fi
}


# ---------------------------------------------------------------------
function doListMicroserviceCodes()
{
  fGetMicroserviceRecipes
  if [ ${#RECIPES[@]} -eq 0 ]; then echo 'No microservices'; else echo "${RECIPES[@]}"; fi
}

# ---------------------------------------------------------------------
function doListMicroservices()
{
  fGetMicroserviceRecipes
  if [ ${#RECIPES[@]} -eq 0 ]; then echo 'No microservices';
  else
    for r in ${RECIPES[@]}; do
      echo "${WOV_PROJECT}${RECIPES[@]}"
    done
  fi
}

# --------------------------------------------------------------------- 
# Load env
# --------------------------------------------------------------------- 
envargswovenv=( "$@" )
set ""
. wov-env-common
. wov-db-common
set -- "${envargswovenv[@]}"


#retreiveLocalContextCluster
l_debug "WOV_CONTEXT '${WOV_CONTEXT}'"
#doSetContext ${WOV_CONTEXT}


# --------------------------------------------------------------------- 
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-e' ]; then
    ECHOMODE=1

  elif [ "$1" == '-E' ]; then
    ECHOMODE=2

  elif [ "$1" == '--set-origin' ]; then
    shift
    doSetOrigin "$1"
    shift

  elif [ "$1" == '--context' ]; then
    shift
    doSetContext "$1"
    shift

  elif [ "$1" == '-p' ] || [ "$1" == '--provider' ]; then
    # build the context, building secrets as needed, and then source the secrets file
    ensureSetContext ${WOV_CONTEXT}
    . <(doPrintVarsENVS)
    fDoProvider # Cluster
    doProviderEcho '\n'

  elif [ "$1" == "--conf" ]; then
#    doLoadConf
    ensureSetContext ${WOV_CONTEXT}
    doPrintVarsCONF

  elif [ "$1" == "--envs" ]; then
#    doLoadEnv
    ensureSetContext ${WOV_CONTEXT}
    doPrintVarsENVS

  elif [ "$1" == "--secrets" ]; then
    ensureSetContext ${WOV_CONTEXT}
    printf "\nsecret file (${WOV_SECRETFILE}):\n";
    cat ${WOV_SECRETFILE}

    # print one var
  elif [ "$1" == "--env-var" ]; then
    ensureSetContext ${WOV_CONTEXT}
    shift
    if [ "$CLUSTER" == "" ]; then printf "\n\nERROR($(basename $0)): no cluster set. Use the '--cluster X' option.\n\n"; fi
    local ccd=`WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT}`
    command grep -h ${1} ${ccd}/[cs][me]/*.json | ${SED} -e 's/^.*[=]//' -e 's/^"//' -e 's/"$//'
    # command grep -h ${1} ${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}/[cs][me]/*.json | ${SED} -e 's/^.*[=]//' -e 's/^"//' -e 's/"$//'

  elif [ "$1" == "--exports" ]; then
#    doLoadExports
    ensureSetContext ${WOV_CONTEXT}
    doPrintVarsEXPORTS

  elif [ "$1" == "--repo" ]; then
    echo "unimplemented"

  elif [ "$1" == "--repo-d" ]; then
    iProjRepo_Naming "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${WOV_BASEDIR}" "${WOV_BASEDIR}/.."

  elif [ "$1" == "--repo-p" ]; then
    jq -r ".projects.${WOV_PROJECT}" "${WOVCONFIGF}"

  elif [ "$1" == "--rcAWS" ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    wov-aws convertrc $1
    if [ $? != 0 ]; then exit 1; fi
    shift

#  elif [ "$1" == "--CC" ]; then
#    echo "NOTE: this seems broken"
#    . wov-aws cluster --
#    echo 

  elif [ "$1" == "--cm" ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    fConfGeneration $1 cm 1

  elif [ "$1" == "--se" ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    fConfGeneration $1 se 1

  elif [ "$1" == "--CM" ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    fConfGeneration $1 cm 0

  elif [ "$1" == "--SE" ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    fConfGeneration $1 se 0

  elif [ "$1" == "--clear-cluster-cache" ]; then
    shift
    doClearClusterCache
    WOV_DODEFAULTCOMMAND=0

  elif [ "$1" == '--var' ]; then
    shift 
    ensureSetContext ${WOV_CONTEXT}
    V=$(doPrintVarX $1)
    if [ "$ECHOMODE" == "1" ]; then
      printf "$1=\"${V}\"\n"
    elif [ "$ECHOMODE" == "2" ]; then
      printf "$1=\"${V}\" "
    else
      echo ${V}
    fi
    DOALL=0

#  elif [ "$1" == '--health' ]; then
#    ensureSetContext ${WOV_CONTEXT}
#    doHealthChecks
#
#  elif [ "$1" == '--health-tls' ]; then
#    ensureSetContext ${WOV_CONTEXT}
#    doHealthChecks https
#
#  elif [ "$1" == '--health-no-tls' ]; then
#    ensureSetContext ${WOV_CONTEXT}
#    doHealthChecks http


  elif [ "$1" == '--res' ]; then
    shift
    ensureSetContext ${WOV_CONTEXT}
    doResName $@
    A=$?
    if [ $A -ne 0 ]; then exit $A; fi
    # clear params until next '-'
    while [[ ! ( $1 =~ ^- ) ]]; do shift; if [ "$1" == "" ]; then break; fi; done 
    set - blank "$@"
      # -- pushes 'blank' onto arguments, so next shift can get rid of it

  elif [ "$1" == '-lms' ]; then
    shift
    doListMicroservices

  elif [ "$1" == '-lmsc' ]; then
    shift
    doListMicroserviceCodes


  elif [ "$1" == '--vres' ]; then
    ensureSetContext ${WOV_CONTEXT}
    R1=$(doResVerify ${2} ${3}) ; RR1=$?
    if [ ${DOECHO} -ge 2 ]; then echo "  ... verify ${2} ${3}"; fi
    if [ "$R1" == "1" ]; then echo "true"; else echo "false"; fi
    shift
    shift

  else
    echo
    echo "***ERROR (`basename $0`): unknown option '$1'."
    echo
    exit 1
  fi
  shift

done

if [ $WOV_DODEFAULTCOMMAND -eq 1 ]; then

  ensureSetContext ${WOV_CONTEXT}

  # if user never asked to show any individual variables, show all
  if [ "$DOALL" == "1" ]; then
    if   [ "$ECHOMODE" == "0" ]; then
      printf "" # do nothing
    elif [ "$ECHOMODE" == "1" ]; then
      fDoEcho "\n"
    elif [ "$ECHOMODE" == "2" ]; then
      fDoEcho " "
    else
      printf "\n\nERROR: Unknown echo mode '$ECHOMODE'.\n\n"
      exit 1
    fi
  fi
fi
