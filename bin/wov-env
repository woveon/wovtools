#!/usr/bin/env bash
FOLD=$(tput cols)
CLUSTER=
ECHOMODE=0
DOALL=1
SED=`which gsed`
HAS_SECRET=0
PROVIDERVARS=()


function fWovEnvDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Export the context as variables for scripts or export specific variables. 

This pulls config data from:
 - Wovtools project config (./wovtools/config.json)
 - Wovtools global config ($HOME/.wovtools)
 - K8s config
 - git

And secrets/config:
 - Wovtools project compiled secrets (./wovtools/cache/local/secrets.json)


Command Options:

  -h/--help     : display these options
  -v/--version  : version of wovtools
  --rcAWS       : convert a region code to an AWS code (ex. va-> us-east-1)
  --vh-label    : vh label in DockerHub repo
 
  Basic Environment Configuration:
  -e            : echo the output with newlines
  -E            : echo the output on one line (bash executable)
  -p/--provider : run cluster config as well (WAS -c/--cluster) FIXME|TODO

  Secrets/Config:
  --envs        : print all the configuration as environment variables (sep lines)
  --conf        : print all the configuration as environment variables (one line)
  --exports     : runs all the configuration as environment variables (no output, sourced)
  --var X       : print this variable X

  Kubernetes Generation 
    NOTE: These use Make to run a script... not good... need better way to run
  -c/--cluster X  : set the cluster to X (required for --cm/--se)
  --cm X          : only config used by plugin, (sep lines)
  --se X          : only secrets used by plugin, (sep lines)

Example Usage:
  `basename $0`    : sets all environment variables
  `basename $0` -e : set and echo all environment variables
  `basename $0` --var X : set the env variable
  `basename $0` -e --var X : set and echo the env variable

EOF
}
if [ "$1" == '--help' ] || [ "$1" == '-h' ]; then fWovEnvDisplayOptions; exit 0; fi


# --------------------------------------------------------------------- 
# Used to select between vh containers (just exists with 0.1).
# --------------------------------------------------------------------- 
if [ "$1" == "--vh-label" ]; then echo "0.1"; exit 0; fi


# --------------------------------------------------------------------- 
# Start
# --------------------------------------------------------------------- 
WOV_VERSION=0
export WOV_VERSION
export WOV_BASEDIR="$(git rev-parse --show-toplevel)"
if [ "$WOV_BASEDIR" == "" ]; then
  echo "ERROR: not in wovtools project (no git)."
  exit 1
elif [ ! -e "$WOV_BASEDIR/wovtools" ]; then
  echo "ERROR: not in wovtools project (no wovtools directory)."
  exit 1
elif [ ! -e "${WOV_BASEDIR}/wovtools/config.json" ]; then
  echo "ERROR: not in wovtools project (no wovtools/config.json file)."
  exit 1
fi


# --------------------------------------------------------------------- 
# Source files for project configuration : build if needed
# --------------------------------------------------------------------- 
export WOV_CACHEDIR="${WOV_BASEDIR}/wovtools/cache"
export WOV_FILE_SECRETS_RAW="${WOV_BASEDIR}/wovtools/config.json"
export WOV_FILE_SECRETSLOCAL_RAW="${WOV_BASEDIR}/wovtools/local.json"
export WOV_FILE_SECRETSMERGED="${WOV_CACHEDIR}/.merged.json"


# ---------------------------------------------------------------------
# Ensure the SECRET_CACHE_DIR exists and is protected and then merge
# files config.json and local.json together in SECRETSMERGED_RAW
# if they have changed.
# ---------------------------------------------------------------------
mkdir -p ${WOV_CACHEDIR}
chmod 700 ${WOV_CACHEDIR}
if [ ${WOV_FILE_SECRETS_RAW} -nt ${WOV_FILE_SECRETSMERGED} ] || [ ${WOV_FILE_SECRETSLOCAL_RAW} -nt ${WOV_FILE_SECRETSMERGED} ]; then
  echo "... merged file out of date, creating: ${WOV_FILE_SECRETSMERGED}"
  echo "" > ${WOV_FILE_SECRETSMERGED}
  chmod 600 ${WOV_FILE_SECRETSMERGED}
  jq -s ".[0] * .[1]" ${WOV_FILE_SECRETS_RAW} ${WOV_FILE_SECRETSLOCAL_RAW} >> ${WOV_FILE_SECRETSMERGED}
fi


# --------------------------------------------------------------------- 
# Sets the cluster we are generating environment vars for. By default,
# generates using settings in 'local', which is generated by 
# wov-env-build using the 'localcontext' entry. So, 'local' points to
# whatever cluster this project considers the localcontext.
# --------------------------------------------------------------------- 
function doSetCluster
{
  CLUSTER=$1
  WOV_SECRETFILE=${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}/secrets.json
  export WOV_SECRETFILE
}
doSetCluster "local"


# --------------------------------------------------------------------- 
# For dev and prod, check local code and secrets are checked in and pushed.
# @param {bool} $1 - if true, allows for err msg and exit
# @return {bool} - 1 if error, 0 if ok
# --------------------------------------------------------------------- 
function doGitChecksOnFormalStages()
{
  local retval=1

  if [ "$WOV_STAGE" == "prod" ] || [ "$WOV_STAGE" == "dev" ]; then

    local R1=0
    wov-git-check ${WOV_BASEDIR}
    R1=$?
    if [ $R1 -eq 0 ]; then
      wov-git-check ${WOV_BASEDIR}/wovtools/secrets
      R2=$?
      if [ $R2 -eq 0 ]; then
        retval=0
      fi
    fi

    if [ $retval -ne 0 ]; then
      printf "\n\nERROR: failed git checks.\n\n"
      exit 1
    fi
  fi

  return $retval
}


# --------------------------------------------------------------------- 
# Used to generate the path where CLuster configuration would sit in 
# the archive.
#  ex. local path="`getRelativeArchivePath MyCluster`"
# --------------------------------------------------------------------- 
function getRelativeArchivePath()
{ 
  echo "${1}/${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}" 
}


# --------------------------------------------------------------------- 
# $1 - cluster name
# $2 - append directory
# NOTE: NOT USED
# --------------------------------------------------------------------- 
function getClusterConfigPath()
{
  local CLUSTER=$1
  local APPENDPATH=$2
  local RETVAL="${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}"
  if [ "$APPENDPATH" != "" ]; then RETVAL="${RETVAL}/${APPENDPATH}"; fi
  echo $RETVAL
}


# --------------------------------------------------------------------- 
# Calls wov-env-build to build the secretfile if it does not exist.
# --------------------------------------------------------------------- 
function fBuildSecret
{ if [ ! -e "${WOV_SECRETFILE}" ]; then wov-env-build --secrets ${CLUSTER}; fi }


# vars from Kubernetes
# --------------------------------------------------------------------- 
export WOV_CONTEXT="$(kubectl config current-context)"
OLDIFS=$IFS
IFS='-'
array=( $WOV_CONTEXT )
IFS=$OLDIFS
export WOV_KSTAGE="${array[5]}"
export WOV_KPROJECT="${array[4]}"
export WOV_NS="${WOV_KPROJECT}-${WOV_KSTAGE}"
export WOV_FLAVOR="${array[3]}"
export WOV_REGION="${array[2]}"
export WOV_PROVIDER="${array[1]}"
export WOV_CLTYPE="${array[0]}"
export WOV_CLUSTER="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${WOV_FLAVOR}"


# vars from git, if in project directory
# --------------------------------------------------------------------- 
export WOV_PVER="$(git rev-list --count $(git rev-parse --abbrev-ref HEAD))"
export WOV_SVER="$(cd ${WOV_BASEDIR}/wovtools/secrets && git rev-list --count $(git rev-parse --abbrev-ref HEAD))"
export WOV_USERNAME="$(git config user.name)"
export WOV_USEREMAIL="$(git config user.email)"
export WOV_GSTAGE="$(git rev-parse --abbrev-ref HEAD)"


# vars from global .wovtools file
# --------------------------------------------------------------------- 
export WOV_ME=$(cat ${HOME}/.wovtools | jq -r '.me')
if [ "${WOV_ME}" == "null" ] ; then
  printf "\n\nERROR: You need to set 'me' in the wovtools/config.json file.\n"
  printf "  - This is a unique code in this project, to represent yourself. Try using your initials (assuming they are unique to your team).\n\n"
  exit 1
fi

# vars from merged secrets file
# --------------------------------------------------------------------- 
# Do one jq call on the project 'merged' file to get vars needed
ALLVARS=()
while read f; do
  ALLVARS+=( "$f" )
done <<<$(cat ${WOV_FILE_SECRETSMERGED} | jq -r ". | ( .ver, .project.project, .project.type, .project.title, .project.description, .archive.repository, .archive.env  )" )

WOV_PVERSION=${ALLVARS[0]}
if [ "${WOV_PVERSION}" != "${WOV_VERSION}" ] && [ "${WOV_PVERSION}" != "initing" ] ; then
  printf "\n\nERROR: Your project version '${WOV_PVERSION}', does not match to the WovTools version '${WOV_VERSION}'.\n\n"
  exit 1
fi
export WOV_WPROJECT="${ALLVARS[1]}"
export WOV_PROJECTTYPE="${ALLVARS[2]}"
export WOV_PROJECTTITLE="${ALLVARS[3]}"
export WOV_PROJECTDESCRIPTION="${ALLVARS[4]}"
export WOV_ARCHIVEREPOSITORY="${ALLVARS[5]}"
export WOV_ARCHIVEENV="${ALLVARS[6]}"

# Unifying
# --------------------------------------------------------------------- 
export WOV_STAGE="$WOV_GSTAGE"        # GSTAGE has priority since it can represent <initials>-local, for local namespaces.
export WOV_PROJECT="${WOV_WPROJECT}"  


# --------------------------------------------------------------------- 
# Functions
# --------------------------------------------------------------------- 


# --------------------------------------------------------------------- 
# $1 - appending char(s): ex. ' ' or '\n'
# $2 - prepending char(s) : ex. 'export'
# --------------------------------------------------------------------- 
function fDoEcho() 
{
  local v=( 'WOV_VERSION' 'WOV_ME' 'WOV_BASEDIR' 'WOV_ARCHIVEREPOSITORY' 'WOV_ARCHIVEENV' 'WOV_CONTEXT' \
          'WOV_CLUSTER' 'WOV_NS' 'WOV_CLTYPE' 'WOV_PROVIDER' 'WOV_REGION' 'WOV_FLAVOR' 'WOV_PROJECT' \
          'WOV_KSTAGE' 'WOV_GSTAGE' 'WOV_STAGE' 'WOV_PVER' 'WOV_SVER' 'WOV_USERNAME' 'WOV_USEREMAIL' \
          'WOV_PROJECT' 'WOV_PROJECTTYPE' 'WOV_PROJECTTITLE' 'WOV_PROJECTDESCRIPTION' 'WOV_KPROJECT' \
          'WOV_WPROJECT' )

  for f in "${v[@]}"; do
    printf "$2$f='${!f}'$1"
  done
  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "$1"; fi
}


# --------------------------------------------------------------------- 
# TODO: fill this function in, and remove from WIAAS
#  NOTE: fills in REGIONVARS and exports variables as needed.
# --------------------------------------------------------------------- 
function fDoProvider() # Cluster()
{
  RANPROVIDER=1

  if [ "$WOV_PROVIDER" == "aws" ]; then . wov-env-aws; 
  else
    printf "\n\nERROR: Unknown provider to load env vars from : '${WOV_PROVIDER}'.\n\n"
    exit 1
  fi
}


# --------------------------------------------------------------------- 
# $1 - appending char(s): ex. ' ' or '\n'
# $2 - prepending char(s): ex. 'export '
# --------------------------------------------------------------------- 
function doProviderEcho
{
  for f in "${REGIONVARS[@]}"; do
    printf "$2$f='${!f}'$1"
  done
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doPrintVarX()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi
  R=`doPrintVarsENVS | grep "$1=" | cut -f2 -d"=" | ${SED} -e "s/^'//" -e "s/'$//"`
  if [ "$R" == "" ]; then
    R=${!1}
  fi
  echo $R
}

function doPrintVarsENVS()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "WOV_\($k)=" + @sh "\(.[$k])" '

  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "\n"; fi

  HAS_BUILDENV=1
}

function doPrintVarsCONF()
{
  doPrintVarsENVS | tr '\n' ' '
}

function doPrintVarsEXPORTS()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "export WOV_\($k)=" + @sh "\(.[$k])" '

  if [ "$RANPROVIDER" == "1" ]; then doProviderEcho "\n" "export "; fi

  HAS_BUILDENV=1
}

# --------------------------------------------------------------------- 
# Generate only the necessary env variables for microservices.
#  $1 - microservice name. ex. apisocket, apihal, etc.
#  $2 - "cm" or "se" for ConfigMap or Secrets
#  $3 - ?has newline? '1' puts on different lines, '0' all on same
# NOTE: This works by calling a javscript or shell script that 
#   generates the env vars. This script must end in 'js' or 'sh' and
#   be in ${1}/src/${1}config* or src/${1}config*.
# --------------------------------------------------------------------- 
function fConfGeneration()
{

  local R=

  # Read in envs
  if [ "${HAS_BUILDENV}" != "1" ]; then . <(doPrintVarsEXPORTS); fi

  # Get echo env vars, checking multiple locations
  if [ -e "${WOV_BASEDIR}/${1}/src/${1}config.js" ]; then
    local MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.js"
    if [ "$2" == "cm" ]; then 
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ) 
      RR=$?
    elif [ "$2" == "se" ]; then
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") )
      RR=$?
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.js" ]; then
    local MSCFILE="${WOV_BASEDIR}/src/${1}config.js"
    if [ "$2" == "cm" ]; then
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ) 
      RR=$?
    elif [ "$2" == "se" ]; then 
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") ) 
      RR=$?
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/${1}/src/${1}config.sh" ]; then
    local MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.sh"
    R=( $(${MSCFILE} $2) )
    RR=$?
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.sh" ]; then
    local MSCFILE="${WOV_BASEDIR}/src/${1}config.sh"
    R=( $(${MSCFILE} $2) )
    RR=$?
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  else
    (>&2 printf "\nERROR: could not find '${1}config.js'. Should be in ./src or ./${1}/src.\n\n")
    exit 1
  fi

#  R+=( WOV_STAGE=${WOV_STAGE} WOV_ME=${WOV_ME} )

  # echo "R: ${R[*]}"

  local SEP=' '
  if [ "$3" == "1" ]; then SEP='\n'; fi

  for f in "${R[@]}"; do
    printf "$f$SEP"
  done

}



# --------------------------------------------------------------------- 
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-e' ]; then
    ECHOMODE=1
  elif [ "$1" == '-E' ]; then
    ECHOMODE=2

  elif [ "$1" == '-c' ] || [ "$1" == '--cluster' ]; then
    shift
    doSetCluster $1

  elif [ "$1" == '-p' ] || [ "$1" == '--provider' ]; then
    fDoProvider # Cluster

  elif [ "$1" == "--conf" ]; then
#    doLoadConf
    doPrintVarsCONF

  elif [ "$1" == "--envs" ]; then
#    doLoadEnv
    doPrintVarsENVS


    # print one var
  elif [ "$1" == "--env-var" ]; then
    shift
    if [ "$CLUSTER" == "" ]; then printf "\n\nERROR($(basename $0)): no cluster set. Use the '--cluster X' option.\n\n"; fi
    command grep -h ${1} ${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}/[cs][me]/*.json | ${SED} -e 's/^.*[=]//' -e 's/^"//' -e 's/"$//'

  elif [ "$1" == "--exports" ]; then
#    doLoadExports
    doPrintVarsEXPORTS



#  elif [ "$1" == "--env" ]; then
#    shift
#    doEnv $1

#  elif [ "$1" == "--cmd" ]; then
#    shift
#    doCmd $1

#  elif [ "$1" == "--qcmd" ]; then
#    shift
#    doQCmd $1

#  elif [ "$1" == "--sl" ]; then
#    shift
#    doStringLiteral $1

#  elif [ "$1" == "--devmode" ]; then
#    shift
#    doManageDevmode $1

#  elif [ "$1" == "--local" ]; then
#    shift
#    doManageDevmode local

#  elif [ "$1" == "--remote" ]; then
#    shift
#    doManageDevmode remote

  elif [ "$1" == "--rcAWS" ]; then
    shift
    echo $(fConvertRegionCodeAWS $1)
    shift

  elif [ "$1" == "--cluster" ]; then
    shift
    CLUSTER=$1
    shift

  elif [ "$1" == "--cm" ]; then
    shift
    fConfGeneration $1 cm 1

  elif [ "$1" == "--se" ]; then
    shift
    fConfGeneration $1 se 1

  elif [ "$1" == "--CM" ]; then
    shift
    fConfGeneration $1 cm 0

  elif [ "$1" == "--SE" ]; then
    shift
    fConfGeneration $1 se 0

  elif [ "$1" == '--var' ]; then
    shift 
    V=$(doPrintVarX $1)
    if [ "$ECHOMODE" == "1" ]; then
      printf "$1=\"${V}\"\n"
    elif [ "$ECHOMODE" == "2" ]; then
      printf "$1=\"${V}\" "
    else
      echo ${V}
    fi
    DOALL=0
  elif [ "$1" == '-v' ] || [ "$1" == '--version' ]; then
    echo $WOV_VERSION

  elif [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
    fWovEnvDisplayOptions
    exit 0
  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    exit 1
  fi
  shift
done

# if user never asked to show any individual variables, show all
if [ "$DOALL" == "1" ]; then
  if   [ "$ECHOMODE" == "0" ]; then
    printf "" # do nothing
  elif [ "$ECHOMODE" == "1" ]; then
    fDoEcho "\n"
  elif [ "$ECHOMODE" == "2" ]; then
    fDoEcho " "
  else
    printf "\n\nERROR: Unknown echo mode '$ECHOMODE'.\n\n"
    exit 1
  fi
fi
