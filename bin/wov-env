#!/usr/bin/env bash
FOLD=$(tput cols)
CLUSTER=
ECHOMODE=0
DOALL=1
SED=`which gsed`
HAS_SECRET=0

function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Export the context as variables for scripts or export specific variables. 

This pulls config data from:
 - Wovtools project config (./wovtools/config.json)
 - Wovtools global config ($HOME/.wovtools)
 - K8s config
 - git

And secrets/config:
 - Wovtools project compiled secrets (./wovtools/cache/local/secrets.json)


Command Options:

  -h/--help     : display these options
  -v/--version  : version of wovtools
  --rcAWS       : convert a region code to an AWS code (ex. va-> us-east-1)
  --vh-label    : vh label in DockerHub repo
 
  Basic Configuration:
  -e            : echo the output
  -p/--provider : run cluster config as well (WAS -c/--cluster) FIXME|TODO

  Secrets/Config:
  --envs        : print all the configuration as environment variables (sep lines)
  --conf        : print all the configuration as environment variables (one line)
  --exports     : runs all the configuration as environment variables (no output, sourced)
  --var X       : print this variable X

  Kubernetes Generation 
    NOTE: These use Make to run a script... not good... need better way to run
  -c/--cluster X  : set the cluster to X (required for --cm/--se)
  --cm X          : only config used by plugin, (sep lines)
  --se X          : only secrets used by plugin, (sep lines)

Example Usage:
  `basename $0`    : sets all environment variables
  `basename $0` -e : set and echo all environment variables
  `basename $0` --var X : set the env variable
  `basename $0` -e --var X : set and echo the env variable

EOF
}
if [ "$1" == '--help' ] || [ "$1" == '-h' ]; then fDisplayOptions; exit 0; fi


# --------------------------------------------------------------------- 
# Used to select between vh containers (just exists with 0.1).
# --------------------------------------------------------------------- 
if [ "$1" == "--vh-label" ]; then echo "0.1"; exit 0; fi


# --------------------------------------------------------------------- 
# Start
# --------------------------------------------------------------------- 
WOV_VERSION=0
export WOV_VERSION
WOV_BASEDIR=$(git rev-parse --show-toplevel)
export WOV_BASEDIR
if [ "$WOV_BASEDIR" == "" ]; then
  echo "ERROR: not in wovtools project (no git)."
  exit 1
elif [ ! -e "$WOV_BASEDIR/wovtools" ]; then
  echo "ERROR: not in wovtools project (no wovtools directory)."
  exit 1
elif [ ! -e "${WOV_BASEDIR}/wovtools/config.json" ]; then
  echo "ERROR: not in wovtools project (no wovtools/config.json file)."
  exit 1
fi


# --------------------------------------------------------------------- 
# Sets the cluster we are generating environment vars for. By default,
# generates using settings in 'local', which is generated by wov-build
# using the 'localcontext' entry. So, 'local' points to whatever 
# cluster this project considers the localcontext.
# --------------------------------------------------------------------- 
function doSetCluster
{
  CLUSTER=$1
  WOV_SECRETFILE=${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}/secrets.json
  export WOV_SECRETFILE
}
doSetCluster "local"


# --------------------------------------------------------------------- 
# Calls wov-build to build the secretfile if it does not exist.
# --------------------------------------------------------------------- 
function fBuildSecret
{ if [ ! -e "${WOV_SECRETFILE}" ]; then wov-build --secrets ${CLUSTER}; fi }






# Standard Bash breakdown of context
WOV_CONTEXT=$(kubectl config current-context)
OLDIFS=$IFS
IFS='-'
array=( $WOV_CONTEXT )
IFS=$OLDIFS
#echo "value = ${array[2]}"
#echo ${array[*]}
WOV_KSTAGE=${array[5]}
WOV_KPROJECT=${array[4]}
WOV_NS=${WOV_KPROJECT}-${WOV_KSTAGE}
export WOV_BASEDIR
WOV_FLAVOR=${array[3]}
WOV_REGION=${array[2]}
WOV_PROVIDER=${array[1]}
WOV_CLTYPE=${array[0]}
WOV_CLUSTER=${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${WOV_FLAVOR}

# vars from git, if in project directory
WOV_PVER=$(git rev-list --count $(git rev-parse --abbrev-ref HEAD))
WOV_SVER=$(cd ${WOV_BASEDIR}/wovtools/secrets && git rev-list --count $(git rev-parse --abbrev-ref HEAD))
# WOV_USER=$(git config user.email | cut -d@ -f1)
WOV_USERNAME=$(git config user.name)
WOV_USEREMAIL=$(git config user.email)
export WOV_PVER
export WOV_SVER
#  export WOV_USER
export WOV_USERNAME
export WOV_USEREMAIL

# TODO:  optimize the jq calls into one, returning an array
#A=( `jq -r ". | ( .rootdir, .srcdir, .secretsdir, .compileddir, .containerdir, .registry, .wovtools )" ${dir_wovtools_rc}/.wovtools.json` )
#echo "A:${A[*]}:A"
#dir_root="${A[0]}"


WOV_ME=$(cat ${HOME}/.wovtools | jq -r '.me')
if [ "${WOV_ME}" == "null" ] ; then
  printf "\n\nERROR: You need to set 'me' in the wovtools/config.json file.\n"
  printf "  - This is a unique code in this project, to represent yourself. Try using your initials (assuming they are unique to your team).\n\n"
  exit 1

fi

WOV_PVERSION=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.ver')
if [ "${WOV_PVERSION}" != "${WOV_VERSION}" ] && [ "${WOV_PVERSION}" != "initing" ] ; then
  printf "\n\nERROR: Your project version '${WOV_PVERSION}', does not match to the WovTools version '${WOV_VERSION}'.\n\n"
  exit 1
fi

SECONDS=0
WOV_WPROJECT=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.project.project') 
WOV_PROJECTTYPE=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.project.type') 
WOV_PROJECTTITLE=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.project.title') 
WOV_PROJECTDESCRIPTION=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.project.description') 
export WOV_WPROJECT
export WOV_PROJECTTYPE
export WOV_PROJECTTITLE
export WOV_PROJECTDESCRIPTION

# Track which mode we are in
#WOV_DEVMODE=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.project.devmode') 
#if [ "$WOV_DEVMODE" == "" ]; then WOV_DEVMODE="remote"; fi
#export WOV_DEVMODE

WOV_ARCHIVEREPOSITORY=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.archive.repository') 
WOV_ARCHIVEENV=$(cat ${WOV_BASEDIR}/wovtools/config.json | jq -r '.archive.env') 
export WOV_ARCHIVEREPOSITORY
export WOV_ARCHIVEENV

WOV_GSTAGE=$(git rev-parse --abbrev-ref HEAD)
WOV_STAGE=$WOV_GSTAGE
  # GSTAGE has priority since it can represent <initials>-local, for local namespaces.
export WOV_GSTAGE
export WOV_STAGE

## Set DEVMODE 
#if [[ ${WOV_GSTAGE} == "${WOV_KSTAGE}-l" ]]; then
#  WOV_DEVMODE=local
#elif [[ ${WOV_GSTAGE} == "${WOV_KSTAGE}-v" ]]; then
#  WOV_DEVMODE=virtual
#fi
#export WOV_DEVMODE

WOV_PROJECT=${WOV_WPROJECT}
export WOV_PROJECT

export WOV_CONTEXT
export WOV_CLUSTER
export WOV_NS
export WOV_CLTYPE
export WOV_PROVIDER
export WOV_REGION
export WOV_FLAVOR
export WOV_PROJECT
export WOV_KSTAGE

# --------------------------------------------------------------------- 
# Functions
# --------------------------------------------------------------------- 

function fDoEcho() 
{
  echo WOV_VERSION="${WOV_VERSION}"
  echo WOV_ME="${WOV_ME}"
  echo WOV_BASEDIR="${WOV_BASEDIR}"
  echo WOV_SECRETFILE="${WOV_SECRETFILE}"
  echo WOV_ARCHIVEREPOSITORY="${WOV_ARCHIVEREPOSITORY}"
  echo WOV_ARCHIVEENV="${WOV_ARCHIVEENV}"
  echo WOV_CONTEXT="$WOV_CONTEXT"
  echo WOV_CLUSTER="$WOV_CLUSTER"
  echo WOV_NS="$WOV_NS"
  echo WOV_CLTYPE="$WOV_CLTYPE"
  echo WOV_PROVIDER="$WOV_PROVIDER"
  echo WOV_REGION="$WOV_REGION"
  echo WOV_FLAVOR="$WOV_FLAVOR"
  echo WOV_PROJECT="$WOV_PROJECT"
  echo WOV_KSTAGE="$WOV_KSTAGE"
  echo WOV_GSTAGE="$WOV_GSTAGE"
  echo WOV_STAGE="$WOV_STAGE"
#  echo WOV_DEVMODE="${WOV_DEVMODE}"
  if [ "$RANPROVIDER" == "1" ]; then
    echo CL_REGION="$CL_REGION"
    echo CL_ZONES="${CL_ZONES}"
    echo CL_VPC="${CL_VPC}"
  fi

  echo WOV_PVER="$WOV_PVER"
  echo WOV_SVER="$WOV_SVER"
#    echo WOV_USER="$WOV_USER"
  echo WOV_USERNAME="$WOV_USERNAME"
  echo WOV_USEREMAIL="$WOV_USEREMAIL"
  echo WOV_PROJECT="$WOV_PROJECT"
  echo WOV_PROJECTTYPE="$WOV_PROJECTTYPE"
  echo WOV_PROJECTTITLE="$WOV_PROJECTTITLE"
  echo WOV_PROJECTDESCRIPTION="$WOV_PROJECTDESCRIPTION"
  echo WOV_KPROJECT="$WOV_KPROJECT"
  echo WOV_WPROJECT="$WOV_WPROJECT"
}

function fDoBashEcho() 
{
  printf "WOV_VERSION=\"${WOV_VERSION}\" "
  printf "WOV_ME=\"${WOV_ME}\" "
  printf "WOV_BASEDIR=\"${WOV_BASEDIR}\" "
  printf "WOV_ARCHIVEREPOSITORY=\"${WOV_ARCHIVEREPOSITORY}\" "
  printf "WOV_ARCHIVEENV=\"${WOV_ARCHIVEENV}\" "
  printf "WOV_CONTEXT=\"$WOV_CONTEXT\" "
  printf "WOV_CLUSTER=\"$WOV_CLUSTER\" "
  printf "WOV_NS=\"$WOV_NS\" "
  printf "WOV_CLTYPE=\"$WOV_CLTYPE\" "
  printf "WOV_PROVIDER=\"$WOV_PROVIDER\" "
  printf "WOV_REGION=\"$WOV_REGION\" "
  printf "WOV_FLAVOR=\"$WOV_FLAVOR\" "
  printf "WOV_PROJECT=\"$WOV_PROJECT\" "
  printf "WOV_KSTAGE=\"$WOV_KSTAGE\" "
  printf "WOV_GSTAGE=\"$WOV_GSTAGE\" "
  printf "WOV_STAGE=\"$WOV_STAGE\" "
  printf "WOV_PVER=\"$WOV_PVER\" "
  printf "WOV_SVER=\"$WOV_SVER\" "
  printf "WOV_USERNAME=\"$WOV_USERNAME\" "
  printf "WOV_USEREMAIL=\"$WOV_USEREMAIL\" "
  printf "WOV_PROJECT=\"$WOV_PROJECT\" "
  printf "WOV_PROJECTTYPE=\"$WOV_PROJECTTYPE\" "
  printf "WOV_PROJECTTITLE=\"$WOV_PROJECTTITLE\" "
  printf "WOV_PROJECTDESCRIPTION=\"$WOV_PROJECTDESCRIPTION\" "
  printf "WOV_KPROJECT=\"$WOV_KPROJECT\" "
  printf "WOV_WPROJECT=\"$WOV_WPROJECT\" "
  if [ "$RANPROVIDER" == "1" ]; then
    printf "CL_REGION=\"$CL_REGION\" "
    printf "CL_ZONES=\"${CL_ZONES}\" "
    printf "CL_VPC=\"${CL_VPC}\" "
  fi
}

# TODO: fill this function in, and remove from WIAAS
function fDoProvider() # Cluster()
{
  echo " NOTE: for now, ignore fDoProvider (used to be Cluster) as it should load a wov-env-PROVIDER file for specific functionality"
  RANPROVIDER=1
  fConvertRegionCodeAWS ${WOV_REGION}
  CL_REGION=$cRC
  CL_ZONES="c d"
  CL_VPC=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${WOV_CLUSTER}-vpc" --query 'Vpcs[0].VpcId' | ${SED} -e 's/^"//' -e 's/"$//')
  export CL_REGION
  export CL_ZONES
  export CL_VPC
}


function doPrintVarX()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi
  R=`doPrintVarsENVS | grep "$1=" | cut -f2 -d"=" | ${SED} -e "s/^'//" -e "s/'$//"`
  if [ "$R" == "" ]; then
    R=${!1}
  fi
  echo $R
}

function doPrintVarsENVS()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "WOV_\($k)=" + @sh "\(.[$k])" '

  if [ "${CL_REGION}" != "" ]; then echo "CL_REGION='${CL_REGION}'"; fi
  if [ "${CL_ZONES}"  != "" ]; then echo "CL_ZONES='${CL_ZONES}'"; fi
  if [ "${CL_VPC}"    != "" ]; then echo "CL_VPC='${CL_VPC}'"; fi

  HAS_BUILDENV=1
}

function doPrintVarsCONF()
{
  doPrintVarsENVS | tr '\n' ' '
}

function doPrintVarsEXPORTS()
{
  if [ "$HAS_SECRET" == "0" ]; then fBuildSecret; fi

  cat ${WOV_SECRETFILE} |
    jq  -r 'walk( if type == "object" then with_entries(select( .key | test("STAGE.+") or test("//*") | not)) else . end) | [leaf_paths as $path | {"key": $path | join("_"), "value": getpath($path)}] | from_entries | keys[] as $k | "export WOV_\($k)=" + @sh "\(.[$k])" '

  if [ "${CL_REGION}" != "" ]; then echo "export CL_REGION='${CL_REGION}'"; fi
  if [ "${CL_ZONES}"  != "" ]; then echo "export CL_ZONES='${CL_ZONES}'"; fi
  if [ "${CL_VPC}"    != "" ]; then echo "export CL_VPC='${CL_VPC}'"; fi

  HAS_BUILDENV=1
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fConvertRegionCodeAWS()
{
  case $1 in
    va) cRC='us-east-1' ;;
    iad) cRC='us-east-1' ;;
    *)
      echo
      echo "***ERROR: unknown AWS region code of '$1'."
      exit 1
  esac
}


# --------------------------------------------------------------------- 
# Generate only the necessary env variables for microservices.
#  $1 - microservice name. ex. apisocket, apihal, etc.
#  $2 - "cm" or "se" for ConfigMap or Secrets
#  $3 - ?has newline? '1' puts on different lines, '0' all on same
# NOTE: This works by calling a javscript or shell script that 
#   generates the env vars. This script must end in 'js' or 'sh' and
#   be in ${1}/src/${1}config* or src/${1}config*.
# --------------------------------------------------------------------- 
function fConfGeneration()
{

  local R=

  # Read in envs
  if [ "${HAS_BUILDENV}" != "1" ]; then . <(doPrintVarsEXPORTS); fi

  # Get echo env vars, checking multiple locations
  if [ -e "${WOV_BASEDIR}/${1}/src/${1}config.js" ]; then
    local MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.js"
    if [ "$2" == "cm" ]; then 
      set -x
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ) 
      RR=$?
      set +x
    elif [ "$2" == "se" ]; then
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") )
      RR=$?
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.js" ]; then
    local MSCFILE="${WOV_BASEDIR}/src/${1}config.js"
    if [ "$2" == "cm" ]; then
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SConfigMap())") ) 
      RR=$?
    elif [ "$2" == "se" ]; then 
      R=( $(node -e "console.log((new (require('${MSCFILE}'))())._genK8SSecrets())") ) 
      RR=$?
    fi
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/${1}/src/${1}config.sh" ]; then
    local MSCFILE="${WOV_BASEDIR}/${1}/src/${1}config.sh"
    R=( $(${MSCFILE} $2) )
    RR=$?
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  elif [ -e "${WOV_BASEDIR}/src/${1}config.sh" ]; then
    local MSCFILE="${WOV_BASEDIR}/src/${1}config.sh"
    R=( $(${MSCFILE} $2) )
    RR=$?
    if [ "${RR}" != "0" ]; then echo "ERROR: failed to generate '${1}' config from NodeJS source code."; exit 1 ; fi

  else
    (>&2 printf "\nERROR: could not find '${1}config.js'. Should be in ./src or ./${1}/src.\n\n")
    exit 1
  fi

#  R+=( WOV_STAGE=${WOV_STAGE} WOV_ME=${WOV_ME} )

  echo "R: ${R[*]}"

  local SEP=' '
  if [ "$3" == "1" ]; then SEP='\n'; fi

  for f in "${R[@]}"; do
    printf "$f$SEP"
  done

}



# --------------------------------------------------------------------- 
# Command line processing
while [[ $1 =~ ^- ]]; do
  if [ "$1" == '-e' ] || [ "$1" == '--echo' ]; then
    ECHOMODE=1
  elif [ "$1" == '-E' ] || [ "$1" == '--bash-echo' ]; then
    ECHOMODE=2

  elif [ "$1" == '-c' ] || [ "$1" == '--cluster' ]; then
    shift
    doSetCluster $1

  elif [ "$1" == '-p' ] || [ "$1" == '--provider' ]; then
    fDoProvider # Cluster

  elif [ "$1" == "--conf" ]; then
#    doLoadConf
    doPrintVarsCONF

  elif [ "$1" == "--envs" ]; then
#    doLoadEnv
    doPrintVarsENVS


    # print one var
  elif [ "$1" == "--env-var" ]; then
    shift
    if [ "$CLUSTER" == "" ]; then printf "\n\nERROR($(basename $0)): no cluster set. Use the '--cluster X' option.\n\n"; fi
    command grep -h ${1} ${WOV_BASEDIR}/wovtools/cache/clusters/${CLUSTER}/[cs][me]/*.json | ${SED} -e 's/^.*[=]//' -e 's/^"//' -e 's/"$//'

  elif [ "$1" == "--exports" ]; then
#    doLoadExports
    doPrintVarsEXPORTS



#  elif [ "$1" == "--env" ]; then
#    shift
#    doEnv $1

#  elif [ "$1" == "--cmd" ]; then
#    shift
#    doCmd $1

#  elif [ "$1" == "--qcmd" ]; then
#    shift
#    doQCmd $1

#  elif [ "$1" == "--sl" ]; then
#    shift
#    doStringLiteral $1

#  elif [ "$1" == "--devmode" ]; then
#    shift
#    doManageDevmode $1

#  elif [ "$1" == "--local" ]; then
#    shift
#    doManageDevmode local

#  elif [ "$1" == "--remote" ]; then
#    shift
#    doManageDevmode remote

  elif [ "$1" == "--rcAWS" ]; then
    shift
    fConvertRegionCodeAWS $1
    echo "$cRC"
    shift

  elif [ "$1" == "--cluster" ]; then
    shift
    CLUSTER=$1
    shift

  elif [ "$1" == "--cm" ]; then
    shift
    fConfGeneration $1 cm 1

  elif [ "$1" == "--se" ]; then
    shift
    fConfGeneration $1 se 1

  elif [ "$1" == "--CM" ]; then
    shift
    fConfGeneration $1 cm 0

  elif [ "$1" == "--SE" ]; then
    shift
    fConfGeneration $1 se 0

  elif [ "$1" == '--var' ]; then
    shift 
    V=$(doPrintVarX $1)
    if [ "$ECHOMODE" == "1" ]; then
      echo "$1=${V}"
    else
      echo ${V}
    fi
    DOALL=0
  elif [ "$1" == '-v' ] || [ "$1" == '--version' ]; then
    echo $WOV_VERSION

  elif [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
    fDisplayOptions
    exit 0
  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    exit 1
  fi
  shift
done

# if user never asked to show any individual variables, show all
if [ "$DOALL" == "1" ]; then
  if [ "$ECHOMODE" == "1" ]; then
    fDoEcho
  elif [ "$ECHOMODE" == "2" ]; then
    fDoBashEcho
  fi
fi
