#!/usr/bin/env bash


# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
wov-env-build -q --local
pushdbenvargs=( "$@" )
set ""
. <(wov-env --exports -e)
. wov-env-common
set -- "${pushdbenvargs[@]}"

DOECHO=1
FOLD=$(tput cols)
DATABASESERVER=
DB_COMMAND=
DB_OP=
DB_FILE=

DB_HEADEROPTIONS=

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` DBSERVER {options}

Connect to a database server via SSH tunnelling through the bastion host. Takes information from Woveon environment variables. The default command is (-c) to open a shell.

DBSERVER - the name of a database server in the project (created via wov-cluster-createdb).

  -h : this help
  -q/-v : quiet/verbose

 Database Commands:
  -c [command]  : run a DB command
  -f [file]     : load file of SQL commands into a DB
  --schema      : return the DB's schema

 Data Mods:
  -d [database] : changes the database name (DB inside the DB server)
  -U [user]     : DB user
  -p            : prompt for a password

 DataSets : non-production data management:
  --data-schema/-ds : reloads the database schema (clearing existing data)
  --data-clear/-dc  : clears data in the database
  --data-data/-dd   : loads the database data
  --data-full/-df   : loads a full DataSet by loading schema, clear and load data

 Local Postgres via Docker:
  --docker-postgres-start : start a local Postgres database via Docker
  --docker-postgres-stop  : stop a local Postgres database in Docker


NOTE:
About commands (-c)... you have to be careful about quotes as both bash and psql are very particular. Here, use single quotes so '*' is not expanded, and quote the single quote so mydatabase is interpret properly by postgres.

ex. -c 'SELECT * FROM logs WHERE database=\'mydatabase\' ORDER BY id DESC LIMIT 1'

EOF
}

# Help command catch here
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then fDisplayOptions; exit 0; fi


# Set the default commands
if [ "$#" == "0" ] && [ "$WOV_PROJECTTYPE" != "pl" ] ; then
  printf "\n\nERROR: need to provide the name of the database server.\n"
  sleep .8
  fDisplayOptions
  exit 1
fi
DATABASESERVER=$1
shift


# --------------------------------------------------------------------- 
# Set config from env vars and project type
# --------------------------------------------------------------------- 
DB_TYPE=WOV_${DATABASESERVER}_type
DB_DATABASE=WOV_${DATABASESERVER}_database
DB_USERNAME=WOV_${DATABASESERVER}_username
DB_PASSWORD=WOV_${DATABASESERVER}_password
DB_HOST=WOV_${DATABASESERVER}_host
DB_PORT=WOV_${DATABASESERVER}_port

DB_HEADEROPTIONS=-t

## if in Plugin and using default database, default to the mongodb
#if [[ ( "$DATABASESERVER" == "" ) || ( "$DATABASESERVER" == "${WOV_PROJECT}db" ) ]] && [[ "${WOV_PROJECTTYPE}" == "pl" ]]; then
#  # echo "...defaulting to plugin mongodb."
#  DB_TYPE=WOV_we_db_type
#  DB_DATABASE=WOV_we_db_collection
#  DB_USERNAME=WOV_we_db_user
#  DB_PASSWORD=WOV_we_db_password
#  DB_HOST=WOV_we_db_url
#  DB_PORT=WOV_we_db_port
#  DATABASESERVER=${WOV_PROJECT}db
#fi

# Set variables to values of the name
DB_TYPE=${!DB_TYPE}
DB_DATABASE=${!DB_DATABASE}
DB_USERNAME=${!DB_USERNAME}
DB_PASSWORD=${!DB_PASSWORD}
DB_HOST=${!DB_HOST}
DB_PORT=${!DB_PORT}


# NOTE: using bastion so this overrides cluster settings
#DB_PORT=$(wov-bastion --bhost ${WOV_CLUSTER}-bastion --ldp ${DATABASESERVER})
#DB_HOST=localhost   # bastion

# --------------------------------------------------------------------- 
# Builds the X data set for a database from the wovtools/data/X_* files
#  $1 - data set name (ex. alywan)
# --------------------------------------------------------------------- 
function doDBDataBuild()
{
  if [ "$1" == "" ]; then echo "ERROR: need a data set name parameter to wov-db-connect::doDBDataBuild."; exit 1; fi

  local DATASETFILES=( 'schema' 'data' 'clear' )

  # Make the target directory
  mkdir -m 700 -p ${WOV_BASEDIR}/wovtools/cache/data
  if [ $? -ne 0 ]; then echo "ERROR: failed to make target data directory in cache."; exit 1; fi

  for f in ${DATASETFILES[@]}; do

    local fname=`cd ${WOV_BASEDIR}/wovtools/data ; ls $1_$f.*`
    # echo "f: '${f}'  fname: '${fname}'   last 4: '${fname: -4}'"

    # compile file if it has .wov on it
    if [ "${fname: -4}" == ".wov" ]; then
      local finname="${fname::-4}"
      if [ ! -e "${WOV_BASEDIR}/wovtools/cache/data/${finname}" ] ||
         [ "${WOV_BASEDIR}/wovtools/data/${1}_const.js" -nt "${WOV_BASEDIR}/wovtools/cache/data/${finname}" ] ||
         [ "${WOV_BASEDIR}/wovtools/data/${fname}" -nt "${WOV_BASEDIR}/wovtools/cache/data/${finname}" ]; then
        if [ ${DOECHO} -ge 1 ]; then echo "  ... compile ${finname}"; fi
        WOV_BASEDIR=${WOV_BASEDIR} wov-compile -ds ${1} "${WOV_BASEDIR}/wovtools/cache/clusters/${WOV_CLUSTER}/secrets.json" "${WOV_BASEDIR}/wovtools/data/${fname}" > "${WOV_BASEDIR}/wovtools/cache/data/${finname}"
      fi

    # or copy it over
    else
      if [ ! -e "${WOV_BASEDIR}/wovtools/cache/data/${fname}" ]; then
        if [ ${DOECHO} -ge 1 ]; then echo "  ... cp ${fname}"; fi
        cp "${WOV_BASEDIR}/wovtools/data/${fname}" "${WOV_BASEDIR}/wovtools/cache/data/."
      fi
    fi

  done
}


# --------------------------------------------------------------------- 
# Loads a data set file.
# $1 - data set to use
# #2 - data command to run: schema, clear or data which match to a file 
# --------------------------------------------------------------------- 
function doDBDataCommand()
{
  if [ "$WOV_STAGE" == "prod" ]; then echo "ERROR: wov-db-connect DataSets do not work on production."; exit 1; fi
  if [ "$1" == "" ]; then echo "ERROR: need a data set name parameter to wov-db-connect::doDBDataCommand."; exit 1; fi
  if [ "$2" == "schema" ] ||
     [ "$2" == "clear" ] ||
     [ "$2" == "data" ]; then
    local A=1
  else
    echo "ERROR: Unknown command for doDBDataCommand of '${2}'. Should be one of 'schema', 'clear', or 'data'."
    exit 1
  fi

  R=$(PGPASSWORD=${DB_PASSWORD} psql --quiet -P "footer=off" -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -f "${WOV_BASEDIR}/wovtools/cache/data/${1}_${2}.sql") ; Re=$?
  if [ ${DOECHO} -ge 2 ]; then echo "${R}"; fi
  if [ ${DOECHO} -ge 1 ]; then echo "  ... loaded ${1}_${2}.sql"; fi
  if [ "$Re" != "0" ]; then
    printf "\n\nERROR: could not connect... have you tunneled to the bastion server?\n\n"
    exit 1
  fi
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function doDatabaseConnectMessage()
{
  printf "\n\n"
  figlet "${WOV_NS}"
  printf "  DBServer : ${DATABASESERVER}\n"
  printf "  Type     : ${DB_TYPE}\n"
  printf "  User     : ${DB_USERNAME}\n"
  printf "  Host     : ${DB_HOST}\n"
  printf "  Port     : ${DB_PORT}\n"
  printf "  Database : ${DB_DATABASE}\n\n"
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function setAsAdmin()
{
  DB_USERNAME="$(wov-env --var WOV_${DATABASESERVER}_admin_username)"
  DB_PASSWORD="$(wov-env --var WOV_${DATABASESERVER}_admin_password)"
  if [ "${DB_USERNAME}" == "" ] || [ "${DB_PASSWORD}" == "" ]; then
    printf "\n\nERROR: Setting as admin, but you have no admin configured. Ensure WOV_${DATABASESERVER}_admin_[username/password] is configured in your secrets.\n\n"
    exit 1
  fi
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-p" ]; then
    shift
    read DB_PASSWORD
    shift

  elif [ "$1" == "--admin" ]; then
    shift
    setAsAdmin

#  elif [ "$1" == "-n" ] || [ "$1" == "--namespace" ]; then
#    shift
#    NAMESPACE="${1}"
#    shift

  elif [ "$1" == "-U" ]; then
    shift
    DB_USERNAME="$1"
    shift

  elif [ "$1" == "-d" ]; then
    shift
    DB_DATABASE="$1"
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DB_OP="file"
    DB_FILE="$1"
    shift

  elif [ "$1" == "--headers" ]; then
    shift
    DB_HEADEROPTIONS=

  elif [ "$1" == "--noheaders" ]; then
    shift
    DB_HEADEROPTIONS=-t

  elif [ "$1" == "-c" ]; then
    shift
    DB_OP="command"
    DB_COMMAND="$1" # ( $1 )
    #DB_COMMAND2=( $1 )
    #echo "DB_COMMAND1 : '${DB_COMMAND}'"
    #echo "DB_COMMAND2 : '${DB_COMMAND2[*]}'"
    shift

  elif [ "$1" == "--schema" ]; then
    shift
    DB_OP="schema"

  elif [ "$1" == "--data-schema" ] || [ "$1" == "-ds" ]; then
    shift
    doDBDataBuild $1
    doDBDataCommand $1 "schema"
    exit 0
    shift

  elif [ "$1" == "--data-clear" ] || [ "$1" == "-dc" ]; then
    shift
    doDBDataBuild $1
    doDBDataCommand $1 "clear"
    exit 0
    shift

  elif [ "$1" == "--data-data" ] || [ "$1" == "-dd" ]; then
    shift
    doDBDataBuild $1
    doDBDataCommand $1 "data"
    exit 0
    shift

  elif [ "$1" == "--data-full" ] || [ "$1" == "-df" ]; then
    shift
    doDBDataBuild $1
    doDBDataCommand $1 'schema'
    doDBDataCommand $1 'clear'
    doDBDataCommand $1 'data'
    exit 0
    shift

  elif [ "$1" == "--docker-postgres-start" ]; then
    shift
    pg_isready -p 5432 -h localhost 2>&1  > /dev/null
    A=$?
    if [ "$A" == "0" ]; then echo "ERROR: postgres already accepting connections. Try --docker-postgres-stop."; exit 1; fi
    docker run --rm --name postgres-local -e POSTGRES_PASSWORD=${DB_PASSWORD} -d -p 5432:5432 postgres
    I=0
    while [ "$(pg_isready -p 5432 -h localhost 2>&1 > /dev/null ; echo $?)" != "0" ]; do
      sleep 1 # sleep to account for time for it to spin up
      I=$((I + 1))
      if [ $I -gt 10 ]; then echo "ERROR: failed to connect to local postgres." ; exit 1; fi
    done
    PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USERNAME} -c "create database ${DB_DATABASE}"  > /dev/null
    if [ "$?" != "0" ]; then echo "ERROR: could not create database of '${DB_DATABASE}'."; exit 1; fi
    echo "  ... success"
    exit 0

  elif [ "$1" == "--docker-postgres-stop" ]; then
    shift
    docker stop postgres-local > /dev/null
    if [ "$?" == "0" ]; then echo "  ... success"; exit 0; fi
    exit 0

  elif [ "$1" == "-H" ]; then
    shift
    DB_HOST="$1"
    shift

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done



#if [ $DOECHO -ge 1 ]; then echo "... connecting to ${DATABASESERVER} (${DB_HOST}) via vh (user ${DB_USERNAME} on ${DB_DATABASE})"; fi


# Check vh pod exists
# wov-p vh >/dev/null
#kubectl get pods vh > /dev/null
#if [ "$?" == "1" ]; then
#  printf "\n\nERROR: 'vh' has not been created. Run 'wov-vh -s'.\n\n"
#  exit 1
#fi

if [ "${DB_TYPE}" == "postgres" ]; then

  if [ "${DB_OP}" == "schema" ]; then
    # Log into pod 'vh', run pg_dump
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec -i vh -- /bin/bash -c "PGPASSWORD=${DB_PASSWORD} pg_dump -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -s"
#    else
#      PGPASSWORD=${DB_PASSWORD} pg_dump -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -s
#    fi

    PGPASSWORD="${DB_PASSWORD}" pg_dump -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -s
    if [ "$?" != "0" ]; then
      printf "\n\nERROR: could not connect... have you tunneled to the bastion server?\n\n"
      exit 1
    fi

  elif [ "${DB_OP}" == "command" ]; then
    # Log into pod 'vh', run psql
#    echo "dbcommand  : \"${DB_COMMAND}\""
#    echo "dbcommand q: \"${DB_COMMAND[@]}\""
#    VARS=( "PGPASSWORD=${DB_PASSWORD}" "psql" "--tuples-only" "-h" "${DB_HOST}" "-U" "${DB_USERNAME}" "-d" "${DB_DATABASE}" "-c" "${DB_COMMAND}" )
#    kubectl exec -i vh -- /bin/bash -c "${VARS[@]}"
#    kubectl exec -i vh -- /bin/bash -c "PGPASSWORD=${DB_PASSWORD} psql --tuples-only -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -c ${DB_COMMAND}"
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec -i vh -- /bin/bash -c "PGPASSWORD=${DB_PASSWORD} psql --tuples-only -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -c \"${DB_COMMAND[@]}\""
#    else
#      PGPASSWORD=${DB_PASSWORD} psql --tuples-only -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -c \"${DB_COMMAND[@]}\"
#    fi

    PGPASSWORD="${DB_PASSWORD}" psql ${DB_HEADEROPTIONS} -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -c "${DB_COMMAND[*]}"
    #PGPASSWORD=${DB_PASSWORD} psql --tuples-only -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -c "${DB_COMMAND[*]}"
    if [ "$?" != "0" ]; then
      printf "\n\nERROR: could not connect... have you tunneled to the bastion server?\n\n"
    fi


  elif [ "${DB_OP}" == "file" ]; then
    # copy file; exectute it in database, delete file
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl cp ${DB_FILE} vh:.${DATABASESERVER}.sql.$$
#      kubectl exec -i vh -- /bin/bash -c "PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -f .${DATABASESERVER}.sql.$$"
#      kubectl exec -i vh -- /bin/bash -c "rm -f .${DATABASESERVER}.sql.$$"
#    else
#      PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -f ${DB_FILE}
#    fi
    PGPASSWORD="${DB_PASSWORD}" psql -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE} -f ${DB_FILE}
    if [ "$?" != "0" ]; then
      printf "\n\nERROR: could not connect... have you tunneled to the bastion server?\n\n"
      exit 1
    fi

  elif [ "${DB_OP}" == "" ]; then
    # Log into pod 'vh', run psql
    if [ $DOECHO -ge 1 ]; then doDatabaseConnectMessage; fi
    if [ $DOECHO -ge 2 ]; then echo "... connect with 'PGPASSWORD=... psql -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE}'"; fi
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec -it vh -- /bin/bash -c "PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE}"
#    else
#      PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE}
#    fi
    PGPASSWORD="${DB_PASSWORD}" psql -p ${DB_PORT} -h ${DB_HOST} -U ${DB_USERNAME} -d ${DB_DATABASE}
    if [ "$?" != "0" ]; then
      printf "\n\nERROR: could not connect... have you tunneled to the bastion server?\n\n"
      exit 1
    fi
  fi

elif [ "${DB_TYPE}" == "mongo" ]; then


  if [ "${DB_OP}" == "schema" ]; then
    # NOTE: mongo has no schema, so taking from first returned object
    DB_COMMAND=$(cat <<EOF
function printSchema(obj) {
  for (var key in obj) {
    print(' ', key, typeof obj[key]) ;
  }
};
db.getCollectionNames().forEach(function(collname) {
  print('COLLECTION:', collname);
  // printSchema(db[collname].findOne()); // NOTE: not calling since if there is no object, then no schema
})
EOF
)

    kubectl exec -it $(wov-p ${DATABASESERVER}-${WOV_STAGE} ) -- sh -c "mongo --quiet ${DB_DATABASE} --eval \"${DB_COMMAND}\""
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec -it vh -- /bin/bash -c "mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} --eval \"${DB_COMMAND}\""
#    else
#      mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} --eval \"${DB_COMMAND}\"
#    fi


  elif [ "${DB_OP}" == "command" ]; then
    kubectl exec -it $(wov-p ${DATABASESERVER}-${WOV_STAGE} ) -- sh -c "mongo --quiet ${DB_DATABASE} --eval \"${DB_COMMAND}\""
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec -it vh -- /bin/bash -c "mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} --eval \"${DB_COMMAND}\""
#    else
#      mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} --eval \"${DB_COMMAND}\"
#    fi
  elif [ "${DB_OP}" == "file" ]; then
    printf "\nFile: untested\n\n";
    if [ "${DB_HOST}" != "localhost" ]; then
      kubectl cp ${DB_FILE} vh:.${DATABASESERVER}.sql.$$
      kubectl exec -it vh -- /bin/bash -c "mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} ${DBSERVER}.sql.$$"
      kubectl exec -i vh -- /bin/bash -c "rm -f .${DATABASESERVER}.sql.$$"
    else
      mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE} ${DB_FILE}
    fi
  elif [ "${DB_OP}" == "" ]; then
    if [ $DOECHO -ge 1 ]; then doDatabaseConnectMessage; fi
    
    echo "entering pod ${DATABASESERVER}-${WOV_STAGE}"
    kubectl exec -it $(wov-p ${DATABASESERVER}-${WOV_STAGE} ) -- sh -c "mongo --quiet ${DB_DATABASE}"
#    if [ "${DB_HOST}" != "localhost" ]; then
#      kubectl exec  -it vh -- /bin/bash -c "mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE}"
#    else
#      mongo --quiet mongodb://${DB_HOST}/${DB_DATABASE}
#    fi

  fi

else
  printf "\n\nERROR: Unknown database type of '${DB_TYPE}'. Probably need to implement it in wov-db-connect, and ensure it is supported in vh container.\n"
  exit 1
fi


