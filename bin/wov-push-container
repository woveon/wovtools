#!/usr/bin/env bash


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {containercode ...}

Pushes the containers by building and pushing to the archive. Runs the recipe scripts and if there is a change, build the containers.

ex. `basename $0` -f ggg hhh  
    -> for project iii,  forces the building of containers iiiggg and iiihhh



The recipes for containers should:

1) copy MS code from PROJDIR or MSDIR to the DESTDIR directory
  - MS is the name of your microservice which will be a single container
  - CONTAINER is the name of the container (lower of MS), with PROJECT/CONTAINER being its repository name.
  - PROJDIR is the root of your git
  - MSDIR is the root of your microservice
  - DESTDIR is the root of the container to be built (i.e. wovtools/cache/containers/MS).
  - DOECHO determines logging levels: 0-quiet, 1-normal, 2-verbose

2) create a sub-recipes to insert into the Dockerfile. There are BUILD and RUN stages, where BUILD contains ssh keys to access private repos. RUN tells the container how to run.
  - DESTDIR/SECRET/prebuild.docker - called before all files copied into container (do yarn installs here)
  - DESTDIR/SECRET/build.docker - all code is in the container
  - DESTDIR/SECRET/run.docker - instructions on how to run container

  -p/P : do push, no push
  -h : this help
#  -l : list containers
  -f : force build
  -q/-v : quiet/verbose
  --cpc X : check packed container X

EOF
}





# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
. wov-env-ops fDisplayOptions "$@"

#pushcontainersargs=( "$@" )
#set ""
##. wov-env --provider
##. wov-ns-check
#set -- "${pushcontainersargs[@]}"



# Globals
DOFORCE=0
DOPUSH=1
RECIPES=
DESTDIR=
ARCHDIR=
MSRECIPEDIR="${WOV_BASEDIR}/wovtools/msrecipes"





# ---------------------------------------------------------------------
# Put contents together in container directory. Also builds Dockerfile.
#  NOTE: later will decide if we need to build a container, based upon this
# $1 - MS name
# ---------------------------------------------------------------------
function doPackContainer
{
  local MS=$1
  local CONTAINER=$(echo ${MS} | tr '[:upper:]' '[:lower:]')
  # build the content in wovtools/cache/containers/$f
  mkdir -p ${DESTDIR}
  mkdir -p ${DESTDIR}/SECRET/sshkeys
  chmod -R 700 ${DESTDIR}/SECRET
  echo "" > ${DESTDIR}/SECRET/ssh-config
  echo "" > ${DESTDIR}/Dockerfile

  l_ "  ... pack container using recipe: '$f'"
  cd ${WOV_BASEDIR} && PROJDIR=${WOV_BASEDIR} MSDIR="${WOV_BASEDIR}/${f}" DESTDIR=${DESTDIR} MS=$f CONTAINER=${CONTAINER} DOECHO=${DOECHO} "${MSRECIPEDIR}/$f"
  if [ "$?" != "0" ]; then
    printf "\n\nERROR: failed building container.\n\n"
    exit 1
  fi

  # put ssh keys and config options 
  PRIVATEREPOS=( $(cat ${WOV_SECRETFILE} |  jq -r '.repositories | to_entries[] | .key' 2> /dev/null) )
  if [ "$?" != "0" ]; then
    printf "\nERROR: no 'repositories' entry in secrets. If you have no private repos, create a blank entry.\n"
    exit 1
  fi
  if [ $DOECHO -ge 2 ]; then echo "    ... adding ssh keys for private repos "; fi
  for repo in "${PRIVATEREPOS[@]}"; do
    # for each item in private repo, append to ssh/config and add its key
    # echo "  ... add in repo key ${repo}, update .ssh/config"

    repoURL=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].host')
    #echo "    ... repoURL ${repoURL}"

#    repoUser=$(ssh -G ${repo} | grep "^user " | awk '{print $2}')
    repoUser=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].user')
    #echo "    ... repoUser ${repoUser}"

    #repoKeyFile=$(ssh -G ${repo} | grep "^identityfile " | awk '{print $2}')
    repoKeyFile=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].privkeyloc')
    repoKeyFile="${repoKeyFile/#\~/$HOME}"
      # expand tilde to $HOME
    #echo "    ... repoKeyFile ${repoKeyFile}"
    if [ $DOECHO -ge 2 ]; then echo "        ... repo: '${repo}'  url: '${repoURL}'  user: '${repoUser}'  keyfile: '${repoKeyFile}'"; fi
    cat <<EOF >> ${DESTDIR}/SECRET/ssh-config

# repo: ${repo}
Host ${repoURL}
  User ${repoUser}
  IdentityFile /root/.ssh/$(basename ${repoKeyFile})
EOF


    if [ ! -e ${repoKeyFile} ]; then
      echo "ERROR: unable to find key file '${repoKeyFile}'."
      exit 1
    fi
    cp ${repoKeyFile} ${DESTDIR}/SECRET/sshkeys/.

  done


  # --------------------------------------------------------------------- 
  # start building Dockerfile for the container
  _CONTAINERBASE="WOV_${MS}_containerfrom"
  CONTAINERBASE=${!_CONTAINERBASE}
  if [ "${CONTAINERBASE}" == "null" ] || [ "${CONTAINERBASE}" == "" ]; then
    printf "\nERROR: Docker container for '${repo}' has no known base to build from in secret: 'WOV_${MS}_containerfrom'.\n\n"
    printf "   Check: \n"
    printf "     - secrets are rebuilt\n"
    printf "     - secrets contain entry for '${WOV_PROJECT}.${MS}.containerfrom'.\n"
    printf "     - secret file containing that entry is included in this stage (see wovtools/confing.json secrets.${WOV_STAGE})\n\n"
    exit 1
  fi

  # ... setup
  if [ $DOECHO -ge 1 ]; then echo "  ... building container Dockerfile"; fi
  cat <<EOF > ${DESTDIR}/Dockerfile
# ===================================================================== 
# Build Section
# ===================================================================== 
# - This section has secret content in SECRETS dir, that will be deleted
# - Install build tools and build code, only /usr/src/app will survive
# ===================================================================== 
FROM ${CONTAINERBASE} as wovtools

# alpine linux does not have ssh client
RUN if which apk; then apk add --no-cache openssh-client; fi

# Use specific keys for private repos
RUN mkdir -p /root/.ssh
RUN touch /root/.ssh/known_hosts
RUN chmod 600 /root/.ssh/known_hosts
ADD SECRET/ssh-config /root/.ssh/config
RUN chmod 600 /root/.ssh/config

EOF

  if [ $DOECHO -ge 2 ]; then echo "  ... adding keys"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Adding ssh keys
COPY SECRET/sshkeys/. /root/.ssh/.
RUN chmod 600 /root/.ssh/*
EOF

  if [ $DOECHO -ge 2 ]; then echo "  ... add in call to each repo, so it adds to known hosts"; fi
  for repo in "${PRIVATEREPOS[@]}"; do
    local repoURL=$(cat ${WOV_SECRETFILE} | jq -r '.repositories["'${repo}'"].host')
    cat <<EOF >> ${DESTDIR}/Dockerfile

# Adding repos to ssh known_hosts  (||true because returns non-0 on success, so added '-v' for output)
RUN ssh -o StrictHostKeyChecking=no -vT ${repoURL} || true
EOF
  done


  # Prebuild, if exists
  # ... add in section to build code from user script /secure/
  if [ -e "${DESTDIR}/SECRET/prebuild.docker" ]; then
    if [ $DOECHO -ge 2 ]; then echo "  ... creating prebuild section"; fi
    cat <<EOF >> ${DESTDIR}/Dockerfile
# Copy in content necessary for prebuild
WORKDIR /usr/src/app
EOF
    cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Prebuild instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/prebuild.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF
  fi



  if [ $DOECHO -ge 2 ]; then echo "  ... creating build section"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Copy in local content
WORKDIR /usr/src/app
COPY . .
EOF

  # ... add in section to build code from user script /secure/
  if [ ! -e "${DESTDIR}/SECRET/build.docker" ]; then
    echo "ERROR: no 'build.docker' file in '${DESTDIR}/SECRET', should be created in wovtools container script."
    exit 1
  fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Build instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/build.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF

  # ... clean up secure and start insecure
  cat <<EOF >> ${DESTDIR}/Dockerfile

# Clean up secrets
RUN rm -Rf /usr/src/app/SECRET
RUN rm -Rf /root/.ssh
EOF

  # ... create insecure section to run from (no keys unless you add), /insecure/
  if [ $DOECHO -ge 2 ]; then echo "  ... creating run section"; fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# ===================================================================== 
# Run Section
# ===================================================================== 
# - insecure section to run from (no keys unless you add)
# - copied from 'run.docker'
# ===================================================================== 
FROM ${CONTAINERBASE}
RUN if which apk;     then apk --no-cache update; fi
RUN if which apt-get; then apt-get -y update;     fi

COPY --from=wovtools /usr/src/app /usr/src/app
WORKDIR /usr/src/app

EOF
  if [ ! -e "${DESTDIR}/SECRET/run.docker" ]; then
    echo "ERROR: no 'run.docker' file in '${DESTDIR}/SECRET', should be created in wovtools container script."
    exit 1
  fi
  cat <<EOF >> ${DESTDIR}/Dockerfile

# --------------------------------------------------------------------- 
# Run instructions from recipe
# --------------------------------------------------------------------- 
EOF
  cat ${DESTDIR}/SECRET/run.docker >> ${DESTDIR}/Dockerfile
  cat <<EOF >> ${DESTDIR}/Dockerfile
# --------------------------------------------------------------------- 
EOF
}


# ---------------------------------------------------------------------
# Pack all into Docker container and archive last build.
# ---------------------------------------------------------------------
function doDockerizeContainer
{
  echo "  ... creating container '${CONTAINER}'"

  docker build -f ${DESTDIR}/Dockerfile -t ${WOV_PROJECT}/${CONTAINER}:latest ${DESTDIR} || exit 1

  echo "    ... archiving build of container '${CONTAINER}'"
  mkdir -p ${ARCHDIR}
  set -x
  rsync -ai --delete ${DESTDIR}/ ${ARCHDIR} &> /dev/null
  set +x
}


# ---------------------------------------------------------------------
# Make sure the locally linked module is referenced by the package.json 
# dependency entry for the container to be built properly.
#  $1 - locally linked NodeJS module name (found in package.json)
# ---------------------------------------------------------------------
function doCheckNodeJSLocallyLinkedDependency()
{
  local retval=0
  local Re=
  local linkedrepo=
  local tmp=
  local deprepo_ver=
  local deprepo_proto=
  local deprepo_url=
  local linked_ver_head=
  local linked_ver_tagged=
  local l="${1}"

  # path to locally linked
  localpath="${WOV_BASEDIR}/${MS}/node_modules/${l}"

  # Make sure they are checked and pushed (going down node_modules path)
  wov-git-check "${localpath}"
  Re=$?
  if [ $Re -ne 0 ]; then retval=1; fi
  l_verbose "    ...*  : wov-git-check: ${Re} - ${l}"

  if [ $retval -eq 0 ]; then
    l_verbose "    ... get locally linked remote repository"
    linkedrepo=$(git -C "${localpath}" config --get remote.origin.url)
    Re=$?
    if [ $Re -ne 0 ]; then retval=1; fi
    if [ "$linkedrepo" == "" ]; then retval=1; fi
    l_verbose "      ...*  :    linkedrepo: ${Re} -  ${linkedrepo}"
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "    ... get package.json dependency link"
    deprepo=$(cat "${WOV_BASEDIR}/${MS}/package.json" | jq -r '.dependencies["'"${l}"'"]')
    Re=$?
    if [ $Re -ne 0 ]; then retval=1; fi
    if [ "$deprepo" == "" ]; then retval=1; fi
    l_verbose "      ...*  :       deprepo: ${Re} -  ${deprepo}"
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "    ... parse package.json url"
    tmp=( ${deprepo//:\/\// } )
    deprepo_proto="${tmp[0]}"
    tmp2=( ${tmp[1]//#/ } )
    deprepo_ver="${tmp2[1]}"
    deprepo_url="${tmp2[0]}"
    if [ "${deprepo_proto}" == "" ]; then retval=1; fi
    if [ "${deprepo_url}"   == "" ]; then retval=1; fi
    if [ "${deprepo_ver}"   == "" ]; then retval=1; fi
    l_verbose "      ...*  : deprepo_proto: X -  '${deprepo_proto}'"
    l_verbose "      ...*  :   deprepo_url: X -  '${deprepo_url}'"
    l_verbose "      ...*  :   deprepo_ver: X -  '${deprepo_ver}'"
    if [ $retval -ne 0 ]; then
      l_error "Linked dependencies should be directly to a Git repo version since NPM versions can't be confirmed."
      l_error "  ex. https://mygit/foo/bar#v1.2.3"
      l_error "Currently dependency is to '${deprepo}'."
    fi
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "    ...compare remote repositories of package.json URL and node_modules/$l Git repo"
    if [ "${linkedrepo}" != "${deprepo_url}" ]; then
      l_warn "package.json dependency URL '${deprepo_url}' does not point to locally linked remote repository '${linkedrepo}'."
      # retval=1
    fi
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "    ...getting linked repo's commit of tagged version of '${deprepo_ver}'"
    # make sure linked is head and tagged
    #linked_ver_tagged=`git -C "${localpath}" rev-list -n 1 ${deprepo_ver}`
    linked_ver_tagged=( `git -C "${localpath}" show-ref --tags --dereference "${deprepo_ver}" | tail -n 1` )
    if [ "${linked_ver_tagged}" == "" ]; then
      l_error "For linked module ${l}, could not find tagged version '${deprepo_ver}' referenced by package.json."
      l_error "Have you published that version? (try 'np' in ${localpath})"
      retval=1
    fi
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "    ...compare package.json version to that of linked, as it should be the tagged version"
    linked_ver_head=`git -C "${localpath}" rev-list -n 1 HEAD`
    l_verbose "      ...repo head:${linked_ver_head} = local repo:${linked_ver_tagged[0]}" ; Re=$?
    #echo "calling git on ver ${deprepo_ver}: '${linked_ver_tagged[@]}' '${linked_ver_tagged[0]}' '${linked_ver_tagged[1]}'"
    #echo "linked_ver_tagged : ${linked_ver_tagged[@]} ${#linked_ver_tagged[@]} : ${linked_ver_tagged[0]} ${linked_ver_tagged[1]}"
    #echo "linked_ver_head  : ${linked_ver_head}"
    #echo "linked_ver_tagged: ${linked_ver_tagged[0]}"
    test "${linked_ver_head}" = "${linked_ver_tagged[0]}" ; Re=$?
    if [ $Re -ne 0 ]; then 
      retval=1
      l_error "Git commits differ. Repo head:${linked_ver_head} is not local repo:${linked_ver_tagged[0]}"
      l_error "    show head commit: 'git rev-list -n 1 HEAD'"
      l_error "  show tagged commit: 'git show-ref --tags --dereference ${deprepo_ver}'"
      l_error " show tagged commits: 'git show-ref --tags --dereference'"
    fi
  fi

  return $retval
}


# ---------------------------------------------------------------------
# Make sure it is ok
# 
# $1 - microservice name (no change to casing)
# 
# For now:
#  - ensure package.json (if exists) is ok
# ---------------------------------------------------------------------
function doCheckPackedContainer
{
  local retval=0
  local MS=$1
  local CONTAINER=$(echo ${MS} | tr '[:upper:]' '[:lower:]')
  local Re=
  local R=
  local CHECKAS=''
  local DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${MS}
  l_ "...checking packed container : ${MS}"

  # Determine container type
  if [ -e "${DESTDIR}/package.json" ]; then
    l_verbose "  ...found package.json : checking NodeJS container."
    CHECKAS='nodejs'
  fi

  # NodeJS
  if [ "${CHECKAS}" == "nodejs" ]; then
    local deps=( `cat ${DESTDIR}/package.json | jq -r '.dependencies | to_entries[] |  "\(.key) \(.value)"' 2> /dev/null ` )
    # echo "deps: ${deps[@]}"

    if [ -e "${WOV_BASEDIR}/${MS}/node_modules" ]; then
      l_ "  ... checking linked npm packages are checked in and published"
      R3=( $(cd ${WOV_BASEDIR}/$1/node_modules ; find * -type l -maxdepth 1) )
      if [ "${R3}" != "" ]; then
#        l_error "You have linked node modules."
#        l_error "TODO: see issue #50 : https://github.com/woveon/wovtools/issues/50"
#        l_error "*Linked NodeJS Modules:"
        for l in ${R3[@]}; do
          l_ "    ...checking locally linked module: ${l}"
          R=$(doCheckNodeJSLocallyLinkedDependency "${l}"); Re=$?
          if [ $Re -ne 0 ]; then
            echo "${R}"
            l_error "Linked NodeJS package '${l}' is not checked in or referenced properly."
            retval=1
          else
            l_verbose "  ... ${l} NodeJS package is linked, but referenced properly so ok." 
          fi
        done
        if [ $retval -ne 0 ]; then
          l_warn "Correct your linked modules by fixing the above errors, or unlink them with 'yarn unlink X'."
          exit 1
        fi
      fi
    fi
  else
    l_warn "  ... no checking of packed container as could not identify project"
  fi

  l_ "  ...done checking packed container"
  return $retval
}

# --------------------------------------------------------------------- 
# Push the container: pack, dockerize, push.
#  NOTE: container's name is microservice name, lower cased
# $1 - name of the microservice.
# --------------------------------------------------------------------- 
function doPushContainer()
{
  local MS=$1
  local CONTAINER=$(echo ${MS} | tr '[:upper:]' '[:lower:]')
  DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${MS}
  ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${MS}

  mkdir -p ${ARCHDIR}
  if [ "$?" != "0" ]; then
    printf "\nERROR: Failed to create archive dir for containers: ${ARCHDIR}. Check permissions?\n\n"
    exit 1
  fi

  if [[ ! -e "${MSRECIPEDIR}/$f" ]]; then 
    echo "ERROR: recipe for microservice container '${f}' does not exist in '${MSRECIPEDIR}'.";
    exit 1
  elif [[ ! -x "${MSRECIPEDIR}/$f" ]]; then 
    echo "ERROR: recipe for container ${f} not executable (${MSRECIPEDIR}/$f).";
    exit 1
  else

    # Copy in and generate all files in DESTDIR
    doPackContainer "${MS}"

    # Ensure all is well
    doCheckPackedContainer "${MS}"

    # Just packed container, do we need to build it? Do diffs against archive, then compare remote container
    NEEDSBUILD=0
    diff -q -r ${DESTDIR} ${ARCHDIR} > /dev/null
    NEEDSBUILD=$?
    if [ "$NEEDSBUILD" != "0" ]; then 
      if [ $DOECHO -ge 2 ]; then 
        echo "  ... packed container differs so will build."
      fi
    else
      if [ $DOECHO -ge 2 ]; then echo "  ... check push container status"; fi
      wov-push-container-buildcheck -q ${CONTAINER} ${MS}
      NEEDSBUILD=$?
      if [ "$NEEDSBUILD" != "0" ]; then 
        if [ $DOECHO -ge 2 ]; then echo "  ... pushed containers differ so will build."; fi
      fi
    fi

    # Exit with error on failing
    if [ "${NEEDSBUILD}" ==  "4" ]; then exit ${NEEDSBUILD}; fi
    if [ "${NEEDSBUILD}" ==  "3" ]; then exit ${NEEDSBUILD}; fi
    if [ "${NEEDSBUILD}" ==  "2" ]; then exit ${NEEDSBUILD}; fi

    # Dockerize
    if [ "${NEEDSBUILD}" == "1" ] || [ "${DOFORCE}" == "1" ]; then doDockerizeContainer ${f};
    else
      if [ $DOECHO -ge 1 ]; then echo "  ... container build not needed"; fi
    fi

    # Do we push the container?
    if [ "$DOPUSH" == "0" ]; then
      if [ $DOECHO -ge 1 ]; then printf "  ... skipping container push\n"; fi

    else
      # Tag and Push
      if [ "${NEEDSBUILD}" == "1" ] || [ "${NEEDSBUILD}" == "5" ] || [ "${DOFORCE}" == "1" ]; then
        if [ $DOECHO -ge 1 ]; then echo "  ... container push needed"; fi
        if [ $DOECHO -ge 2 ]; then echo "    ... tag repo"; fi
        #echo "CMD: docker tag ${WOV_PROJECT}/${CONTAINER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
        docker tag ${WOV_PROJECT}/${CONTAINER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} ; Re=$?
        if [ $Re -ne 0 ]; then
          l_error "Failed to tag container: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
          exit 1
        fi

        if [ $DOECHO -ge 2 ]; then echo "    ... push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"; fi

        # check exists would be
        # aws ecr describe-repositories --repository-names ${WOV_PROJECT}/${CONTAINER}

        # If just built, dump log, since it will have to push a lot of data
        R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1 | tee /dev/tty ) ; Re=$?
        #echo "R: ${Re} '${R}'"
        if [ $Re -ne 0 ]; then 
          l_error "Failed to push container: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
          exit 1
        fi
        if [[ $R == *"name unknown"* ]]; then
          l_error "Create the repository in your Docker Repository (ECR): https://us-east-1.console.aws.amazon.com/ecr/repositories."
          exit 1
        fi
        if [[ $R == *'Your Authorization Token has expired.'* ]]; then
          echo "    ... auto-login to AWS attempt"
          AWSAUTHCMD=$(aws ecr get-login --no-include-email)
          eval ${AWSAUTHCMD}
          if [ "$?" != "0" ]; then
            echo "      ... FAILED auto-login to AWS attempt"
            exit 1
          else
            echo "      ... SUCCESS auto-login to AWS attempt"
            echo "    ... re-push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
            R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1  | tee /dev/tty) ; Re=$?
            if [ $Re -ne 0 ]; then
              printf "\n\n  ...still errors: ${R}.\n"
              exit 1
            fi
          fi
        fi

      else
        if [ $DOECHO -ge 1 ]; then echo "  ... container push not needed"; fi
      fi

      echo "  ... tagging as dev container and pushing"
      docker tag ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_dev
      if [ "$?" != "0" ]; then printf "\n\nERROR: failed tagging as _dev.\n\n"; exit 1; fi

      if [ $DOECHO -ge 2 ]; then 
        docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_dev
        if [ "$?" != "0" ]; then printf "\n\nERROR: failed pushing _dev.\n\n"; exit 1; fi
      else
        docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_dev > /dev/null
        if [ "$?" != "0" ]; then printf "\n\nERROR: failed pushing _dev.\n\n"; exit 1; fi
      fi
      echo "  ... done '${CONTAINER}'."
    fi
  fi
}


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-p" ]; then
    shift
    DOPUSH=1
    WOV_DODEFAULTCOMMAND=1

  elif [ "$1" == "-P" ]; then
    shift
    DOPUSH=0
    WOV_DODEFAULTCOMMAND=1

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1
    WOV_DODEFAULTCOMMAND=1

  elif [ "$1" == "--cpc" ]; then
    shift
    doCheckPackedContainer "${1}"
    shift
    WOV_DODEFAULTCOMMAND=0

  elif [ "$1" == "--clean" ]; then
    shift
    l_ "cleaning container cache at : '${WOV_CACHEDIR}/containers'"
    rm -Rf "${WOV_CACHEDIR}/containers"
    WOV_DODEFAULTCOMMAND=0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# Find the recipes and push them
if [ ${WOV_DODEFAULTCOMMAND} != 0 ]; then

  . <(wov-env --provider --exports)
  . wov-env-common
  . wov-push-common

  if [ ! -e "${MSRECIPEDIR}" ]; then
    printf "\nERROR: 'wovtools/msrecipes' does not exist. Should have microservice container recipes there.\n\n"
    exit 1
  fi

  # For dev and prod, check local code and secrets are checked in and pushed.
  # echo "NOTE[$0]: Skipping git checks.... will do on wov-push."
  doGitChecksOnFormalStages true

  # Get Microservice Recipes from Commandline, or assume all otherwise
  RECIPES=( "$@" )
  if [ "${#RECIPES[@]}" == "0" ]; then fGetMicroserviceRecipes; fi
#  echo "R: ${RECIPES}"

  # Build MS if needed
  for f in ${RECIPES}; do
    if [ $DOECHO -ge 1 ]; then printf "\n%-${FOLD}s\n" "-" | tr ' ' '-' ; echo "... push container '${f}'."; fi
    if [ ! -e ${MSRECIPEDIR}/${f} ]; then
      l_error "No recipe for container '${f}' in ${MSRECIPEDIR}."
      exit 1
    fi
    if [ ! -e ${WOV_BASEDIR}/${f} ]; then
      l_error "No '${f}' microservice directory in project."
      exit 1
    fi
    doPushContainer $f
  done

  if [[ $DOECHO -ge 1 ]]; then
    printf "\nCompleted Building:\n"
    for r in ${RECIPES}; do
      c=$(echo ${r} | tr '[:upper:]' '[:lower:]')
      echo "  ... built microservice: '${r}'  container: '${WOV_PROJECT}/${c}'"
    done
    printf "    run locally: 'docker run CONTAINER'\n"
    printf "     open shell: 'docker run --rm -it CONTAINER bash'\n"
  fi
fi

