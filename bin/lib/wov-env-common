#!/usr/bin/env bash


# ---------------------------------------------------------------------
# Echo Undefined if ""
# ---------------------------------------------------------------------
function EUndef()
{
  if [ "$1" != "" ]; then
    echo "${1}"
  else
    echo "undefined"
  fi
}


# ---------------------------------------------------------------------
# Sets global RECIPES variable
# ---------------------------------------------------------------------
function fGetMicroserviceRecipes()
{
  RECIPES=( $(cd ${WOV_BASEDIR}/wovtools/msrecipes && find * -maxdepth 0 -type f 2> /dev/null) )

#  echo "${RECIPES[@]}"
}

# Gets the K8s Deployments that are running
function fGetMicroserviceDeployments()
{
  MSDEPLOYMENTS=()
  local R=( $(kubectl get deployments --selector=wovtools.project=${WOV_PROJECT} -o name) )
  for d in ${R}; do
    local r=( ${R//\// } )
    MSDEPLOYMENTS+="${r[1]}"
  done
}


# ---------------------------------------------------------------------
# from: https://stackoverflow.com/a/8574392/2664702
# Returns: 0 success/found, 1 fail/not found
# ---------------------------------------------------------------------
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# ---------------------------------------------------------------------
# Used to generate the path where CLuster configuration would sit in
# the Archive. 
#  NOTE: The local Cluster Configuration is not generated with this.
#        Use WOV_getClusterConfigDir for that.
#  $1 - Cluster
# ---------------------------------------------------------------------
function WOV_getArchiveRelativePath()
{
  echo "${1}/${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}"
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function exitIfProd()
{
  local R="$(git rev-parse --abbrev-ref HEAD)" ; Re=$?
  if [ "$Re" != "0" ]; then
    >&2 printf "ERROR: exiting because could not determine stage. git failed.\n"
    exit 1
  fi
  if [ "${R}" == "prod" ] || [ "${R}" == "dev" ]; then
    >&2 printf "ERROR: exiting because in stage '${R}'.\n"
    exit 1
  fi
}

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function exitIfProdOrDev()
{
  local R="$(git rev-parse --abbrev-ref HEAD)" ; Re=$?
  if [ "$Re" != "0" ]; then
    >&2 printf "ERROR: exiting because could not determine stage. git failed.\n"
    exit 1
  fi
  if [ "${R}" == "prod" ]; then
    >&2 printf "ERROR: exiting because in stage 'prod'.\n"
    exit 1
  fi
}


# ---------------------------------------------------------------------
# Store the local context cluster (from merged raw file) in $LOCALCONTEXT
# Only checks wovtools/local.json
# ---------------------------------------------------------------------
function retreiveLocalContextCluster()
{ if [ "${LOCALCONTEXT}" == "" ]; then LOCALCONTEXT=`jq -r ".curorigin" "${WOV_CONFIGFILE_MINERAW}"`; fi }



  # [res] [dbserver]
# NOTE: DB is for the RDS databse name, and 1st part of hostname
# return : 0=success,1=fail
function doResName()
{
  local retval=""

  if [ "$2" == "" ]; then
    printf "\n\nERROR: resource name not provided.\n"
    retval=1
  else
    retval=0

    # Subnet for X, zone Y
    if [ "$1" == "SN" ]; then
      # 3rd params sets availability zone
      # if [ "$4" != "" ]; then z=$4; else z=${WOVDB_AVAILZONE}; fi
      echo "${2}-sn-${3}${4}"

    # UNFLAVORED: DB Subnet for X, zone Y : note: this will be in hte default VPC
    elif [ "$1" == "DBSN" ]; then
      echo "${2}-dbsn-${3}${4}"
        # 3rd param sets availability zone

    # UNFLAVORED: DB SubnetGroup for X : note: this will be in hte default VPC
    elif [ "$1" == "DBSNG" ]; then
      echo "${2}-dbsng"

    # UNFLAVORED: DB Security Group for cluster X
    elif [ "$1" == "DBSG" ]; then
      echo "${2}-dbsg"

    # UNFLAVORED: DB Route Table for cluster X
    elif [ "$1" == "DBRT" ]; then
      echo "${2}-dbrt"

    # Security Group for X
    elif [ "$1" == "SG" ]; then
      echo "${2}-SG-${3}"

    # Database Name
    elif [ "$1" == "DB" ]; then
      if [ "$3" == "localhost" ]; then echo "localhost"; 
      elif [ "$3" == "" ]; then echo "undefined"; 
      else echo "${2}-db-${3}" ; fi

    # Peered connection from default VPC to cluster's, for the db
    elif [ "$1" == "PEERCONN" ]; then
      echo "${2}-peerconn"

    elif [ "$1" == "DNS" ]; then
      DBNAME=$(doResName DB ${2} ${3})
      echo $(aws rds describe-db-instances --db-instance-identifier ${DBNAME} --query 'DBInstances[0].Endpoint.Address' --output text)
    else
      printf "\n\nERROR: unknown resource of ${1} to doResName.\n"
      retval=1
    fi
  fi

  return $retval
}


# Return the git repo for a project/ms
#
#  - If $3 $4 WOV_CODEREPOARCHIVE are "", it will fetch them from ~/.wovtools
#  - If $3 or $4 are null, it assumes they were already fetched and are null
#
# $1 - team project name
# $2 - user provided repo extension (user provided or from PROJECT_PROJECTMSCODE) ex. alywan_alywandata (priority over $4)
# $3 - global config project repo entry. (from .projects.PROJECTNAME.repo) ex. alywan_alywandata 
# $4 - git repo base (from .projects.PROJECTNAME.repobase)  ex. git-codecommit.us-east-1.amazonaws.com/v1/repos/ (overrides $6)
## WOV_CODEREPOARCHIVE - $5 - global git repo base (ex. git-codecommit.us-east-1.amazonaws.com/v1/repos/)
function doGetProjectRepoName()
{
  local RETVAL=
  local retval=0
  local projectname=$1
  local userprovidedext=$2 # USERREPOEXT=$2 
  local repoext=$3         # REPOEXT=$3
  local repobase=$4        # REPOBASE=$4

  # if missing vars passed in, load from ~/.wovtools
  if [ "${repoext}" == "" ] || [ "${repobase}" == "" ] || [ "${WOV_CODEREPOARCHIVE}" == "" ]; then
    while read f; do
      _TMP+=( "$f" )
    done <<<$(cat "${HOME}/.wovtools" | jq -r ".archives.coderepo, .projects.${projectname}.repo, .projects.${projectname}.repobase")
    #>&2 echo "TMP : ${_TMP[@]}"
    WOV_CODEREPOARCHIVE=$([ "${_TMP[0]}" == "null" ] && echo "" || echo "${_TMP[0]}" )
    repoext=$(           [ "${_TMP[1]}" == "null" ] && echo "" || echo "${_TMP[1]}" )
    repobase=$(          [ "${_TMP[2]}" == "null" ] && echo "" || echo "${_TMP[2]}" )
  fi

  # set full repo url
  RETVAL=$([ "${repobase}" == "" ] && echo "${WOV_CODEREPOARCHIVE}" || echo "${repobase}")
  if [ "${userprovidedext}" == "" ] && [ "${repoext}" == "" ]; then
    l_error "No provided repository extension, or entry in '.projects.${projectname}.repo'. Unknown project repository."
    retval=1;
    RETVAL="${RETVAL}/UNKNOWN"
  else
    if [ "${userprovidedext}" != "" ]; then RETVAL="${RETVAL}/${userprovidedext}"; else RETVAL="${RETVAL}/${repoext}"; fi
  fi
  # >&2 echo "RETVAL ${RETVAL} retval ${retval}"

  echo $RETVAL
  return $retval
}


# ---------------------------------------------------------------------
# Check local changes are committed (i.e. status is cool with it)
# $1 - path
# ---------------------------------------------------------------------
function doCheckCommit()
{
  local retval=0
  local R=
  local Re=

  if [ $retval -eq 0 ]; then
    l_verbose "  ...check for path variable"
    if [ "$1" == "" ]; then
      retval=1
      l_error "No path supplied to Git repo."
    fi
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "  ...check path exists"
    if [ ! -e "$1" ]; then
      retval=2
      l_error "Path to Git repo does not exist '${1}'."
    fi
  fi

  if [ $retval -eq 0 ]; then
    l_verbose "  ...check repo status"
    R=$(git -C "${1}" status -s) ; Re=$?
    if [ $Re -ne 0 ]; then
      retval=3
      l_error "Failed calling 'status' on repo at '${1}'."
    elif [ "${R}" != "" ]; then
      retval=4
      l_warn "Path '${1}': failed code/env commit-check. Check in your code/env values."
      if [ $DOECHO -ge 2 ]; then
        l_verbose "*** git status : start ************************************************"
        git -C "${1}" status
        l_verbose "*** git status : end **************************************************"
      fi
    fi
  fi

  if [ $retval -eq 0 ]; then l_verbose "SUCCESS: '${1}': wov-git-check commit code/env"; fi

  return $retval
}


# ---------------------------------------------------------------------
# Check local changes are pushed
# NOTE: assume doCheckCommit already called which checks path
# $1 - path
# ---------------------------------------------------------------------
function doCheckPush()
{
  local retval=0
  local R=
  local Re=
  local R1=
  local R1e=
  local R2=
  local R2e=

  l_verbose '  ...check upstream and head commits are the same.'
  R1=$(git -C "${1}" rev-parse @{u} 2>&1 ) ; R1e=$?
  R2=$(git -C "${1}" rev-parse HEAD 2>&1 ) ; R2e=$?
  if [ $R1e -ne 0 ] || [ $R2e -ne 0 ]; then
    echo "git: ${R1}"
    l_error "Need to fully commit on directory: ${1}?"
    exit 1
  fi



  R=$(test "$(git -C "${1}" rev-parse @{u})" = "$(git -C "${1}" rev-parse HEAD)" ); Re=$?
  if [ $Re -ne 0 ] || [ "$R" != "" ]; then
    retval=10
    l_warn "'${1}': failed code/env push check. Push your archive."
    if [ $DOECHO -ge 2 ]; then
      l_verbose "*** git status : start ************************************************ "
      git -C "${1}" status
      l_verbose "*** git status : end ************************************************** "
    fi
  else
    l_verbose "SUCCESS: '${1}': wov-push-check push code/env."
  fi

  return $retval
}

