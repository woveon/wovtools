#!/usr/bin/env bash

# --------------------------------------------------------------------- 
# This is a light-weight env variable loader. Used by wov-env and wov-env-build.
#  NOTE: This does not contain secrets variables or do any importing. 
# --------------------------------------------------------------------- 

#if [ "${WOV_VERSION}" != "" ]; then
#  >&2 echo "NOTE(`basename $0`:${BASH_LINENO}) ${WOV_ORIGIN}: wov-env-loader called again..."
#fi

# --------------------------------------------------------------------- 
# Versions
# --------------------------------------------------------------------- 
export WOV_VERSION=3
export WOV_VH_VERSION=0.1


# --------------------------------------------------------------------- 
# Command line
# --------------------------------------------------------------------- 
#if [ "$1" == '-g' ] || [ "$1" == '--global' ]; then shift;  GLOBALCONTEXT=$1; shift; fi
#if [ "$1" == '-c' ] || [ "$1" == '--context' ]; then shift; GLOBALCONTEXT=$1; shift; fi
#>&2 echo "CMDS $*"
#while [[ $1 =~ ^- ]]; do
#
##  >&2 echo "CMD $1"
#  if [ "$1" == "-q" ]; then
#    shift
#    DOECHO=0
#
#  elif [ "$1" == "-v" ]; then
#    shift
#    DOECHO=2
#
#  elif [ "$1" == "--vh-label" ]; then
#    shift
#    echo "${WOV_VH_VERSION}";
#    exit 0
#
#  elif [ "$1" == "--origin" ]; then
#    shift
#    export WOV_ORIGIN="$1"
##    >&2 echo "cli switch WOV_ORIGIN ${WOV_ORIGIN}"
#    shift
#
#  elif [ "$1" == '--context' ]; then
#    shift
#    export WOV_CONTEXT="$1"
##    >&2 echo "cli switch WOV_CONTEXT ${WOV_CONTEXT}"
#    shift
#
#  else
#    echo
#    echo "***ERROR: wov-env-loader unknown option '$1'."
#    exit 1
#  fi
#
#  >&2 echo "exit CMD $1"
#done

#>&2 echo "CMDS left ${*}"

#NOTE: this was a short circuiting piece of code
#if [ "${WOV_CONTEXT}" != "" ]; then
#  if [ "${GLOBALCONTEXT}" == "" ]; then
#    echo "WOV_CONTEXT ${WOV_CONTEXT} set and no GLOBALCONTEXT overridding, exiting b/c no need to call "
#    exit 0
#  fi
#fi

# --------------------------------------------------------------------- 
# Returns 1 if this is a WovTools project
# --------------------------------------------------------------------- 
function isProject()
{
  let retval=1
  # >&2 echo "WOV_BASEDIR ${WOV_BASEDIR}"
  if [      "${WOV_BASEDIR}" == "" ]; then echo "WARNING: not in wovtools project (no git)."; retval=0; fi
  if [ ! -d "${WOV_BASEDIR}/wovtools" ]; then echo "WARNING: not in wovtools project (no wovtools directory)."; retval=0; fi
  if [ ! -f "${WOV_BASEDIR}/${WOV_CONFIGFILE_MAIN}" ]; then echo "WARNING: not in wovtools project (no ${WOV_CONFIGFILE_MAIN} file)."; retval=0; fi
  if [ ! -f "${WOV_BASEDIR}/${WOV_CONFIGFILE_MINE}" ]; then echo "WARNING: not in wovtools project (no ${WOV_CONFIGFILE_MINE} file)."; retval=0; fi
  return $retval;
}

# --------------------------------------------------------------------- 
# Source files for project configuration : finds WOV_BASEDIR if not set
# - needed by wov-init before a project is created 
# - wov-init sets WOV_BASEDIR before calling
# --------------------------------------------------------------------- 
if [ "${WOV_BASEDIR}" == "" ]; then
  export WOV_BASEDIR="$(git rev-parse --show-toplevel 2> /dev/null)" 
fi
export WOV_CONFIGFILE_MAIN="wovtools/config.json"
export WOV_CONFIGFILE_MINE="wovtools/myconfig.json"
export WOV_CACHEDIR="${WOV_BASEDIR}/wovtools/cache"
export WOV_CONFIGFILE_MAINRAW="${WOV_BASEDIR}/${WOV_CONFIGFILE_MAIN}"
export WOV_CONFIGFILE_MINERAW="${WOV_BASEDIR}/${WOV_CONFIGFILE_MINE}"
export WOV_CONFIGFILE_MERGED="${WOV_CACHEDIR}/.merged.json"


# NOTE: These variables are conflated with the Local Archive... so don't use for now
# export WOV_SEADIR="${WOV_BASEDIR}/secrets"
# export WOV_DBADIR="${WOV_BASEDIR}/db/archive"
#export WOV_DSADIR="${WOV_BASEDIR}/secrets"
SED=`which gsed`

# --------------------------------------------------------------------- 
# Used for generating paths to Cluster Configurations that include 
# origin and context.
# $1 WOV_ORIGIN, $2 WOV_CONTEXT
# --------------------------------------------------------------------- 
function WOV_getClusterConfigDir()
{
  echo "${WOV_CACHEDIR}/clusters/${1}__${2}"
}

function getWovProjectVars() 
{
  # --------------------------------------------------------------------- 
  # git vars
  # --------------------------------------------------------------------- 
  R=( "$(isProject)" )
  if [ ${?} != 1 ]; then
    # skip out of error if WOV_DODEFAULTCOMMANDS is 0.. they probably called -h/--help
    if [ ${WOV_DODEFAULTCOMMAND} == 0 ]; then return; fi
    echo "ERROR: not in a WovTools project. Try using wov-init or correcting the errors to have a recognized WovTools project here."
    ( IFS=$'\n'; echo "${R[*]}" )
    exit 1
  fi
  export WOV_PVER="$(git rev-list --count $(git rev-parse --abbrev-ref HEAD))"
  export WOV_SVER="$(cd ${WOV_BASEDIR}/wovtools/secrets && git rev-list --count $(git rev-parse --abbrev-ref HEAD))"
  export WOV_USERNAME="$(git config user.name)"
  export WOV_USEREMAIL="$(git config user.email)"
  export WOV_GSTAGE="$(git rev-parse --abbrev-ref HEAD)"




  # --------------------------------------------------------------------- 
  # global .wovtools file
  # --------------------------------------------------------------------- 
  export WOV_ME=$(cat ${HOME}/.wovtools | jq -r '.me')
  if [ "${WOV_ME}" == "null" ] ; then
    printf "\n\nERROR: You need to set 'me' in the ${WOV_CONFIGFILE_MINE} file.\n"
    printf "  - This is a unique code in this project, to represent yourself. Try using your initials (assuming they are unique to your team).\n\n"
    exit 1
  fi

  # --------------------------------------------------------------------- 
  # vars from merged config files
  # --------------------------------------------------------------------- 

  # --------------------------------------------------------------------- 
  # Merge if out of date
  if [ ${WOV_CONFIGFILE_MAINRAW} -nt ${WOV_CONFIGFILE_MERGED} ] || [ ${WOV_CONFIGFILE_MINERAW} -nt ${WOV_CONFIGFILE_MERGED} ]; then
    l_debug "... merged file out of date, creating: ${WOV_CONFIGFILE_MERGED}"
    mkdir -m 700 -p ${WOV_CACHEDIR}
    echo "" > ${WOV_CONFIGFILE_MERGED}
    chmod 600 ${WOV_CONFIGFILE_MERGED}
    jq -s ".[0] * .[1]" ${WOV_CONFIGFILE_MAINRAW} ${WOV_CONFIGFILE_MINERAW} >> ${WOV_CONFIGFILE_MERGED} 2> /dev/null
    if [ "$?" != "0" ]; then
      F1=$(cat ${WOV_CONFIGFILE_MAINRAW} | jq type 2>&1)
      F1a=$?
      if [ "$F1a" != "0" ]; then printf "\n\nERROR: ${WOV_CONFIGFILE_MAIN} is not properly formatted.\n${F1}\n\n"; fi
      F2=$(cat ${WOV_CONFIGFILE_MINERAW} | jq type 2>&1)
      F2a=$?
      if [ "$F2a" != "0" ]; then printf "\n\nERROR: ${WOV_CONFIGFILE_MINE} is not properly formatted.\n${F2}\n\n"; fi
      exit 1;
    fi
  else
    l_debug "... merged file current"
  fi


  # --------------------------------------------------------------------- 
  # Load merged file in one call
  MERGEDVARS=()
  while read f; do
    MERGEDVARS+=( "$f" )
  done <<<$(cat ${WOV_CONFIGFILE_MERGED} | jq -r ". | ( .ver, .project.masterproject, .project.name, .project.type, .project.title, .project.description, .archives.container, .archives.k8s, .archives.coderepo )" )
  WOV_PVERSION=${MERGEDVARS[0]}
  if [ "${WOV_PVERSION}" != "${WOV_VERSION}" ] && [ "${WOV_PVERSION}" != "initing" ] ; then
    printf "\n\nERROR: Your project version '${WOV_PVERSION}', does not match to the WovTools version '${WOV_VERSION}'.\n"
    printf "       Edit your wovtools/config.json's .ver entry\n\n"

    # Remove this so it will build and not just error out
    rm ${WOV_CONFIGFILE_MERGED}
    exit 1
  fi
  export WOV_MASTERPROJECT="${MERGEDVARS[1]}"
  export WOV_WPROJECT="${MERGEDVARS[2]}"
  export WOV_PROJECTTYPE="${MERGEDVARS[3]}"
  export WOV_PROJECTTITLE="${MERGEDVARS[4]}"
  export WOV_PROJECTDESCRIPTION="${MERGEDVARS[5]}"

  # mimic from ~/.wovtools
  export WOV_CONTAINERARCHIVE="${MERGEDVARS[6]}"
  export WOV_K8SARCHIVE="${MERGEDVARS[7]}"
  export WOV_CODEREPOARCHIVE="${MERGEDVARS[8]}"


  # vars from Kubernetes
  # --------------------------------------------------------------------- 
  if [ "${WOV_CONTEXT}" == "" ]; then 
    WOV_CONTEXT="$(kubectl config current-context 2> /dev/null )" ; Re=$?
    if [ $Re -ne 0 ]; then
      echo "ERROR: Kubernetes not configured. No kubectl context. Set up a current context and run again. Or, use --context or set env WOV_CONTEXT." 1>&2
      exit 1
    fi
    export WOV_CONTEXT
  fi

  array=( ${WOV_CONTEXT//-/ } )
  if [ "${#array[@]}" != "6" ]; then
    echo "ERROR: bad context '${WOV_CONTEXT}'. Should be {ORIGIN:}CLTYPE-PROVIDER-REGION-FLAVOR-PROJECT-STAGE."
    exit 1
  fi
  cltypearray=( ${array[0]//:/ } )
  export WOV_KSTAGE="${array[5]}"
  export WOV_KPROJECT="${array[4]}"
  export WOV_NS="${WOV_KPROJECT}-${WOV_KSTAGE}"
  export WOV_FLAVOR="${array[3]}"
  export WOV_REGION="${array[2]}"
  export WOV_PROVIDER="${array[1]}"

  # if not passed in, load from file
#  if [ "${WOV_ORIGIN}" == "" ]; then
#    export WOV_ORIGIN=$(cat ${WOV_CONFIGFILE_MINERAW} | jq -r '.curorigin')
#  fi

  # from CONTEXT, set CLTYPE to ORIGIN:[CLTYPE] and if CLTYPE does not exist, it's because ORIGIN not set
  export WOV_CLTYPE="${cltypearray[1]}"
  if [ "${WOV_CLTYPE}" == "" ]; then
    export WOV_CLTYPE="${cltypearray[0]}"
#    >&2 echo "1) load from file if not set by commandline : ${WOV_ORIGIN}"
    if [ "${WOV_ORIGIN}" == "" ]; then
#      echo "4) pulling from file"
      export WOV_ORIGIN=$(cat ${WOV_CONFIGFILE_MINERAW} | jq -r '.curorigin')
    fi
  else
    if [ "${WOV_ORIGIN}" != "" ]; then
#      echo "2) Ignore origin"
      if [ "${WOV_ORIGIN}" != "${cltypearray[0]}" ]; then
        >&2 echo "WARNING: ORIGIN '${WOV_ORIGIN}' explicitly set on commandline. Ignoring origin from CONTEXT of '${cltypearray[0]}'."
      fi
    else
#      >&2 echo "3) Set to part of context"
      export WOV_ORIGIN=${cltypearray[0]}
    fi
  fi
  export WOV_CONTEXT="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${WOV_FLAVOR}-${WOV_KPROJECT}-${WOV_KSTAGE}"
  export WOV_CLUSTER="${WOV_CLTYPE}-${WOV_PROVIDER}-${WOV_REGION}-${WOV_FLAVOR}"
  export WOV_WORKINGCONTEXT="${WOV_ORIGIN}:${WOV_CONTEXT}"
#  >&2 echo "WOV_ORIGIN: ${WOV_ORIGIN}"
#  echo "WOV_CONTEXT: ${WOV_CONTEXT}"
#  echo "WOV_WORKINGCONTEXT: ${WOV_WORKINGCONTEXT}"


  # --------------------------------------------------------------------- 
  # Unifying
  # --------------------------------------------------------------------- 
  export WOV_STAGE="$WOV_KSTAGE"        # KSTAGE has priority since git repo might differ but want to build for current stage.
  export WOV_PROJECT="${WOV_WPROJECT}"  

  # echo "PROJECT ${WOV_PROJECT} KSTAGE ${WOV_KSTAGE}"


  # --------------------------------------------------------------------- 
  # vars computed from above
  # --------------------------------------------------------------------- 
  # export WOV_CLUSTERDIR="${WOV_CACHEDIR}/clusters/${WOV_ORIGIN}__${WOV_CONTEXT}"
  export WOV_CLUSTERDIR="$(WOV_getClusterConfigDir ${WOV_ORIGIN} ${WOV_CONTEXT})"
  # mkdir -m 700 -p ${WOV_SECRETFILE_path}
  export WOV_SECRETFILE=${WOV_CLUSTERDIR}/config.json

}


# if it is set to 0, skip, and all other cases load it up
if [ "${ISWOVPROJECT}" == "0" ]; then ISWOVPROJECT=${ISWOVPROJECT}; else getWovProjectVars; fi
