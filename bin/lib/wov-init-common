#!/usr/bin/env bash


# =====================================================================
# =====================================================================
# Global Config (~/.wovtools)
# =====================================================================
# =====================================================================

DEFAULT_SEADIR=~/.wovtools_sea
DEFAULT_DBADIR=~/.wovtools_dba
DEFAULT_DSADIR=~/.wovtools_dsa

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function iGlobalConfig_CreateIfNotExists()
{
  local retval=0
  # --- Ensure ~/.wovtools file
  if [ ! -e "${HOME}/.wovtools" ]; then
    l_warn "no ~/.wovtools file. Creating..."
    echo "{}" > ~/.wovtools
    chmod 700 ~/.wovtools
    iGlobalConfig_InteractiveUpdate
  fi
  return $retval
}

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function iGlobalConfig_InteractiveUpdate()
{
  local retval=0
  local A=

  # Validate it just to make sure we can continue
  iGlobalConfig_Validate ; retval=$?

  # take first 2 letters of username

  # Read what we can from ~/.wovtools
  if [ $retval -eq 0 ]; then
    iGlobalConfig_ReadIn ; reatval=$?
  fi

  # Make assumptions if values not set
  if [ $retval -eq 0 ]; then
    if [ "${WOV_ME}" == "" ];      then WOV_ME=`whoami`; WOV_ME=${WOV_ME::2}; fi
    if [ "${WOV_PROJECT}" == "" ]; then WOV_PROJECT=$(basename $(pwd)); fi
    if [ "${WOV_SEADIR}" == "" ];  then WOV_SEADIR="${DEFAULT_SEADIR}"; fi
    if [ "${WOV_DBADIR}" == "" ];  then WOV_DBADIR="${DEFAULT_DBADIR}"; fi
    if [ "${WOV_DSADIR}" == "" ];  then WOV_DSADIR="${DEFAULT_DSADIR}"; fi
    if [ "${WOV_K8SARCHIVE}" == "" ]; then WOV_K8SARCHIVE="s3://wovtools.DOMAIN/archive"; fi
    if [ "${WOV_CONTAINERARCHIVE}" == "" ]; then
      WOV_CONTAINERARCHIVE="$(aws sts get-caller-identity --output text --query 'Account').dkr.ecr.$(aws configure get region).amazonaws.com"
    fi
    if [ "${WOV_CODEREPOARCHIVE}" == "" ]; then WOV_CODEREPOARCHIVE="git-codecommit.$(aws configure get region).amazonaws.com"; fi
  fi

  if [ $retval -eq 0 ]; then
    echo ""
    echo "---"
    l_ "Create user's global Wovtools config: ~/.wovtools"


    l_verbose " - WOV_ME"
    while true; do
      echo ""
      read -r -p "Enter your WovTools Usercode (ex. your initials) : (\"${WOV_ME}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new WovTools Usercode: " B
          if [[ "${B}" =~ ^[a-z][a-z0-9]+$ ]]; then WOV_ME=$B; break;
          else
            l_warn "Bad. Use only lowercase and no special characters. Numbers can not start. (reg expr /^[a-z][a-z0-9]+$/)."
          fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    echo "  ... WOV_ME: ${WOV_ME}"

    l_verbose " - WOV_SEADIR"
    while true; do
      echo ""
      read -r -p "Default location for WovTools Secrets Archives:  (\"${WOV_SEADIR}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new location: " B
          if [ -e ${B} ]; then WOV_SEADIR="${B}"; break;
          else l_warn "Bad. Directory '${B}' does not exist."; fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    echo "  ... WOV_SEADIR : ${WOV_SEADIR}"

    l_verbose " - WOV_DBADIR"
    while true; do
      echo ""
      read -r -p "Default location for WovTools Database Archives:  (\"${WOV_DBADIR}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new location: " B
          if [ -e ${B} ]; then WOV_DBADIR="${B}"; break;
          else l_warn "Bad. Directory '${B}' does not exist."; fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    echo "  ... WOV_DBADIR : ${WOV_DBADIR}"

    l_verbose " - WOV_DSADIR"
    while true; do
      echo ""
      read -r -p "Default location for WovTools DataSet Archives:  (\"${WOV_DSADIR}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new location: " B
          if [ -e ${B} ]; then WOV_DSADIR="${B}"; break;
          else l_warn "Bad. Directory '${B}' does not exist."; fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    echo "  ... WOV_DSADIR : ${WOV_DSADIR}"
  fi


  l_verbose " - WOV_K8SARCHIVE"
  echo 
  l_ "Default Kubernetes Archive (remote file server):"
  l_ "  Currently, only AWS S3 is supported. (ex. s3://wovtools.MYCOMPANY.com/archive)."
  while true; do
    echo ""
    read -r -p "  Kubernetes Archive: (\"${WOV_K8SARCHIVE}\") ... Correct? [Y/n] " A
    case $A in
      ""|[Yy][Ee][Ss]|[Yy])
        break
        ;;
      [Nn][Oo]|[Nn])
        read -r -p "  ok, enter name: " WOV_K8SARCHIVE
        ;;
      *)
        l_warn "Invalid input... (${A})"
        ;;
    esac
  done


  l_verbose " - WOV_CONTAINERARCHIVE"
  echo
  l_ "Default Container Archive (remote Docker Repository):"
  l_ "  This is where your containers will be pushed and deployed from. Enter the root URL of this repo."
  l_ "  ex. AWS ECR is [aws_account_id].dkr.ecr.[region].amazonaws.com."
  l_ "      AWS get account number: \"aws sts get-caller-identity --output text --query 'Account'\"."
  l_ "      AWS get default region: \"aws configure get region\"."
  while true; do
    echo ""
    read -r -p "  Container Archive: (\"${WOV_CONTAINERARCHIVE}\") ... Correct? [Y/n] " A

    case $A in
      ""|[Yy][Ee][Ss]|[Yy])
        break
        ;;
      [Nn][Oo]|[Nn])
        read -r -p "  ok, enter name: " WOV_CONTAINERARCHIVE
        ;;
      *)
        l_warn "Invalid input... (${A})"
        ;;
    esac
  done


  l_verbose " - WOV_CODEREPOARCHIVE"
  echo
  l_ "Code Repositories Archive (Git repo server)"
  l_ "  This is where your git repositories will be hosted."
  l_ "   ex. "
  while true; do
    echo ""
    read -r -p "  Code Repository Archive: (\"${WOV_CODEREPOARCHIVE}\") ... Correct? [Y/n] " A

    case $A in
      ""|[Yy][Ee][Ss]|[Yy])
        break
        ;;
      [Nn][Oo]|[Nn])
        read -r -p "  ok, enter name: " WOV_CODEREPOARCHIVE
        ;;
      *)
        l_warn "Invalid input... (${A})"
        ;;
    esac
  done



  # Create directories before writing
  if [ $retval -eq 0 ]; then
    mkdir -p -m 700 "${WOV_SEADIR}" || retval=1
    mkdir -p -m 700 "${WOV_DBADIR}" || retval=1
    mkdir -p -m 700 "${WOV_DSADIR}" || retval=1
  fi


  if [ $retval -eq 0 ]; then
    jq ' .me="'"${WOV_ME}"'" | '`
      `'.archives.k8s="'"${WOV_K8SARCHIVE}"'" | '`
      `' .archives.container="'"${WOV_CONTAINERARCHIVE}"'" | '`
      `' .archives.coderepo="'"${WOV_CODEREPOARCHIVE}"'" | '`
      `' .local.searchives.dir="'"${WOV_SEADIR}"'" | '`
      `' .local.dbarchives.dir="'"${WOV_DBADIR}"'" | '`
      `' .local.dsarchives.dir="'"${WOV_DSADIR}"'" ' \
        ~/.wovtools  \
      > "${HOME}/.wovtools.1"
    if [ $? -ne 0 ]; then
      retval=1
      rm ~/.wovtools.1
    else
      mv ~/.wovtools.1 ~/.wovtools
    fi
       
  fi

  return $retval
}


# --------------------------------------------------------------------- 
# Sets global vars from ~/.wovtools file.
# --------------------------------------------------------------------- 
function iGlobalConfig_ReadIn()
{
  local data=()
  while read d; do
    data+=( "$d" )
  done <<<$(cat "${HOME}/.wovtools" | jq -r ".me, .archives.k8s, .archives.container, .archives.coderepo, .local.searchives.dir, .local.dbarchives.dir, .local.dsarchives.dir" )

  WOV_ME=$(              [ "${data[0]}" == "null" ] && echo "" || echo "${data[0]}" )
  WOV_K8SARCHIVE=$(      [ "${data[1]}" == "null" ] && echo "" || echo "${data[1]}" )
  WOV_CONTAINERARCHIVE=$([ "${data[2]}" == "null" ] && echo "" || echo "${data[2]}" )
  WOV_CODEREPOARCHIVE=$( [ "${data[3]}" == "null" ] && echo "" || echo "${data[3]}" )
  WOV_SEADIR=$(          [ "${data[4]}" == "null" ] && echo "" || echo "${data[4]}" )
  WOV_DBADIR=$(          [ "${data[5]}" == "null" ] && echo "" || echo "${data[5]}" )
  WOV_DSADIR=$(          [ "${data[6]}" == "null" ] && echo "" || echo "${data[6]}" )
}


## --------------------------------------------------------------------- 
## Returns project vars from ~/.wovtools for: dir, repo, repobase.
## $1 - Team Project Name
## --------------------------------------------------------------------- 
#function iGlobalConfig_ProjectReadIn()
#{
#  local retval=1
#  local data=()
#  if [ "$1" != "" ]; then
#    retval=0
#    while read d; do
#      data+=( "$d" )
#    done <<<$(cat "${HOME}/.wovtools" | jq -r ".projects.$1.dir, .projects.$1.repo, .projects.$1.repobase" )
#
#    echo
#
#
#    WOV_ME=$(               [ "${data[0]}" == "null" ] && echo "" || echo "${data[0]}" )
#    WOV_ARCHIVESK8S=$(      [ "${data[1]}" == "null" ] && echo "" || echo "${data[1]}" )
#    WOV_ARCHIVESCONTAINER=$([ "${data[2]}" == "null" ] && echo "" || echo "${data[2]}" )
#    WOV_ARCHIVESCODEREPO=$( [ "${data[3]}" == "null" ] && echo "" || echo "${data[3]}" )
#    WOV_SEADIR=$(           [ "${data[4]}" == "null" ] && echo "" || echo "${data[4]}" )
#    WOV_DBADIR=$(           [ "${data[5]}" == "null" ] && echo "" || echo "${data[5]}" )
#    WOV_DSADIR=$(           [ "${data[6]}" == "null" ] && echo "" || echo "${data[6]}" )
#  fi
#  return $retval
#}


# --------------------------------------------------------------------- 
# Just Test that it is proper JSON
# --------------------------------------------------------------------- 
function iGlobalConfig_Validate()
{
  local retval=0
  # --- Ensure formatting of ~/.wovtools
  local JQTEST=$(jq -r "." "${HOME}/.wovtools" 2>&1 ); Re=$?
  if [ "${Re}" != 0 ]; then
    l_error "JSON format error in ~/.wovtools file."
    l_ "  : ${JQTEST}"
    retval=1
  fi

  return $retval
}


# =====================================================================
# =====================================================================
# Project Config File - wovtools/config.json
# =====================================================================
# =====================================================================

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function iProjConfig_CreateIfNotExists()
{
  local retval=0
  # --- Ensure wovtools/config.json file
  if [ ! -e "${WOV_CONFIGFILE_MAINRAW}" ]; then
    l_ "no '${WOV_CONFIGFILE_MAIN}' file. Creating..."
    mkdir -p -m 700 `dirname ${WOV_CONFIGFILE_MAIN}` || return 1
    touch "${WOV_CONFIGFILE_MAIN}" || return 1
    chmod 700 "${WOV_CONFIGFILE_MAINRAW}" || return 1
    echo "{\"ver\" : \"${WOV_VERSION}\"}" > "${WOV_CONFIGFILE_MAINRAW}" || return 1
    iProjConfig_InteractiveUpdate
  fi
  return $retval
}

# --------------------------------------------------------------------- 
# Just Test that it is proper JSON
# --------------------------------------------------------------------- 
function iProjConfig_Validate()
{
  local retval=0
  # --- Ensure formatting
  local JQTEST=$(jq -r "." "${WOV_CONFIGFILE_MAINRAW}" 2>&1 ); Re=$?
  if [ "${Re}" != 0 ]; then
    l_error "JSON format error in '${WOV_CONFIGFILE_MAIN}' file."
    l_ "  : ${JQTEST}"
    retval=1
  fi

  return $retval
}

# --------------------------------------------------------------------- 
# Sets global vars from wovtools/config.json file.
# --------------------------------------------------------------------- 
function iProjConfig_ReadIn()
{
  local data=()
  while read d; do
    data+=( "$d" )
  done <<<$(cat "${WOV_CONFIGFILE_MAINRAW}" | jq -r ".project.masterproject, .project.name, .project.type, .project.title, .project.description, .archives.k8s, .archives.container, .archives.coderepo" )
#  done <<<$(cat "${WOV_CONFIGFILE_MAINRAW}" | jq -r \
#         ".project.masterproject, .project.name, .project.type, .project.title, .project.description, "`
#        `".archives.k8s, .archives.container, .archives.coderepo" )

  WOV_MASTERPROJECT=$(   [ "${data[0]}" == "null" ] && echo "" || echo "${data[0]}" )
  WOV_PROJECT=$(         [ "${data[1]}" == "null" ] && echo "" || echo "${data[1]}" )
  WOV_PROJECTTYPE=$(     [ "${data[2]}" == "null" ] && echo "" || echo "${data[2]}" )
  WOV_PROJECTTITLE=$(    [ "${data[3]}" == "null" ] && echo "" || echo "${data[3]}" )
  WOV_PROJECTDE=$(       [ "${data[4]}" == "null" ] && echo "" || echo "${data[4]}" )

  # Use global values if already set, otherwise use existing
  WOV_K8SARCHIVE=$(      [ "${data[5]}" == "null" ] && echo "${WOV_K8SARCHIVE}" || echo "${data[5]}" )
  WOV_CONTAINERARCHIVE=$([ "${data[6]}" == "null" ] && echo "${WOV_CONTAINERARCHIVE}" || echo "${data[6]}" )
  WOV_CODEREPOARCHIVE=$( [ "${data[7]}" == "null" ] && echo "${WOV_CODEREPOARCHIVE}" || echo "${data[7]}" )
}


# --------------------------------------------------------------------- 
# UNsets all variables that ReadIn creates... for testing
# --------------------------------------------------------------------- 
function _iProjConfig_Clear()
{
  unset WOV_MASTERPROJECT
  unset WOV_PROJECT
  unset WOV_PROJECTTYPE
  unset WOV_PROJECTTITLE
  unset WOV_PROJECTDE
  unset WOV_K8SARCHIVE
  unset WOV_CONTAINERARCHIVE
  unset WOV_CODEREPOARCHIVE
}


# --------------------------------------------------------------------- 
# NOTE: the WOV_XARCHIVE (K8S, CONTAINER, CODEREPO) can be set in 
#       global config. So, should run that first.
# --------------------------------------------------------------------- 
function iProjConfig_InteractiveUpdate()
{
  local retval=0
  local A=
  local B=

  # Validate it just to make sure we can continue
  iProjConfig_Validate ; retval=$?

  # Read what we can
  if [ $retval -eq 0 ]; then iProjConfig_ReadIn ; reatval=$?;  fi

  # Make assumptions if values not set
  if [ $retval -eq 0 ]; then
    if [ "${WOV_PROJECT}" == "" ] || [ "${WOV_MASTERPROJECT}" == "" ]; then
      local t=`basename ${WOV_BASEDIR}`
      local tsplit=( $(echo $t| tr "_" " ") )
      if [ "${WOV_PROJECT}" == "" ]; then WOV_PROJECT="${tsplit[0]}"; fi

      if [ "${WOV_MASTERPROJECT}" == "" ]; then
        local tt=`realpath "${WOV_BASEDIR}/.."`
        tt=`basename ${tt}`
        WOV_MASTERPROJECT="${tt}"
      fi
    fi
    if [ "${WOV_PROJECTTYPE}" == "" ]; then WOV_PROJECTTYPE=""; fi
    if [ "${WOV_PROJECTITLE}" == "" ]; then
      if [ "${WOV_PROJECT}" != "${WOV_MASTERPROJECT}" ]; then
        WOV_PROJECTITLE="${WOV_MASTERPROJECT}: ${WOV_PROJECT}";
      else WOV_PROJECTITLE="${WOV_PROJECT}"; fi
    fi
    if [ "${WOV_PROJECTTITLE}" == "" ];       then WOV_PROJECTTITLE="${WOV_PROJECT^}"; fi
    if [ "${WOV_PROJECTDESCRIPTION}" == "" ]; then WOV_PROJECTDESCRIPTION="A project ${WOV_PROJECTTITLE}." ; fi
    if [ "${WOV_PROJECTTYPE}" == "" ];        then WOV_PROJECTTYPE="" ; fi
  fi

  # Query for data
  if [ $retval -eq 0 ]; then

    echo ""
    l_debug "Create project config: wovtools/config.json"

    echo
    l_debug " - WOV_PROJECT"
    l_h1 "Project Code - WOV_PROJECT"
    l_ "This is this git repository's name. It is also called a Team Project name. Or, if this is the only repo in the Master Project, it is also the Master Project name. This may seem confusing, but as projects grow, this organization, and the use of teams to represent divisions in projects (and not product), will make more sense."
    while true; do
      echo ""
      read -r -p "Enter your project codename (lowercase, character startting) : (\"${WOV_PROJECT}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new value: " B
          if [[ "${B}" =~ ^[a-z][a-z0-9]+$ ]]; then WOV_PROJECT=$B; break;
          else
            l_warn "Bad. Use only lowercase and no special characters. Numbers can not start. (reg expr /^[a-z][a-z0-9]+$/)."
          fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_PROJECT: ${WOV_PROJECT}"

    echo
    l_debug " - WOV_MASTERPROJECT"
    l_h1 "Master Project Code - WOV_MASTERPROJECT"
    l_   "A Master Project refers to the encompassing name of all the WovTools projects. This can be only one project, or multiple team projects. If this is your first WovProject for your Product/System/etc, this is likely the same as your WOV_PROJECT name."
    while true; do
      echo ""
      read -r -p "Enter your master project codename (lowercase, character startting) : (\"${WOV_MASTERPROJECT}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new value: " B
          if [[ "${B}" =~ ^[a-z][a-z0-9]+$ ]]; then WOV_MASTERPROJECT=$B; break;
          else
            l_warn "Bad. Use only lowercase and no special characters. Numbers can not start. (reg expr /^[a-z][a-z0-9]+$/)."
          fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_MASTERPROJECT: ${WOV_MASTERPROJECT}"

    echo
    l_debug " - WOV_PROJECTTITLE"
    l_h1 "Project Title - WOV_PROJECTTITLE"
    while true; do
      echo ""
      read -r -p "What shall we call this : (\"${WOV_PROJECTTITLE}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new value: " WOV_PROJECTTITLE
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_PROJECTTITLE: ${WOV_PROJECTTITLE}"

    echo
    l_debug " - WOV_PROJECTDESCRIPTION"
    l_h1 "Project Description - WOV_PROJECTDESCRIPTION"
    while true; do
      echo ""
      read -r -p "Provide one line or so : (\"${WOV_PROJECTDESCRIPTION}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "ok, enter new value: " WOV_PROJECTDESCRIPTION
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_PROJECTDESCRIPTION: ${WOV_PROJECTDESCRIPTION}"


    # --------------------------------------------------------------------- 
    l_subtitle "Project Push Archives"
    l_ "These are the remote servers where WovTools sends versioned deployables for this project. The three archives are:"
    l_ "  - Kubernetes Archive : a remote file server"
    l_ "  - Container Archive  : a remote Docker container repository"
    l_ "  - Code Archive       : a Git repository"
    # --------------------------------------------------------------------- 

    echo
    l_debug " - WOV_K8SARCHIVE"
    echo
    l_h1 "Kubernetes Archive (a remote file server):"
    l_   "Currently, only AWS S3 is supported. (ex. s3://wovtools.MYCOMPANY.com/archive)."
    if [ "${WOV_K8SARCHIVE}" != "" ]; then l_ "  - global default : ${WOV_K8SARCHIVE}"; fi
    while true; do
      echo ""
      read -r -p "Kubernetes Archive: (\"${WOV_K8SARCHIVE}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -e -p "  ok, enter name: " -i "${WOV_K8SARCHIVE}" WOV_K8SARCHIVE
          local proto="$(echo "${WOV_K8SARCHIVE}" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
          if [ "${proto}" == "" ]; then WOV_K8SARCHIVE=$(realpath "${WOV_K8SARCHIVE}"); fi  # complete local paths
          ;;
        *)
          l_warn "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_K8SARCHIVE: ${WOV_K8SARCHIVE}"

    echo
    echo
    l_debug " - WOV_CONTAINERARCHIVE"
    l_h1 "Container Archive (remote Docker Repository):"
    l_   "This is where your containers will be pushed and deployed from. Enter the root URL of this repo."
    l_   "  ex. AWS ECR is [aws_account_id].dkr.ecr.[region].amazonaws.com."
    l_   "      AWS get account number: \"aws sts get-caller-identity --output text --query 'Account'\"."
    l_   "      AWS get default region: \"aws configure get region\"."
    if [ "${WOV_CONTAINERARCHIVE}" != "" ]; then l_ "  - global default : ${WOV_CONTAINERARCHIVE}"; fi
    while true; do
      echo ""
      read -r -p "Container Archive: (\"${WOV_CONTAINERARCHIVE}\") ... Correct? [Y/n] " A

      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -e -p "  ok, enter name: " -i "${WOV_CONTAINERARCHIVE}" WOV_CONTAINERARCHIVE
          local proto="$(echo "${WOV_CONTAINERARCHIVE}" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
          if [ "${proto}" == "" ]; then WOV_CONTAINERARCHIVE=$(realpath "${WOV_CONTAINERARCHIVE}"); fi  # complete local paths
          ;;
        *)
          l_warn "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_CONTAINERARCHIVE: ${WOV_CONTAINERARCHIVE}"


    echo
    echo
    l_debug " - WOV_CODEREPOARCHIVE"
    l_h1 "Code Repositories Archive (Git repo server)"
    l_   "This is where your Git repositories will be hosted."
    l_   "  ex. "
    if [ "${WOV_CODEREPOARCHIVE}" != "" ]; then l_ "  - global default : ${WOV_CODEREPOARCHIVE}"; fi
    while true; do
      echo ""
      read -r -p "Code Repository Archive: (\"${WOV_CODEREPOARCHIVE}\") ... Correct? [Y/n] " A

      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -e -p "ok, enter name: " -i "${WOV_CODEREPOARCHIVE}"  WOV_CODEREPOARCHIVE
          local proto="$(echo "${WOV_CODEREPOARCHIVE}" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
          if [ "${proto}" == "" ]; then WOV_CODEREPOARCHIVE=$(realpath "${WOV_CODEREPOARCHIVE}"); fi  # complete local paths
          ;;
        *)
          l_warn "Invalid input... (${A})"
          ;;
      esac
    done
    l_debug "  ... WOV_CODEREPOARCHIVE: ${WOV_CODEREPOARCHIVE}"
  fi


  l_debug "- add to json file"
  if [ $retval -eq 0 ]; then
    jq '.project.masterproject="'"${WOV_MASTERPROJECT}"'" | '`
      `'.project.name="'"${WOV_PROJECT}"'" | '`
      `'.project.type="'"${WOV_PROJECTTYPE}"'" | '`
      `'.project.title="'"${WOV_PROJECTTITLE}"'" | '`
      `'.project.description="'"${WOV_PROJECTDESCRIPTION}"'" | '`
      `'.nodeploy=[] | '`
      `'.secrets.dev=[] | '`
      `'.secrets.prod=[] | '`
      `'.originmods={} | '`
      `'.archives.k8s="'"${WOV_K8SARCHIVE}"'" | '`
      `'.archives.container="'"${WOV_CONTAINERARCHIVE}"'" | '`
      `'.archives.coderepo="'"${WOV_CODEREPOARCHIVE}"'" ' \
        "${WOV_CONFIGFILE_MAINRAW}" \
      > "${WOV_CONFIGFILE_MAINRAW}.1"
    if [ $? -ne 0 ]; then
      retval=1
      rm "${WOV_CONFIGFILE_MAINRAW}.1"
    else
      mv "${WOV_CONFIGFILE_MAINRAW}.1" "${WOV_CONFIGFILE_MAINRAW}"
    fi

    # Add Secrets and Origin Mods
    iProjConfig_MergeToSecrets "dev"  "cluster_mymanaged.json" "repositories.json" \
                                      "${WOV_MASTERPROJECT}.json" "${WOV_MASTERPROJECT}_dev.json" || exit 1
    iProjConfig_MergeToSecrets "prod" "cluster_mymanaged.json" "repositories.json" \
                                      "${WOV_MASTERPROJECT}.json" "${WOV_MASTERPROJECT}_prod.json" || exit 1
    iProjConfig_AddOriginMod "local" "For deverlopers to develop locally." || exit 1
  fi

  return $retval
}


# ---------------------------------------------------------------------
# Add an originmod to config.json
# ---------------------------------------------------------------------
function iProjConfig_AddOriginMod()
{
  local retval=0
  local origin=$1
  local desc=$2

  jq -r ".originmods.${origin} = {\"description\" : \"${desc}\", \"routes\" : []}" "${WOV_CONFIGFILE_MAINRAW}" > "${WOV_CONFIGFILE_MAINRAW}.$$" ; Re=$?
  mv "${WOV_CONFIGFILE_MAINRAW}.$$" "${WOV_CONFIGFILE_MAINRAW}"

  return $retval
}


# ---------------------------------------------------------------------
# Add new file to a stage's secret to config.json
# $1 - stage
# $* - files
# ---------------------------------------------------------------------
function iProjConfig_MergeToSecrets()
{
  iProj_Config_MergeToSecrets ${WOV_CONFIGFILE_MAINRAW} ${*}
  return $?
}
function iProjMyConfig_MergeToSecrets()
{
  iProj_Config_MergeToSecrets "${WOV_CONFIGFILE_MINERAW}" ${*}
  return $?
}
function iProj_Config_MergeToSecrets()
{
  local retval=0
  local configfile=$1
  local stage=$2
  shift
  shift

  for f in ${*}; do
    local r=`jq -r ".secrets.${stage} | index( \"${f}\" )" "${configfile}"`
    if [ "${r}" == "null" ]; then
      l_debug "add in to secrets.${stage}: ${f}"
      jq -r ".secrets.${stage}[.secrets.${stage} | length] |=. + \"${f}\"" "${configfile}" > "${configfile}.$$" ; Re=$?
      if [ $Re -ne 0 ]; then retval=1; break; fi
      mv "${configfile}.$$" "${configfile}"
    else
      l_debug "existing secrets.${stage}: ${f}"
    fi
  done

  return $retval
}


# --------------------------------------------------------------------- 
# Just Test that it is proper JSON
# --------------------------------------------------------------------- 
function iProjMyConfig_Validate()
{
  local retval=0
  # --- Ensure formatting
  local JQTEST=$(jq -r "." "${WOV_CONFIGFILE_MINERAW}" 2>&1 ); Re=$?
  if [ "${Re}" != 0 ]; then
    l_error "JSON format error in '${WOV_CONFIGFILE_MINE}' file."
    l_ "  : ${JQTEST}"
    retval=1
  fi

  return $retval
}

# /////////////////////////////////////////////////////////////////////
# Project Config File - wovtools/config.json
# /////////////////////////////////////////////////////////////////////


# ===================================================================== 
# ===================================================================== 
# Repository Naming
# ===================================================================== 
# ===================================================================== 


# ---------------------------------------------------------------------
# Checks 
# ---------------------------------------------------------------------
function iProjRepo_InteractiveNaming()
{
  local MP="$1"    # WOV_MASTERPROJECT
  local P="$2"     # WOV_PROJECT
  local D="$3"     # WOV_BASEDIR
  local DD="$4"    # parent directory name of WOV_BASEDIR
  local Re=

  unset wov_REPO_TYPE wov_REPO_EXT wov_REPO_MSCODE
  iProjRepo_Naming "$1" "$2" "$3" "$4" ; Re=$?

  >&2 printf "AFTER: $?:${wov_REPO_TYPE}:${wov_REPO_EXT}:${wov_REPO_MSCODE}\n"

  l_debug "  ... ask to stop and fix directory structure if problem."
  if [ $Re != 0 ]; then
    while true; do
      read -r -p "You have errors in your directory structure. Do you want to quit to fix these? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          exit 1
          ;;
        [Nn][Oo]|[Nn])
          break
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
  fi



  if [ "$wov_REPO_TYPE" == "" ]; then

    echo 
    l_warn "Could not determine if this is a project holding a SINGLE or MANY microservices."
    l_warn "  SINGLE - has a './src' directory for your microservice."
    l_warn "  MANY   - has multiple directories, each with a microservice."
    while true; do
      read -r -p "Is this a SINGLE or MANY project? [single/many] " A
      case $A in
        [Ss]|[Ss][Ii][Nn][Gg][Ll][Ee])
          wov_REPO_TYPE='single'
          break
          ;;
        [Mm]|[Mm][Aa][Nn][Yy])
          wov_REPO_TYPE='many'
          break
          ;;
        *)
          echo "  Invalid input... (${A})"
          ;;
      esac
    done
  fi


  l_debug "Single repos need a microservice code"
  if [ "${wov_REPO_TYPE}" == "single" ] && [ "$wov_REPO_MSCODE" == "" ]; then
    l_warn "Could not determine the microservice code."
   
    l_h2 "Microservice Code"
    l_   "This project appears to be a single microservice project. But, we can't determine the name from the existing naming. This microservice code is appended to the project name to name the microservice so it should be short."
    l_   "   ex. [PROJECT][MSCODE]." 
    while true; do
      read -r -p "Enter the microservice's code: " A
      if [[ "${A}" =~ ^[a-z][a-z0-9_]+$ ]]; then wov_REPO_MSCODE=$A; break;
      else l_warn "Microservice extension should start with a character, be at least 2 characters long and be all lower case."; fi
    done
  fi

  l_debug "Define the git repo's name"
  if [ "$wov_REPO_EXT" == "" ]; then

    l_warn "Could not determine the repository extension name. This name will be appended to your project\'s Code Repository Archive (i.e. it is the name of the Git repo)."

    l_h2 "Git Repo Name"
    l_ "WovTools trys to enforce a naming scheme on your repositories so you can look at your Git repositories on the server and see them organized by Master Project, with Team projects under them. On your local system, your cloned repositories will also have this organization."
    l_ "  - Projects with a SINGLE microservice, should have a Git Repo Name of : [MASTER]_[PROJECT]_[PROJECT][MSCODE]."
    l_ "  - Projects with MANY microserivces, should have a Git Repo Name of    : [MASTER]_[PROJECT]."
    if [ "${wov_REPO_TYPE}" == "single" ]; then
      l_ "  - your project is SINGLE, so : '${MP}_${P}_${P}${wov_REPO_MSCODE}'."
      wov_REPO_EXT="${MP}_${P}_${P}${wov_REPO_MSCODE}"
    else
      l_ "  - your project is MANY, so : '${MP}_${P}'."
      wov_REPO_EXT="${MP}_${P}"
    fi
    while true; do
      read -r -p "Use this repository extension : (\"${wov_REPO_EXT}\") ... Correct [Y/n]? " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break;
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "Ok, what extension? " B
          if [[ "${B}" =~ ^[a-z][a-z0-9_]+$ ]]; then wov_REPO_EXT=$B; break;
          else l_warn "Microservice extension should start with a character, be at least 2 characters long and be all lower case."; fi
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac

    done
  fi

  return $retval
}


# ---------------------------------------------------------------------
# single - one microservice is in this project, in 'src' dir
# many   - microservices are directories off this project
#  wov_REPO_TYPE   - single or many
#  wov_REPO_EXT    - name of the extension on the remote code repo
#  wov_REPO_MSCODE - microservice code (from directory name)
#
#                       Single MS                                Multi
# Master Proj Name    |  [MASTER]                             | [MASTER]
# Project Name        |  [PROJECT]                            | [PROJECT]
# MS Code             |  [MSCODE] - not provided tho          | ---
# ---------------------------------------------------------------------------------
# Directory Name      |  [PROJECT][MSCODE]                    | [PROJECT]
# Par Dir Name        |  [PROJECT]                            | [MASTER]
# Repository Ext Name |  [MASTER]_[PROJECT]_[PROJECT][MSCODE] | [MASTER]_[PROJECT]
# ---------------------------------------------------------------------
function iProjRepo_Naming()
{
  local retval=0
  local MP="$1"    # WOV_MASTERPROJECT
  local P="$2"     # WOV_PROJECT
  local D="$3"     # WOV_BASEDIR
  local DD="$4"    # parent directory name of WOV_BASEDIR
  local dminus=
  local mscode=

  wov_REPO_TYPE=
  wov_REPO_EXT=
  wov_REPO_MSCODE=

  # Handle Single directories first
  if [ -e "${WOV_BASEDIR}/src" ]; then
    export wov_REPO_TYPE="single"
    l_debug printf "setting wov_REPO_TYPE: ${wov_REPO_TYPE}\n"
    if [ "${P}" != "${DD}"   ]; then l_warn "Your project's parent directory is not the project name."; retval=1; fi
    dminus=${D:0:${#P}}
    if [ "${dminus}" != "${P}" ]; then
      l_warn "Your current directory does not start with your project name. Can not determine MSCode or Repo extension."
      retval=$((retval+2))
    else
      wov_REPO_MSCODE=${D:${#P}}
      if [ "${wov_REPO_MSCODE}" == "" ]; then l_warn "Your mscode is not the end part of your project directory name."
        retval=$((retval+4))
      else
        RECIPES+=( "${wov_REPO_MSCODE}" )
        export wov_REPO_EXT="${MP}_${P}_${P}${wov_REPO_MSCODE}"
      fi
    fi

  # Handle many microservices in project
  else
    export wov_REPO_TYPE="many"
    if [ "${MP}" != "${DD}" ]; then l_warn "Your project parent directory '${DD}' is not the master project name '${MP}'."; retval=$((retval+8)); fi
    if [ "${P}" != "${D}"   ]; then l_warn "Your project directory is not the project name."; retval=$((retval+16)); fi
    export wov_REPO_EXT="${MP}_${P}"
  fi

  # >&2 printf "exit set wov_REPO_TYPE: ${wov_REPO_TYPE}\n"
  return $retval
}

# /////////////////////////////////////////////////////////////////////
# Repository Naming
# /////////////////////////////////////////////////////////////////////

# =====================================================================
# =====================================================================
# Project git configuration
# =====================================================================
# =====================================================================

function iProjGit_InteractiveUpdate()
{
  local CODEREPOARCHIVE=$1 # WOV_CODEREPOARCHIVE
  local REPO_EXT=$2        # wov_REPO_EXT
  local ME=$3              # WOV_ME
  local ISNEWGIT=0
  local RR=
  local Re=

  if [ -e ".git" ]; then l_ "  ... found existing git initialization.";
  else l_ "  ...git init this repository"; ISNEWGIT=1; git init -q; fi


  l_ "  ...ensuring git remote origin is set"
  RR=$(git config --get remote.origin.url 2> /dev/null) ; Re=$?
  if [ $Re -ne 0 ]; then

    echo
    RR="${CODEREPOARCHIVE}/${REPO_EXT}"
    l_h2 "Git - Remote Repository"
    l_ "Your project\'s Git repository remote has not been set."
    l_ "  - assuming : '${RR}'"
    l_ "    (from WOV_CODEREPOARCHIVE and repo extension)"
    while true; do
      echo 
      read -r -p "Remote git repository (\"${RR}\") ... Correct [Y/n]?  " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -e -p "ok, enter new repository (URL or path) : " -i "${RR}" RR
          local proto="$(echo "${RR}" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
          if [ "${proto}" == "" ]; then RR=$(realpath "${RR}"); fi  # complete local paths
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done

    l_ "  ...set remote origin to ${RR}"
    git remote add origin $RR
    if [ "$?" != "0" ]; then echo "ERROR: setting git remote origin failed."; exit 1; fi

    l_ "  ...test remote origin"
    git remote -v
    if [ "$?" != "0" ]; then echo "ERROR: testing of remote git repo failed."; exit 1; fi

    wov_REPO_EXT=$(basename ${RR})
    if [ "${wov_REPO_EXT: -4}" == ".git" ]; then wov_REPO_EXT=${wov_REPO_EXT:0:-4}; fi
    l_ "  ...assuming repository extension to be (wov_REPO_EXT) : ${wov_REPO_EXT}"

  fi

  # ---------------------------------------------------------------------
  # Select user name
  if [ "${WOV_USERNAME}" == "" ]; then WOV_USERNAME=$(git config user.name); fi
  if [ "${WOV_USERNAME}" == "" ]; then WOV_USERNAME=$(id -F); fi
  echo ""
  l_h2 "Your Name"
  l_   "This will be stored in git."
  while true; do
    read -r -p "Enter your name (from git's config: \"${WOV_USERNAME}\") (press ENTER to keep) : " A
    if [ "${A}" != "" ]; then
      WOV_USERNAME="${A}"
      git config user.name "${WOV_USERNAME}"
      break;
    elif [ "${A}" == "" ] && [ "${WOV_USERNAME}" != "" ]; then
      git config user.name "${WOV_USERNAME}"
      break;
    else
      l_warn "This requires a name."
    fi
  done
  export WOV_USERNAME

  # ---------------------------------------------------------------------
  # Select user email
  if [ "${WOV_USEREMAIL}" == "" ]; then WOV_USEREMAIL=$(git config user.email); fi
  echo ""
  l_h2 "Your Company Email"
  l_   "This will be stored in git."
  while true; do
    read -r -p "Enter your email (from git's config: \"${WOV_USEREMAIL}\") (press ENTER to keep) : " A
    if [ "${A}" != "" ]; then
      WOV_USEREMAIL="${A}"
      git config user.email "${WOV_USEREMAIL}"
      break
    elif [ "${A}" == "" ] && [ "${WOV_USEREMAIL}" != "" ]; then
      git config user.email "${WOV_USEREMAIL}"
      break
    else
      l_warn "This requires an email."
    fi
  done
  export WOV_USEREMAIL
  # pull this out now
  wov_COMPANYDOMAIN=( ${WOV_USEREMAIL//@/ } )
  export wov_COMPANYDOMAIN=${wov_COMPANYDOMAIN[1]}
  l_ "  ...assuming company Domain to be '${wov_COMPANYDOMAIN}'."


  # ---------------------------------------------------------------------
  # Ensure lines in .gitignore
  l_ "  ...updating .gitignore"
  touch .gitignore
  GITLINES=( ".DS_Store" "wovtools/secrets" "wovtools/cache" "wovtools/db/*.deltas" "wovtools/db/archive" "${WOV_CONFIGFILE_MINE}" '*.old' '*.orig' ".mochawesome-report" '*.log' '*.swp' )
  for f in "${GITLINES[@]}"; do
    l_debug "  ... adding to .gitignore: $f"
    if ! grep -qF "${f}" .gitignore ; then echo "${f}" >> .gitignore ; fi
  done


  # ---------------------------------------------------------------------
  # now commit so we can build branches
  # Build a git revision and all branches
  if [ "$ISNEWGIT" == "1" ]; then
    l_ "  ...git initial commit"
    git add .gitignore
    git add wovtools/config.json          # Was already created by now
    git commit -a -m "initial commit"
  fi


  # ---------------------------------------------------------------------
  l_ "  ...make sure git is checked in"
  doCheckCommit "." || ( l_error "You need to check in all code before init." ; exit 1 )
  # doCheckPush "." || exit 1

  # ---------------------------------------------------------------------
  l_ "  ...ensure git branches of 'prod' and 'dev'"
  RR=$(git rev-parse --verify prod 2> /dev/null)
  if [ "$?" != "0" ]; then
    l_ "    ...creating branch 'prod', pushing to origin";
    git checkout -b prod || exit 1
    git push --set-upstream origin prod || exit 1
  fi
  RR=$(git rev-parse --verify dev 2> /dev/null)
  if [ "$?" != "0" ]; then
    l_ "    ...creating branch 'dev', pushing to origin";
    git checkout -b dev || exit 1
    git push --set-upstream origin dev || exit 1
  fi

  # ---------------------------------------------------------------------
  if [ "$(git rev-parse --verify master 2> /dev/null ; echo $?)" != "0" ]; then
    l_warn "  ... branch 'master' exists and should be deleted (prod will be default)"
    read -r -p "Delete 'master' branch? [y/N] " A
    case $A in
      [Yy][Ee][Ss]|[Yy])
        l_ "...deleting local 'master' branch. (NOTE: remote 'master' branch will be up to you to manage)"
        GBRESULT=$(git branch -d master 2>&1)
        # --- note: error or success does not matter since it does not always exist
        ;;
      ""|[Nn][Oo]|[Nn])
        l_ "...skipping"
        ;;
      *)
        echo "Invalid input... (${A})"
        ;;
    esac
  fi
  touch .gitignore

  # ---------------------------------------------------------------------
  # Select user branch/stage
  RR=$(git rev-parse --verify ${ME} 2> /dev/null)
  if [ "$?" != "0" ]; then
    l_ "  ...creating branch '${ME}', pushing to origin"
    git checkout -b ${ME} || exit 1
    git push --set-upstream origin ${ME} || exit 1
  fi
}

# /////////////////////////////////////////////////////////////////////
# Project git configuration
# /////////////////////////////////////////////////////////////////////


# =====================================================================
# =====================================================================
# Local Archives
# =====================================================================
# =====================================================================

# --------------------------------------------------------------------- 
# Check that the directories exist for local archives.
# --------------------------------------------------------------------- 
function iLocalArchives_CheckDirs()
{
  local retval=0
  local MASTERPROJECT=$1  # WOV_MASTERPROJECT
  local SEADIR=$2         # WOV_SEADIR
  local DBADIR=$3         # WOV_DBADIR
  local DSADIR=$4         # WOV_DSADIR

  l_verbose "... make sure Secrets Archive exists"
  if [ ! -e "${SEADIR}/${MASTERPROJECT}" ]; then l_error "... Secrets Archive at '${SEADIR}/${MASTERPROJECT}' does not exist. Run 'wov-init'."; retval=1; fi

  l_verbose "... make sure DataBase Archive exists"
  if [ ! -e "${DBADIR}/${MASTERPROJECT}" ]; then l_error "... DataBase Archive at '${DBADIR}/${MASTERPROJECT}' does not exist. Run 'wov-init-dba'."; retva=1; fi

  l_verbose "... make sure DataSets Aarchive exists"
  if [ ! -e "${DSADIR}/${MASTERPROJECT}" ]; then l_error "... DataSets Archive at '${DSADIR}/${MASTERPROJECT}' does not exist. Run 'wov-init-dba'."; retva=1; fi

  return $retval
}


# --------------------------------------------------------------------- 
# Assuming local archive directories exist, link to them for the project.
# --------------------------------------------------------------------- 
function iLocalArchives_LinkLocalArchives() 
{
  local retval=0
  local BASEDIR=$1
  local MASTERPROJECT=$2  # WOV_MASTERPROJECT
  local SEADIR=$3         # WOV_SEADIR
  local DBADIR=$4         # WOV_DBADIR
  local DSADIR=$5         # WOV_DSADIR
  local USERNAME=$6       # WOV_USERNAME
  local USEREMAIL=$7      # WOV_USEREMAIL


  l_verbose "... creating ${BASEDIR}/wovtools/[db|ds] directories"
  if [ ! -e "${BASEDIR}/wovtools/db" ]; then mkdir -p -m 700 "${BASEDIR}/wovtools/db" ; fi
  if [ ! -e "${BASEDIR}/wovtools/ds" ]; then mkdir -p -m 700 "${BASEDIR}/wovtools/ds" ; fi

  l_verbose "... ensure MasterProject exists in Local Archive Directories and is a git repo" 
  local LADIRS=( "${SEADIR}" "${DBADIR}" "${DSADIR}" )
  for f in ${LADIRS[@]}; do
    local laname=`basename "$f"`
    l_verbose "  ...Local Archive : ${laname}"
    if [ ! -e "${f}/${MASTERPROJECT}/" ]; then mkdir -p -m 700 "${f}/${MASTERPROJECT}"; fi
    if [ ! -d "${f}/${MASTERPROJECT}/.git" ]; then
      l_ "  ...making '${laname}' local archive a git repo and making first commit."
      git -C "${f}/${MASTERPROJECT}" init
      git -C "${f}/${MASTERPROJECT}" config user.name "${USERNAME}"
      git -C "${f}/${MASTERPROJECT}" config user.email "${USEREMAIL}"
      if [ ! -e "${f}/${MASTERPROJECT}/.gitignore" ]; then
        touch "${f}/${MASTERPROJECT}/.gitignore"
        chmod 700 "${f}/${MASTERPROJECT}/.gitignore"
        printf "*.swp\n.DS_Store\n" > "${f}/${MASTERPROJECT}/.gitignore"
      fi
      git -C "${f}/${MASTERPROJECT}" add .gitignore
      git -C "${f}/${MASTERPROJECT}" commit -m "first commit"
    fi
  done

  l_ "  ...symlink Secrets"
  if [ -e "${BASEDIR}/wovtools/secrets" ]; then l_ "    ...existing connection to Secrets Archive. Skipping."
  else
    ln -s ${SEADIR}/${MASTERPROJECT} ${BASEDIR}/wovtools/secrets ; Re=$?
    if [ ${Re} -ne 0 ]; then l_error "Failed to link '${BASEDIR}/wovtools/secrets' to '${SEADIR}/${MASTERPROJECT}'."; exit 1; fi
  fi

  l_ "  ...symlink Database Archive"
  if [ -e "${BASEDIR}/wovtools/db/archive" ]; then l_ "    ...existing connection to Database Archive. Skipping."
  else
    ln -s "${DBADIR}/${MASTERPROJECT}" "${BASEDIR}/wovtools/db/archive" ; Re=$?
    if [ ${Re} -ne 0 ]; then l_error "Failed to link '${BASEDIR}/wovtools/db/archive' to '${DBADIR}/${MASTERPROJECT}'."; exit 1; fi
  fi

  l_ "  ...symlink DataSet Archive"
  if [ -e "${BASEDIR}/wovtools/ds/const" ]; then l_ "    ...existing connection to DataSet Archive. Skipping."
  else
    ln -s "${DSADIR}/${MASTERPROJECT}" "${BASEDIR}/wovtools/ds/const" ; Re=$?
    if [ ${Re} -ne 0 ]; then l_error "Failed to link '${BASEDIR}/wovtools/ds/const' to '${DSADIR}/${MASTERPROJECT}'."; exit 1; fi
  fi

  return $retval
}


# --------------------------------------------------------------------- 
# Create a default Secrets file for a project if does not exist
# --------------------------------------------------------------------- 
function iLocalArchives_SEFiles() 
{
  local retval=0
  local BASEDIR=$1        # WOV_BASEDIR
  local MASTERPROJECT=$2  # WOV_MASTERPROJECT
  local ME=$3             # WOV_ME
  local DOMAIN=$4  # WOV_cluster_dns_domain

  # make sure default secret files exist
  if [ ! -e "${BASEDIR}/wovtools/secrets/${MASTERPROJECT}.json" ]; then
    cat <<EOF > "${BASEDIR}/wovtools/secrets/${MASTERPROJECT}.json"
{
  "www" : {
    "STAGEdev" : {
      "api"   : {"urlscheme" : "https", "url" : "api-dev.${DOMAIN}"},
      "app"   : {"urlscheme" : "https", "url" : "app-dev.${DOMAIN}"}
    },
    "STAGEprod" : {
      "api"   : {"urlscheme" : "https", "url" : "api.${DOMAIN}"},
      "app"   : {"urlscheme" : "https", "url" : "app.${DOMAIN}"}
    }
  }
}
EOF
  fi

  if [ ! -e "${BASEDIR}/wovtools/secrets/${MASTERPROJECT}_${ME}.json" ]; then
    cat <<EOF > "${BASEDIR}/wovtools/secrets/${MASTERPROJECT}_${ME}.json"
  {
    "www" : {
      "STAGE${ME}" : {
        "api"   : {"urlscheme" : "https", "url" : "api-${ME}.${DOMAIN}"},
        "app"   : {"urlscheme" : "https", "url" : "app-${ME}.${DOMAIN}"}
      },
      "ORIGINlocal" : {
        "api" : {"urlscheme" : "http", "url" : "localhost"},
        "app" : {"urlscheme" : "http", "url" : "localhost"}
      }
    }
  }
EOF
  fi

  return $retval
}


# --------------------------------------------------------------------- 
# For WovDataBase secrets, sdds to (my)config.json and creates the
# secrets files themselves. 
# $1 - basedir
# $2 - MASTER project name
# $3 - ME
# $4 - DBNAME
# --------------------------------------------------------------------- 
function iLocalArchives_SEDBFiles() 
{
  local retval=0
  local BASEDIR=$1        # WOV_BASEDIR
  local MASTERPROJECT=$2  # WOV_MASTERPROJECT
  local ME=$3             # WOV_ME
  local WOVDBNAME=$4      # 

  if [ ${#*} -ne 4 ]; then l_error "Bad number of arguments "; exit 2; fi

  # Make sure database configs are included
  iProjMyConfig_MergeToSecrets "${ME}" "${WOVDBNAME}.json"
  iProjMyConfig_MergeToSecrets "${ME}" "${WOVDBNAME}_${ME}.json"
  iProjConfig_MergeToSecrets   "dev"   "${WOVDBNAME}.json"
  iProjConfig_MergeToSecrets   "dev"   "${WOVDBNAME}_dev.json"
  iProjConfig_MergeToSecrets   "prod"  "${WOVDBNAME}.json"
  iProjConfig_MergeToSecrets   "prod"  "${WOVDBNAME}_prod.json"


  # Main database secret file, for dev stage
  if [ ! -e "${BASEDIR}/wovtools/secrets/${WOVDBNAME}.json" ]; then
      cat <<EOF > "${BASEDIR}/wovtools/secrets/${WOVDBNAME}.json"
  {
    "${WOVDBNAME}" : {
      "//subhost" : "combined with WOV_CLUSTER to create host name. if localhost, only localhost",
      "subhost"      : "${WOVDBNAME}dev",
      "username"     : "",
      "endpoint"     : "unknown.rds.amazonaws.com",
      "database"     : "",
      "//port"       : "Assuming postgres default port",
      "port"         : 5432,
      "type"         : "postgres",
      "version"      : "9.6.11-R1",
      "password"     : "$(openssl rand -hex 20)",
      "instanceAvailabilityZone"    : "c",
      "instanceAvailabilityZoneAlt" : "d",
      "instance" : {
        "class"   : "db.t2.small",
        "storage" : 20
      },
      "ORIGINlocal" : {
        "//desc"   : "This is for connecting to a locally running system.",
        "subhost"  : "localhost",
        "endpoint" : "localhost",
        "//port"   : "This is the direct port the local POSTGRES db is listening to.",
        "port"     : 5432
      },
      "ORIGINremote" : {
        "//desc"   : "This is for connecting to a remotely running system.",
        "subhost"  : "localhost",
        "endpoint" : "localhost",
        "//port"   : "This is the ssh tunnel port opened through bastion.",
        "port"     : 65432
      }
    }
  }
EOF
  fi

  # Modification to a database's secrets per stage
  for st in "prod" "dev" "${ME}"; do
    if [ ! -e "${BASEDIR}/wovtools/secrets/${WOVDBNAME}_${st}.json" ]; then
      cat <<EOF > "${BASEDIR}/wovtools/secrets/${WOVDBNAME}_${st}.json"
{
  "${WOVDBNAME}" : {
    "STAGE${st}" : {
      "username"     : "postgres",
      "password"     : "$(openssl rand -hex 20)",
      "database"     : "${WOVDBNAME}${st}"
    }
  }
}
EOF
    fi
  done

  return $retval
}


# --------------------------------------------------------------------- 
# Reask the location for LocalArchives for this Project. Can pass in default,
# which usually come from the global files.
# --------------------------------------------------------------------- 
function iProjLocalArchives_InteractiveUpdate()
{
  local retval=0
  local title=
  local dir=
  local A=
  local B=
  local labase="$1"

  local dirnames=( "Secrets" "Databases" "DataSets" )
  local dirs=( "${2}" "${3}" "${4}" )
  local varnames=( "WOV_SEADIR" "WOV_DBADIR" "WOV_DSADIR" )

  # overwrite if base provided
  if [ "${labase}" != "" ]; then
    l_ "  ...Using local archive default of '${labase}' instead of global values."
    dirs=( "${labase}/secrets" "${labase}/dbarchive" "${labase}/dsarchive" )
  fi

  for i in $(seq 0 $((${#dirs[@]}-1)) ); do
    title="${dirnames[$i]}"
    dir="${dirs[$i]}"
    varname="${varnames[$i]}"

    echo 
    l_h2 "Project ${title} Local Archive"
    l_   "Setting the value for this project by assuming the global default."
    while true; do
      echo ""
      read -r -p "Project ${title} Local Archive directory : (\"${dir}\") ... Correct? [Y/n] " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -e -i "${dir}" -p "ok, enter new directory: " -i "${dir}" B
          B=$(realpath ${B})
          if [ -e ${B} ]; then dir="${B}"; break;
          else l_warn "Bad directory. '${B}' does not exist."; fi
          ;;
        *)
          l_warn "Invalid input... (${A})"
          ;;
      esac
    done

    # set the global variable
    IFS= read -r "$varname" <<<"${dir}"
    l_ "  ...${varname} : ${!varname}"
  done

  return $retval
}


# --------------------------------------------------------------------- 
# Configure the remote git repo for project's Local Archives
# --------------------------------------------------------------------- 
function iLocalArchives_InteractiveSetRemoteRepos() 
{
  local retval=0
  local askfirst=$1       # 1 to ask, 0 to accept vals
  local BASEDIR=$2        # WOV_BASEDIR
  local sera=
  local dbra=
  local dsra=

  if [ ${#@} != 2 ]; then l_error "Bad number of arguments in iLocalArchives_InteractiveSetRemoteRepos"; exit 1; fi 

  # Guess at secrets remote (current repo plus _secrets)
  ra=`git -C "${BASEDIR}" config --get remote.origin.url`
  sera="${ra%.git}_secrets.git"

  # Set secrets remote origin if not set
  RR=$(git -C "${BASEDIR}/wovtools/secrets" config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo ""
    l_ "...Local SECRETS Archive has no remote repository to push code to. Set that up now, and enter URL below."

    while [ ${askfirst} -eq 1 ]; do
      echo ""
      read -r -p "Project Secrets Archive Remote Git repository (\"${sera}\") [Y/n]:  " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "  ok, enter git location: " sera
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    # echo "  ... ${sera}"

    # config repo
    git -C "${BASEDIR}/wovtools/secrets" config user.name "${WOV_USERNAME}"
    git -C "${BASEDIR}/wovtools/secrets" config user.email "${WOV_USEREMAIL}"
    git -C "${BASEDIR}/wovtools/secrets" add .gitignore
    git -C "${BASEDIR}/wovtools/secrets" commit -a -m "first commit"

    # set remote origin
    git -C "${BASEDIR}/wovtools/secrets" remote add origin ${sera}
    if [ "$?" != "0" ]; then l_error "SECRETS ARCHIVE> Setting git remote origin failed."; exit 1; fi

    # test newly set remote origin
    RR=$(git -C "${BASEDIR}/wovtools/secrets" remote -v) ; Re=$?
    if   [ $Re -ne 0 ]; then l_error "SECRETS ARCHIVE> Testing of remote git repo failed."; exit 1;
    elif [ "${RR}" == "" ]; then l_error "SECRETS ARCHIVE> Remote git repo was not set correctly."; exit 1; fi

    # set upstream
    git -C "${BASEDIR}/wovtools/secrets" push --set-upstream origin master
    if [ "$?" != "0" ]; then l_error "SECRETS ARCHIVE> Pushing upstream failed."; exit 1; fi
  fi


  # Set database remote origin if not set
  dbra="${sera%_secrets.git}_dba.git"
  RR=$(git -C "${BASEDIR}/wovtools/db/archive" config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo ""
    l_ "...Local Database Archive repository has no remote repository to push code to. Set that up now, and enter URL below."

    while [ ${askfirst} -eq 1 ]; do
      echo ""
      read -r -p "Project Database Archive Remote Git repository (\"${dbra}\") [Y/n]:  " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "  ok, enter git location: " dbra
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    # echo "  ... ${dbra}"

    # config repo
    git -C "${BASEDIR}/wovtools/db/archive" config user.name "${WOV_USERNAME}"
    git -C "${BASEDIR}/wovtools/db/archive" config user.email "${WOV_USEREMAIL}"
    git -C "${BASEDIR}/wovtools/db/archive" add .gitignore
    git -C "${BASEDIR}/wovtools/db/archive" commit -a -m "first commit"

    # set remote origin
    git -C "${BASEDIR}/wovtools/db/archive" remote add origin ${dbra}
    if [ "$?" != "0" ]; then l_error "ARCHIVE> Setting git remote origin failed."; exit 1; fi

    # test newly set remote origin
    RR=$(git -C "${BASEDIR}/wovtools/db/archive" remote -v) ; Re=$?
    if   [ $Re -ne 0 ]; then l_error "Database ARCHIVE> Testing of remote git repo failed."; exit 1;
    elif [ "${RR}" == "" ]; then l_error "Database SECRETS ARCHIVE> Remote git repo was not set correctly."; exit 1; fi

    # set upstream
    git -C "${BASEDIR}/wovtools/db/archive" push --set-upstream origin master
    if [ "$?" != "0" ]; then l_error "DatabaseARCHIVE> Pushing upstream failed."; exit 1; fi
  fi


  # Set dataset remote origin if not set
  dsra="${dbra%_dba.git}_dsa.git"
  RR=$(git -C "${BASEDIR}/wovtools/ds/const" config --get remote.origin.url 2> /dev/null)
  if [ "$?" != "0" ]; then
    echo ""
    l_ "  ...Local DataSet Archive repository has no remote repository to push code to. Set that up now, and enter URL below."

    while [ ${askfirst} -eq 1 ]; do
      echo ""
      read -r -p "Project DataSet Archive Remote Git repository (\"${dsra}\") [Y/n]:  " A
      case $A in
        ""|[Yy][Ee][Ss]|[Yy])
          break
          ;;
        [Nn][Oo]|[Nn])
          read -r -p "  ok, enter git location: " dsra
          ;;
        *)
          echo "Invalid input... (${A})"
          ;;
      esac
    done
    # echo "  ... ${dsra}"

    # config repo
    git -C "${BASEDIR}/wovtools/ds/const" config user.name "${WOV_USERNAME}"
    git -C "${BASEDIR}/wovtools/ds/const" config user.email "${WOV_USEREMAIL}"
    git -C "${BASEDIR}/wovtools/ds/const" add .gitignore
    git -C "${BASEDIR}/wovtools/ds/const" commit -a -m "first commit"

    # set remote origin
    git -C "${BASEDIR}/wovtools/ds/const" remote add origin ${dsra}
    if [ "$?" != "0" ]; then l_error "DataSet ARCHIVE> Setting git remote origin failed."; exit 1; fi

    # test newly set remote origin
    RR=$(git -C "${BASEDIR}/wovtools/ds/const" remote -v) ; Re=$?
    if   [ $Re -ne 0 ]; then l_error "DataSet ARCHIVE> Testing of remote git repo failed."; exit 1;
    elif [ "${RR}" == "" ]; then l_error "DataSet SECRETS ARCHIVE> Remote git repo was not set correctly."; exit 1; fi

    # set upstream
    git -C "${BASEDIR}/wovtools/ds/const" push --set-upstream origin master
    if [ "$?" != "0" ]; then l_error "DataSet Archive> Pushing upstream failed."; exit 1; fi
  fi

}


# ///////////////////////////////////////////////////////////////////// 
# Local Archives
# ///////////////////////////////////////////////////////////////////// 


# =====================================================================
# =====================================================================
# wovtool/myconfig.json
# =====================================================================
# =====================================================================

# ---------------------------------------------------------------------
# $1 - "${WOV_CONFIGFILE_MINE}" - config file path and name
# $2 - "${WOV_ME}" - developer code
# $3 - "${WOV_MASTERPROJECT}" - project name
# ---------------------------------------------------------------------
function doCreateMyConfigJSON()
{
  l_debug " ... check to create '${1:${#WOV_BASEDIR}+1}'"
  if [ ! -e "${1}" ]; then
    l_ "   ... creating '${1:${#WOV_BASEDIR}+1}'"
    cat <<EOF > "${1}"
{
  "ver-local" : ${WOV_VERSION},
  "curorigin" : "local",
  "secrets" : {
    "${2}" : [
      "cluster_mymanaged.json",
      "repositories.json",
      "${3}.json",
      "${3}_${2}.json"
    ]
  },
  "originmods" : {
    "laptop": {
      "description": "Local URLs and dbs.",
      "routes": [
        [
          "www.ORIGINlaptop",
          "www"
        ]
      ]
    }
  }
}
EOF
else
  l_ "  ... skipping '${1:${#WOV_BASEDIR}+1}' creation, already exists."
fi
}

# /////////////////////////////////////////////////////////////////////
# wovtool/myconfig.json
# /////////////////////////////////////////////////////////////////////


# =====================================================================
# =====================================================================
# Init Project Directory
# =====================================================================
# =====================================================================

function iProjDir_Init()
{
  local retval=0
  local bd=$1    # WOV_BASEDIR

  l_ "... create WovTools Project directory structure"

  if [ "${bd}" == "" ]; then
    retval=1
  fi

  l_verbose "Create conf, k8s and containers directories"
  if [ ${retval} -eq 0 ]; then
    mkdir -p ${WOV_BASEDIR}/wovtools/cache
    mkdir -p ${WOV_BASEDIR}/wovtools/ds
    mkdir -p ${WOV_BASEDIR}/wovtools/msrecipes
    mkdir -p ${WOV_BASEDIR}/wovtools/cmds
    mkdir -p ${WOV_BASEDIR}/wovtools/services
  fi

  return $retval
}

# /////////////////////////////////////////////////////////////////////
# Init Project Directory
# /////////////////////////////////////////////////////////////////////


# =====================================================================
# =====================================================================
# Utility
# =====================================================================
# =====================================================================


# --------------------------------------------------------------------- 
# Useful timeout script : https://stackoverflow.com/questions/28927783/is-it-possible-to-set-time-out-from-bash-script
# --------------------------------------------------------------------- 
function timeout_monitor() {
  sleep "$1"
  shift
  kill "$1"
  shift
  echo "$*"
}


# /////////////////////////////////////////////////////////////////////
# Utility
# /////////////////////////////////////////////////////////////////////
