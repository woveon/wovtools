#!/usr/bin/env bash

# ///////////////////////////////////////////////////////////////////// 
#  HELM - POSTGRES
# ///////////////////////////////////////////////////////////////////// 


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Start()
{
  local retval=2
  local Re=
  local R=
  local runningstatus=
  l_debug 'wovdb_Helm_Postgres_Start'


  if [ "${WOV_ORIGIN}" == "external" ]; then

    wovdb_Helm_Postgres_Test ; Re=$?
    if [ $Re -eq 0 ]; then l_ "  ...currently running"; retval=0; fi

    if [ $retval -eq 2 ]; then
      l_ "  ... searching for stable/postgresql chart : ${DB_version}"
      helm search -v ${DB_version} stable/postgresql ; Re=$?
      if [ $Re -ne 0 ]; then
        l_error "Failed to find helm chart for stable/postgresql, version ${DB_version}."
        retval=1
      fi
    fi

    if [ $retval -eq 2 ]; then
      l_verbose "  ...check if helm chart already running"
      helm list | grep  "${DB_name,,}-${WOV_STAGE}"  > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        l_ "  ...helm chart currently running"
      else
        l_ "  ...helm chart install"
        helm install --name ${DB_name,,}-${WOV_STAGE} \
          --namespace=${WOV_NS} \
          --set postgresqlPassword="${DB_password}",postgresqlDatabase="${DB_database}" \
          --set postgresqlUsername="${DB_username}" \
          --set persistence.enabled=true \
          --set nodeselector="{\"failure-domain.beta.kubernetes.io/zone\": \"${WOV_cluster_master_zones}\"}" \
          --set image.tag="${DB_version}" \
          --set persistence.size="${DB_instance_storage}Gi" \
          stable/postgresql ; Re=$?
        #  --set persistence.existingClaim=${DB_kvolname} 
          # --set persistence.storageClass="pvc-${DB_name,,}" \
        if [ $Re -ne 0 ]; then l_error "Failed creating chart"; retval=1; fi
      fi
    fi

    if [ $retval -eq 2 ]; then
      wovdb_Helm_Postgres_Wait ; Re=$?
      if [ $Re -ne 0 ]; then retval=1; fi
    fi

    if [ $retval -eq 2 ]; then
      wovdb_Helm_Postgres_Create ; Re=$?
      if [ $Re -ne 0 ]; then retval=1; fi
    fi

    if [ $retval -eq 2 ]; then
      wovdb_Helm_Postgres_Init ; Re=$?
      if [ $Re -ne 0 ]; then retval=1; fi
    fi

    if [ $retval -eq 2 ]; then
      l_ "...success. WovDB '${DB_name}' created as '${DB_generator}', type '${DB_type}' and database '${DB_database}'."
      retval=0
    fi

  else
    l_error "WovDB for Helm Postgres can only be at ORIGIN 'external'."
    retval=1
  fi

  if [ $retval -eq 0 ]; then l_ "  ...success"; fi

  return $retval
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Stop()
{
  local retval=2
  local Re=

  helm delete --purge "${DB_name,,}-${WOV_STAGE}" ; Re=$?
  if [ $Re -eq 0 ]; then l_ "  ...stopped database server"; retval=0; else l_warn "  ...nothing to stop."; retval=1; fi

  return $retval
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Stopandpurgedata()
{
  local retval=2
  local Re=

  wovdb_Helm_Postgres_Stop

  if [ $retval -eq 2 ]; then
    l_debug "  ...purging persistent data."
    set -x
    kubectl delete pvc --selector=release=${DB_name,,}-${WOV_STAGE} ; Re=$?
    if [ $Re -ne 0 ]; then l_warn "No PVC to delete? Ok. Continuing."; fi
    set +x
    while [ true ]; do
      # l_ "  ...looking for pvc adb-${TESTME}"
      kubectl get pvc --selector=release=${DB_name,,}-${WOV_STAGE} 2>&1 | grep "^No resources found in" > /dev/null ; Re=$?
      if [ $Re -eq 0 ]; then echo "...no more resources"; break; else l_ "  ...waiting for pvc to delete"; sleep 1; fi
    done
  fi

  if [ $retval -eq 2 ]; then retval=0; fi

  return $retval
}


# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Wait()
{
  local retval=2

  while [ true ]; do
    l_verbose "  ...waiting"
    if [ $retval -ne 2 ]; then sleep 3; fi # skip 1st sleep
    wovdb_Helm_Postgres_Test ; retval=$?
    if [ ${retval} -eq 0 ]; then
      retval=0
      l_ "...success"
      break;
    elif [ ${retval} -eq 100 ]; then
      retval=1
      l_ "...bad password"
      break;
    fi
  done

  ## wait a little more for postres to be running (i.e. not just container)
  #sleep 5

  return $retval
}


# --------------------------------------------------------------------- 
# Return: 0 on success/found, 1 on not running, 100 bad password
# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Test()
{
  local retval=2
  local Re=
  local cmd="SELECT 1"

  l_verbose "  ... checking for existing helm postgres deployment"
  helm list | grep  "${DB_name,,}-${WOV_STAGE}"  > /dev/null 2>&1
  if [ $? -ne 0 ]; then l_ "Not running"; retval=1; fi

  if [ $retval -eq 2 ];then
    l_verbose "  ...test docker container ready"
    R="$(kubectl -o json get pod "${DB_name,,}-${WOV_STAGE}-postgresql-0" | jq .status.containerStatuses[0].ready)"
    l_verbose "container ready is '${R}'."
    if [ "${R}" != "true" ]; then retval=1; fi
  fi

  if [ $retval -eq 2 ]; then
    l_verbose "  ...testing db connection"
    kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "PGPASSWORD=${DB_password} psql -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,} -c \"${cmd}\"" > /dev/null ; Re=$?
    if [ $Re -eq 2 ]; then l_error "Bad password."; retval=100;
    elif [ $Re -ne 0 ]; then retval=1; fi
  fi

  if [ $retval -eq 2 ]; then retval=0; fi

  return $retval
}


# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Create()
{
  local R=
  local Re=
  local retval=2
  local psqlcmd1="-c \"SELECT * FROM pg_database WHERE datname='${DB_database}'\""
  local psqlcmd2="-c \"CREATE DATABASE ${DB_database}\""

  # test for exists
  R=$(kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "PGPASSWORD=${DB_password} psql -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,} ${psqlcmd1}") ; Re=$?
  if [ $Re -eq 0 ]; then
    # echo "Re ${Re}"
    echo "${R}" | grep '(1 row)'  ; Re=$?
    if [ $Re -eq 0 ]; then l_ "  ...database instance exists"; retval=0; fi
  fi

  # if not exists
  if [ $retval -eq 2 ]; then
    # create
    set -x
    kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "PGPASSWORD=${DB_password} psql -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,} ${psqlcmd2}" ; Re=$?
    set +x
    if [ $Re -eq 0 ]; then l_ "  ...database instance created"; retval=0; else l_error "Failed to start"; retval=1; fi
  fi

  return $retval
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function wovdb_Helm_Postgres_Init()
{
  wovdb_COMMON_Postgres_Init
  return $?
}


# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Connect()
{
  local Re=
  local retval=2
  local psqlcmd="PGPASSWORD=${DB_password} psql -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,}"

  l_verbose "  ...connect through 'kubectl exec' with '${psqlcmd}'."
  kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "${psqlcmd}" ; Re=$?
  if [ $Re -ne 0 ]; then l_error "Failed to connect"; retval=1; else retval=0; fi

  return $retval
}


# --------------------------------------------------------------------- 
function wovdb_Helm_Postgres_Command()
{
    local R=
  local Re=
  local retval=2
  local db_command="$*"
  if [ "${db_command}" == "" ]; then db_command=${DB_COMMAND}; fi

  l_verbose "run command : ${db_command} : on ${DB_database}" >&2
  kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "PGPASSWORD=${DB_password} psql -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,} -c \"${db_command}\"" ; Re=$?
  if [ $Re -eq 0 ]; then l_ "${R}"; retval=0;
  else l_warn "${R}"; retval=1; fi

  return $retval
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function wovdb_Helm_Postgres_Schema()
{
  local Re=
  local retval=1

  l_debug 'wovdb_Helm_Postgres_Schema'
  kubectl exec -it "${DB_name,,}-${WOV_STAGE}-postgresql-0" -- /bin/bash -c "PGPASSWORD=${DB_password} pg_dump -h ${DB_endpoint} -U ${DB_username} -d ${DB_database,,} -p ${DB_port} -s" ; Re=$?
  if [ $Re -ne 0 ]; then
    l_error "...failed to connect to WovDB"
    wovdb_ConnectionIssue "${DB_extport}" "${DB_port}"
  else
    retval=0
  fi

  return $retval
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function wovdb_Helm_Postgres_Schemahash()
{
  local Re=
  wovdb_COMMON_Postgres_Schemahash Helm ; Re=$?
  return $Re
}

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function wovdb_Helm_Postgres_Version()
{
  TODO
  local R=
  local Re=
  local retval=2
  #local tmpdb="${DB_database}"

  #DB_database="wovtools"
  R=$(DB_database="wovtools" wovdb_Helm_Postgres_Command "SELECT pver, sver from logs order by id DESC limit 1;") ; Re=$?
  #DB_database="${tmpdb}"
  if [ ${Re} -eq 0 ] ; then
    if [ "${R}" == "" ]; then echo "None";
    else
      #echo "R: ${R}"
      # trim header and footer from SQL, cut colum dividers, trim whitespace
      # echo "${R}" | tail -n +3 | head -n +1 | cut -d'|' -f5 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'

      # trim header and footer from SQL
      RR=$(echo "${R}" | tail -n +3 | head -n +1 )
      RR=${RR//|/}
      # echo "RR: ${RR}"
      echo "$RR" | grep "(0 rows)" > /dev/null
      if [ $? -eq 0 ]; then echo "None";
      else l_ "${RR}"; fi
    fi
    retval=0
  else
    l_ "${R}"
    l_error "Failed finding WovDB version."
  fi

  return $retval
}

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function wovdb_Helm_Postgres_Log()
{
  local R=
  local Re=
  local retval=2

  R=$(DB_database="wovtools" wovdb_Helm_Postgres_Command "SELECT * from logs order by id DESC limit 1;") ; Re=$?
  if [ ${Re} -eq 0 ] ; then
    if [ "${R}" == "" ]; then echo "None";
    else
      # trim header and footer from SQL
      RR=$(echo "${R}" | tail -n +3 | head -n +1 )
      RR=${RR//|/}
      # echo "RR: ${RR}"
      echo "$RR" | grep "(0 rows)" > /dev/null
      if [ $? -eq 0 ]; then echo "None";
      else l_ "${RR}"; fi
    fi
    retval=0
  else
    l_ "${R}"
    l_error "Failed finding WovDB version."
  fi

  return $retval
}



# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
#  HELM - POSTGRES
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
