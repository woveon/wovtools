#!/usr/bin/env bash

FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {databases...}

This moves database changes for the current checked in code (pver) into the db archive for versioning.

This does the following:
1. if all main repo git checked in, continue (this ‘seals the database with the code’).
2. move 'wovtools/db/*.deltas' into archive 
3. update archive entry for this pver
4. update database pver number 
5. push the git repo of the database archive

By default, checks all database delta files that exist.

Switches:
  --checksum
  --skip-git-checks  : ignores unchecked git changes of secrets and code (dev and prod stages will override this). Does not skip archive checks.
  --snapshot SNAPSHOT DBNAME : a snapshot to use for this push, for this Wov DB (i.e. a new checkpoint, not a delta)
  --check|-pc|--push-check|--any-push-blockage : checks if the database changes are checked in for pver, and ready to push to archive
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
. wov-env-ops fDisplayOptions "$@"

DOFORCE=0
DOACTION="commit"
SKIPGITCHECKS=0


function fFailedDBConnection()
{
  local RET=$1
  if [ "$2" != "" ]; then
    printf "  > Is db inited?\n"
    printf "    - init>        'wov-db ${2} --init'\n"   
    printf "    - get version> 'wov-db $2 --wdbver'\n"
    printf "\n"
    printf "\n"
  fi
  printf "  > Is it a bastion issue, or a privileges issue.\n"
  printf "  - is 'vh' pod up and running?\n"
  printf "\n"
  printf "\n"

  exit $RET
}

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
#function doGetDBSchema()
#{
#  local SCHEMA=$(wov-db $1 --schema 2> /dev/null)
#  if [ "$?" != "0" ]; then printf "\n\nERROR: failed to connect to database server $i.\n"; exit 1; fi
#  echo ${SCHEMA}
#}
# --------------------------------------------------------------------- 
# NOTE: just hashes return, fail messages included!
# $1 = database name
# --------------------------------------------------------------------- 
#function doHashDBSchema()
#{
#  local HASH=0
#  HASH="$(wov-db $1 --schema 2> /dev/null)"; local A=$?
#  #echo "here1 - $A '$HASH' "
#  if [ $A -ne 0 ]; then 
#    echo $HASH
#    exit 1
#  fi
#  #echo "here 2 $A $SCK"
#  #local CHKSUM=$(wov-db $1 --schema 2> /dev/null | shasum -a 256 | cut -d' ' -f1)
#  local CHKSUM=$(echo "${HASH}" | shasum -a 256 | cut -d' ' -f1)
#  local A=$?
#  #echo "here2 - $A $HASH $CHKSUM"
#  if [ "$A" != "0" ]; then 
#    printf "\n\nERROR: failed to connect to database server '$1'.\n"; 
#    fFailedDBConnection 2 $1
#  fi
#  echo ${CHKSUM}
#}


# --------------------------------------------------------------------- 
# returns 1 on error
#  - This returns the value in the database, which is when this 
#    database was updated. If you want all the entries, see the 
#    archive file.
# --------------------------------------------------------------------- 
function doGetDBPVER()
{
  local retval=1
  R=$(wov-db $1 --wdbver 2>&1) ; Re=$?
  if [ $Re -eq 0 ]; then
    local DB_PVER=`echo ${R} | cut -d'|' -f5`
    retval=0;
  fi

#  DBRAW=$(wov-db $i -d wovtools -c "SELECT * FROM logs WHERE database='$1' ORDER BY id DESC LIMIT 1;" 2>&1) ; DBRAWe=$?
#  if [ "$DBRAWe" != "0" ]; then 
#    printf "${DBRAW}\n"
#    printf "\nERROR: failed to connect to database wovtools, table logs, on database server $1.\n\n"; 
#    fFailedDBConnection 1 $1
#  fi
#  # echo "DBRAW ${DBRAW}" 1>&2
#  local DB_PVER=`echo ${DBRAW} | cut -d'|' -f5`
#  retval=$?

  echo "${DB_PVER}"
  return $retval
}

# --------------------------------------------------------------------- 
# returns 1 on error
# --------------------------------------------------------------------- 
function doGetDBLastLogEntry()
{
  local retval=1
  local Re=
  local DB_PVER=$(wov-db $i -q -d wovtools -c "SELECT * FROM logs WHERE database='$1' ORDER BY id DESC LIMIT 1;" 2> /dev/null) ; Re=$?

  l_verbose "  ...doGetDBLatLogEntry db '${1}' '${i}' DB_PVER=${DB_PVER}"
  if [ $Re -ne 0 ]; then 
    l_error "Failed to find wovtools logs on database server $1." 
    fFailedDBConnection 1 $1
  else
    retval=0
    echo ${DB_PVER}
  fi

  return $retval
}


#  - this checks for wov-push, to see if db ready to push.
#  - put inside this function since all machinery alreayd here
#  - TODO: need to validate by importing schema in and seeing if this all works
#   System States                    Success States
#1. db schema changes                   T F
#2. delta files exist                   F F
#3. git repo changes                    F F
#4. archive delta changes for pver     T F
#5. archive git changes                F F
#
# $1 == db
# return question: ?Any blockage to pushing?? 0=no-blockage, 1=blockage, 2=error
function doPushCheck()
{
  local chk_1=
  local chk_2=
  local chk_3=
  local chk_3a=F
  local chk_4=
  local chk_5=
  local retval=0

#  local DATABASES=( $(doFindDatabases $*) )
#  echo "DATABASES: ${DATABASES[@]}"

  # 1 - compare current to parent checksum (reg value if exists, or then db (i.e. last checkin)
  #   - current comes from the database hash
  #   - parent comes from archive entry if exists,
  #     or if nothing checked in yet, then db's pver is parent pver, so hash that
  if [ "$retval" == "0" ]; then
    if [ $DOECHO -ge 1 ]; then printf "... retrieve db hash.\n"; fi
    #DB_HASH=$(doHashDBSchema $1) ; local A=$?
    local DB_HASH=$(wov-db $1 --schemahash) ; Re=$?
    if [ $Re -ne 0 ]; then
      echo "DB_HASH result ${Re} : '${DB_HASH}'"
      fFailedDBConnection 2 $1
    fi
    l_verbose "    ...db hash: $A '${DB_HASH}'"
    DB_PVER=$(doGetDBPVER $1)
    if [ "$?" != "0" ] || [ "$DB_PVER" == "" ]; then
      l_error "${DB_PVER}\nERROR: could not get database version.\n"
      fFailedDBConnection 2 $1
    elif [ ! -e ${WOV_BASEDIR}/wovtools/db/archive/${1}.json ]; then 
      printf "\nERROR: no archive/${1}.json.\n"; 
      fFailedDBConnection 2 $1
    else
      REG_HASH=$( jq -r " .versions.\"${WOV_PVER}\".checksum" ${WOV_BASEDIR}/wovtools/db/archive/${1}.json )
      if [ "${REG_HASH}" == "null" ]; then
        if [ "$DOECHO" -ge 2 ]; then echo "no archive entry for pver ${WOV_PVER} so looking at DB as parent (pver:${DB_PVER})" 1>&2; fi
        REG_HASH=$( jq -r " .versions.\"${DB_PVER}\".checksum" ${WOV_BASEDIR}/wovtools/db/archive/${1}.json )
      fi 
      if [ "${DB_HASH}" == "${REG_HASH}" ]; then chk_1=F; else chk_1=T; fi
    fi
  fi


  # 2 - see if any files
  if [ "$retval" == "0" ]; then
    local D=( $(cd ${WOV_BASEDIR}/wovtools/db && ls ${1}.deltas 2> /dev/null ) )
    if [ "${#D[@]}" == "0" ]; then chk_2=F; else chk_2=T; fi
  fi

  # 3 - check git of main
  if [ "$retval" == "0" ]; then
    wov-git-check -q ${WOV_BASEDIR}
    if [ $? -ne 0 ]; then
      if [ $SKIPGITCHECKS -eq 1 ]; then 
        if [ $DOECHO -ge 2 ]; then echo "WARNING: ignoring unchecked code in main git repo."; fi
        chk_3=F
        chk_3a=T
      else 
        chk_3=T 
      fi
    else
      chk_3=F
    fi
    # if [ $? -eq 1 ] || [ $SKIPGITCHECKS -eq 1 ]; then chk_3=T; else chk_3=F; fi
    #if [ "$?" == "0" ]; then chk_3=F; else chk_3=T; fi
  fi

  # 4 - are there changes in the archive, for this database and pver
  if [ "$retval" == "0" ]; then
    if [ -e ${WOV_BASEDIR}/wovtools/db/archive/${1}/${WOV_PVER}.deltas ]; then chk_4=T; else chk_4=F; fi
  fi

  # 5 - check git of archive NOTE: SKIPGITCHECKS does not impact archive
  if [ "$retval" == "0" ]; then
    wov-git-check -q ${WOV_BASEDIR}/wovtools/db/archive
    if [ "$?" == "0" ]; then chk_5=F; else chk_5=T; fi
  fi

  # Determine outcome
  if [ "$retval" == "0" ]; then
    retval=1
    if [ $DOECHO -ge 1 ]; then
      printf "  ... checking database '$1' for any blockage\n"
    fi
    if [ $DOECHO -ge 2 ]; then
      printf "     1 : ${chk_1} - db schema changes\n"
      printf "     2 : ${chk_2} - delta files exist\n"
      if [ "$chk_3a" == "T" ]; then
        printf "     3 : T - (ignored) main git repo changes, try: 'git status'\n"
      else
        printf "     3 : ${chk_3} - main git repo changes, try: 'git status'\n"
      fi
      printf "     4 : ${chk_4} - archive delta changes for pver\n"
      printf "     5 : ${chk_5} - archive git changes\n"
    fi


    if [ "${chk_2}" == "F" ] &&  [ "${chk_3}" == "F" ] && [ "${chk_5}" == "F" ]; then
      if [ "${chk_1}" == "T" ] && [ "${chk_4}" == "T" ]; then
        retval=0
      elif [ "${chk_1}" == "F" ] && [ "${chk_4}" == "T" ]; then
        retval=0
      elif [ "${chk_1}" == "F" ] && [ "${chk_4}" == "F" ]; then
        retval=0
      elif [ "${chk_1}" == "T" ]; then # 4 is false then
        printf "FAILED: if you have db schema changes, you need to have deltas in archive to account.\n"
        printf "\n  run: 'wov-push-db -v --any-push-blockage' for more info.\n"
        printf "\nTo get current schema of database X: 'wov-db DBNAME --schema' (ex. apidb)\n"
        printf "To diff schema to old version X : 'wov-db DBNAME --schemadiff X'\n"
  #    elif [ "${chk_4}" == "T" ]; then # 1 is false then
  #      printf "FAILED: if you have deltas in archive, you need to have db schema changes to account.\n"
      fi
    else
      if [ "${chk_2}" == "T" ] ; then printf "BLOCK: you have ${1}.deltas in wovtools/db to commit. Run 'wov-push-db' to push deltas into archive.\n"; fi
      if [ "${chk_3}" == "T" ] ; then printf "BLOCK: project has changes to check into git.\n"; fi
      if [ "${chk_5}" == "T" ] ; then
        l_ "BLOCK: wovtools/db/archive has changes to check into git. Do this manually.\n"
        l_ "  : git status -> "
        git -C ${WOV_BASEDIR}/wovtools/db/archive status | ${SED} 's/^/    : /g'
      fi
    fi

    if [ $DOECHO -ge 1 ]; then
      if [ "${retval}" == "0" ]; then echo "    ... no blockage"; else echo "    ... blockage found."; fi
    fi
  fi

  return $retval
}


# --------------------------------------------------------------------- 
# Commit each database
# --------------------------------------------------------------------- 
function doCommit()
{
  local retval=2

  for i in "${DATABASES[@]}"; do
    if [ -e ${WOV_BASEDIR}/wovtools/db/$i.deltas ]; then
      doCommitDB $i
      if [ $? -ne 0 ]; then l_warn "Failed committing WovDB '${i}'."; retval=1; fi
    else
      l_verbose "  ... no deltas for : ${i} : ok"
    fi
  done

  if [ $retval -eq 2 ]; then retval=0; fi

  return $retval
}


# --------------------------------------------------------------------- 
# Adds an entry to the wovtools database for the database instance
# $1 - dbname
# $2 - PVER
# $3 - SVER
# $4 - DB_snapshot
# --------------------------------------------------------------------- 
function doUpdateDBArchiveLog()
{
  local DB_name=$1

  l_ "  ... update Database Archive logs : ${DB_name} $2 $3 $4"
  if [ "${DB_name}" == "" ]; then l_error "No WovDB name provided."; fi
  R=$(wov-db $DB_name -q -d wovtools -c "INSERT INTO logs (database, wovtoolsver, label, pver, sver, snapshot ) VALUES ( '${DB_name}', '${WOV_VERSION}', '${2}_${3}', ${2}, ${3}, '${4}' );")
  if [ "$?" != "0" ]; then
    l_warn "${R}"
    l_error "Failed updating archive database(${DB_name}) ${2}_${3} snapshot(${4})."
    fFailedDBConnection 3 $1
  fi
}


# - 2-4 --------------------------------------------------------------- 
# TODO: make these transactional, since if these don't complete, system 
#       can be in a bad state
#
# $1 - WovDB name
# $2 - Snapshot
#
# returns: 
#   0 on success
#   1-not inited
#   2-database has no parent
#   3-could not update database with this commit
#   4-git issues in Database Archive

# --------------------------------------------------------------------- 
function doCommitDB()
{
  local retval=2
  local Re=
  local R=
  local DB_name=$1
  local DB_snapshot=$2

  l_ "commit '${DN_name}'  snapshot:'${DB_snapshot}'"

  if [ "$DB_name" == "" ]; then l_error "no WovDB name given"; retval=1; fi

  # - 1 -----------------------------------------------------------------
  l_debug "  ...ensure main git repo checked in"
  # - this ensure that the code checked in (i.e. pver) is matched to this
  #   database using that pver.
  R=$(wov-git-check ${WOV_BASEDIR})
  if [ "$?" != "0" ] && [ $SKIPGITCHECKS -eq 0 ]; then
    printf "\n\nERROR: check in main git repo, then continue with commit.\n"
    fFailedDBConnection 1
    retval=$?
  fi

  # - 2 -----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ...ensure directories exist"
    # Ensure cache dir exists for these
    mkdir -p ${WOV_BASEDIR}/wovtools/cache/db
    # make sure directory exists for database
    mkdir -p "${WOV_BASEDIR}/wovtools/db/archive/${DB_name}"
  fi

  # - 3 -----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ...check deltas exist"
    deltafile="${WOV_BASEDIR}/wovtools/db/${DB_name}.deltas"
    l_verbose "  ...deltafile : ${deltafile}"
    if [ ! -e $deltafile ]; then
      l_error "Can't find deltas file: 'wovtools/db/${DB_name}.deltas'."
      fFailedDBConnection 1 "${DB_name}"
      retval=$?
    fi
  fi

  # - 4 -----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ...get current db wovtools pver"
    DB_ENTRY=$(doGetDBLastLogEntry ${DB_name}) ; Re=$?
    l_verbose "  ...DB_ENTRY ${DB_ENTRY}"
    if [ $Re -ne 0 ]; then
      l_error "Database not inited."
      fFailedDBConnection 1 ${DB_name}
      retval=$?
    else
      l_ "\nDB_ENTRY '${DB_ENTRY}' DB_snapshot '${DB_snapshot}'"

      l_debug "  ...if first entry, should have a snapshot entry"
      if [ "${DB_ENTRY}" == "" ] && [ "${DB_snapshot}" == "" ]; then
        l_error "Need to provide a snapshot for first commit of database. Use wov-db --snapshot X DBNAME. ex. rds:wov-aws-va-ant-db-alywandev-2017-07-17-07-20."
        fFailedDBConnection 3 ${DB_name}
        retval=3
      fi
    fi
  fi

  # - 5 -----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ...validate json file"
    R=$(cat ${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json | jq empty 2>&1) ; Re=$?
    if [ $Re != 0 ]; then
      l_ "${R}"
      l_error "wovtools/db/archive/${DB_name}.json file is not valid JSON. Exiting."
      retval=3
    fi
  fi

  # - 6 -----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ...get current db checksum"
    local CHKSUM=$(wov-db ${DB_name} --schemahash) ; Re=$?
    if [ $Re -ne 0 ]; then l_error "Failed getting database hash."; exit $Re; fi
    DB_PVER=$(doGetDBPVER ${DB_name})
    if [ "$?" != "0" ]; then
      l_error "failed connecting to db."
      fFailedDBConnection 1 ${DB_name}
      retval=$?
    fi
    l_ "Chksum : ${CHKSUM}  DBPVER: ${DB_PVER}  PVER: ${WOV_PVER}"
  fi

  # - 7 ----------------------------------------------------------------- 
  if [ $retval -eq 2 ]; then
    l_ "  ... move deltas into archive"

    # append delta to file
    appendfile=${WOV_BASEDIR}/wovtools/db/archive/${DB_name}/${WOV_PVER}.deltas
    cat <<EOF >> ${appendfile}

# - wov-push-db -------------------------------------------------------
# pver:${WOV_PVER} 
# checksum: ${CHKSUM} 
# date: $(date +%Y-%m-%dT%H:%M:%S%z)
# ---------------------------------------------------------------------
EOF
    cat ${deltafile} >> ${appendfile}

    l_ "  ... cache deltas locally (in case of screw up): wovtools/cache/db/${DB_name}.${WOV_PVER}.$(date +%s).deltas"
    mv ${deltafile} ${WOV_BASEDIR}/wovtools/cache/db/${DB_name}.${WOV_PVER}.$(date +%s).deltas
  fi

  # - 8 - save schema ---------------------------------------------------
  if [ $retval -eq 2 ]; then
    mkdir -p "${WOV_BASEDIR}/wovtools/db/archive/${DB_name}/schemas"
    wov-db ${1} --schema > ${WOV_BASEDIR}/wovtools/db/archive/$1/schemas/${WOV_PVER}.schema
    Re=$?
    if [ ${Re} -ne 0 ]; then
      l_error "Failed to write schemas to regsitry.\n\n"
      fFailedDBConnection 1 $DB_name
      retval=$?
    fi
  fi

  # - 9. update db local archive entry for this pver -------------------------
  if [ $retval -eq 2 ]; then
    l_ "  ...updating db archive entry for this pver"
    if [ ! -e "${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json" ]; then
      l_ "    ... building initial archive for $DB_name."
      cat <<EOF > "${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json"
{
  "wovtoolsversion": "$WOV_VERSION",
  "versions"       : {}
}
EOF
    fi

    l_debug "  ...append this entry"
    jq " .versions.\"${WOV_PVER}\"={ \"checksum\": \"${CHKSUM}\", \"parent\": { \"type\": \"pver\", \"pver\": \"${DB_PVER}\" } }" \
       ${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json > ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$ && cp ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$ ${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json && rm ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$  ; Re=$?
    if [ $Re -ne 0 ]; then l_error "Failed appending this WovDB entry to local archive."; retval=2;
    else
      #echo "DBENTRY snapshot : ${DB_snapshot}" 1>&2
      if [ "$DB_snapshot" != "" ]; then
        echo "    ... append snapshot : ${DB_snapshot}" 1>&2
        jq " .versions.\"${WOV_PVER}\".parent.snapshot=\"${DB_snapshot}\"" \
          ${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json > ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$ && cp ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$ ${WOV_BASEDIR}/wovtools/db/archive/${DB_name}.json && rm ${WOV_BASEDIR}/wovtools/db/archive/.${DB_name}.json.$$ ; Re=$?
        if [ $Re -ne 0 ]; then l_error "Failed appending snapshot to this WovDB entry in local archive."; retval=2; fi
      fi
    fi
  fi


  # - 10 ----------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_ "update DB Local Archive entry for ${DB_name} as: ${WOV_PVER}_${WOV_SVER} ${DB_snapshot} "
    doUpdateDBArchiveLog "${DB_name}" ${WOV_PVER} ${WOV_SVER} "${DB_snapshot}"
  fi


  # - 11 - Git ----------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_debug "  ... push db git repo"
    l_ "  ... commit changes to Database Archive (git repo)"

    l_verbose "    ... git add ${DB_name}/schemas/${WOV_PVER}.schema"
    R=$(cd ${WOV_BASEDIR}/wovtools/db/archive ; git add ${DB_name}/schemas/${WOV_PVER}.schema) ; Re=$?
    if [ $Re -ne 0 ]; then
      l_ "${R}"
      l_error "Failed to add schemas file : wovtools/db/archive/${DB_name}/schemas/${WOV_PVER}.schema"
      fFailedDBConnection 4 $1
      retval=$?
    fi
  fi

  # - 11.1 --------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_verbose "    ... git add ${DB_name}/${WOV_PVER}.deltas"
    R=$(cd ${WOV_BASEDIR}/wovtools/db/archive ; git add ${DB_name}/${WOV_PVER}.deltas) ; Re=$?
    if [ $Re -ne 0 ]; then
      l_ "${R}"
      l_errro "Failed to add deltas file : ${DB_name}/${WOV_PVER}.deltas"
      fFailedDBConnection 4 $1
      retval=$?
    fi
  fi

  # - 11.2 --------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_verbose "    ... git commit Database Archive"
    git -C ${WOV_BASEDIR}/wovtools/db/archive commit -a -m "Version ${WOV_ME}_${WOV_PVER}" ; Re=$?
    if [ $Re -ne 0 ]; then
      echo "ERROR: failed to commit Database Archive git repo in: ${WOV_BASEDIR}/wovtools/db/archive"
      fFailedDBConnection 4 $1
      retval=$?
    fi
  fi

  # - 11.3 --------------------------------------------------------------
  if [ $retval -eq 2 ]; then
    l_verbose "    ... git push Database Local Archive"
    git -C ${WOV_BASEDIR}/wovtools/db/archive push  > /dev/null; Re=$?
    if [ $Re -ne 0 ]; then
      l_error "Failed to push Database Archive git repo in: ${WOV_BASEDIR}/wovtools/db/archive"
      fFailedDBConnection 4 $1
      retval=$?
    fi
  fi

  if [ $retval -eq 2 ]; then retval=0; l_verbose "  ...success"; fi

  return $retval
}




# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "--log" ]; then
    DOACTION="log"
    shift

  elif [ "$1" == "--skip-git-checks" ]; then
    SKIPGITCHECKS=1
    shift

  elif [ "$1" == "--checksum" ]; then
    shift
    DOACTION="checksum"

  elif [ "$1" == "--snapshot" ]; then
    shift
    doCommitDB $2 $1
    # doSetSnapshot $1 $2
    # l_debug "SNAPSHOT $1 WOVDB $2"
    shift
    shift

  elif [ "$1" == "--any-push-blockage" ] || [ "$1" == "-pc" ] || [ "$1" == "--push-check" ] || [ "$1" == "--check" ]; then
    shift
    DOACTION="check"

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


#echo "WOV_DODEFAULTCOMMAND ${WOV_DODEFAULTCOMMAND} ${DOACTION}"
if [ ${WOV_DODEFAULTCOMMAND} != 0 ]; then

#  echo "--- pre  ${WOV_PVER} ${WOV_WORKINGCONTEXT}"
  #wov-env --var PVER
  #wov-env --provider --exports
  #wov-env --var PVER
  # Load in env
  . <(wov-env --provider --exports)
  . wov-env-common
  . wov-push-common
  . wov-db-common
#  echo "--- post ${WOV_PVER} ${WOV_WORKINGCONTEXT}"

  # For dev and prod, check local code and secrets are checked in and pushed.
  doGitChecksOnFormalStages 1
  exitval=$?

  if [ $exitval == 0 ]; then

    #echo "... starting"
    exitval=1
    if [ "$DOACTION" == "check" ]; then

      DATABASES=( $(doFindDatabases $*) )
      # echo "DATABASES: ${DATABASES[@]}"
      if [ "${#DATABASES[@]}" == "0" ]; then
        if [ $DOECHO -ge 1 ]; then printf "... no databases to check.\n"; fi
      fi 

      # check each db
      exitval=0
      for i in "${DATABASES[@]}"; do
        doPushCheck $i
        r=${?}
        if [ "$r" != "0" ]; then exitval=1; fi
      done
      # printf "\nAny blockage to pushing?:$R1\n\n"

    elif [ "$DOACTION" == "log" ]; then
      DATABASES=( $(doFindDatabases $*) )

      # check each db
      exitval=0
      for i in "${DATABASES[@]}"; do
        printf "  ... check db '$i'\n"
        #CHKSUM=$(doHashDBSchema $i)
        local CHKSUM=$(wov-db $i --schemahash) ; Re=$?
        # printf "    ... CHKSUM ${CHKSUM}\n"
        if [ $Re -ne 0 ]; then exitval=1; fi
        LLE=$(doGetDBLastLogEntry $i)
        r=${?}
        # printf "    ... LLE ${LLE}\n"
        if [ "$r" != "0" ]; then exitval=1; fi
        DBVER=$(doGetDBPVER $i)
        r=${?}
        # printf "    ... DBVER ${DBVER}\n"
        if [ "$r" != "0" ]; then exitval=1; fi
        echo "$i> ver:${DBVER}  chksum:${CHKSUM} lle:${LLE}"
      done

    elif [ "$DOACTION" == "checksum" ]; then

      DATABASES=( $(doFindDatabases $*) )
      # echo "DATABASES: ${DATABASES[@]}"

      # check each db
      exitval=0
      for i in "${DATABASES[@]}"; do
        #CHKSUM=$(doHashDBSchema $i)
        local CHKSUM=$(wov-db $i --schemahash) ; Re=$?
        if [ $Re -ne 0 ]; then exitval=1; fi
        echo "${CHKSUM} $i"
      done

    elif [ "$DOACTION" == "commit" ]; then

      DATABASES=( $(doFindDatabases $*) )
      l_verbose "DATABASES: ${DATABASES[@]}"
      #  if [ "${#DATABASES[@]}" == "0" ]; then
      #    echo "no databases found"
      #  fi

      doCommit
      exitval=$?
      # echo $R
    else
      printf "\n\nERROR: unknown action to take!?! '$DOACTION'.\n"
      fDisplayOptions
      exit 1
    fi
  fi



  #echo "exitval $exitval"
  exit $exitval
fi
