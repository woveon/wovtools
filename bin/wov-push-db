#!/usr/bin/env bash


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
wov-env-build -q --local
if [ "$?" != "0" ]; then
  exit 1
fi

pushenvargs=( "$@" )
set ""
. wov-env --provider
. wov-ns-check
set -- "${pushenvargs[@]}"


DOECHO=1
DOFORCE=0
FOLD=$(tput cols)
DOACTION="commit"
SKIPGITCHECKS=0

# For dev and prod, check local code and secrets are checked in and pushed.
doGitChecksOnFormalStages 1


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] {databases...}

This moves database changes for the current checked in code (pver) into the db archive for versioning.

This does the following:
1. if all main repo git checked in, continue (this ‘seals the database with the code’).
2. move 'wovtools/db/*.deltas' into archive 
3. update archive entry for this pver
4. update database pver number 

By default, checks all database delta files that exist.

Switches:
  --checksum
  --skip-git-checks  : ignores unchecked git changes of secrets and code (dev and prod stages will override this). Does not skip archive checks.
  -pc|--push-check|--any-push-blockage : checks if the database changes are checked in for pver, and ready to push to archive
  -h : this help
  -q/-v : quiet/verbose

EOF
}


function fFailedDBConnection()
{
  local RET=$1
  if [ "$2" != "" ]; then
    printf "  > Is db inited?\n"
    printf "    - init>        'wov-db-cloud -D ${2} -I'\n"   
    printf "    - get version> 'wov-db-cloud -D $2 --ver'\n"
    printf "\n"
    printf "\n"
  fi
  printf "  > Is it a bastion issue, or a privileges issue.\n"
  printf "  - is 'vh' pod up and running?\n"
  printf "\n"
  printf "\n"

  exit $RET
}

# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
#function doGetDBSchema()
#{
#  local SCHEMA=$(wov-db-connect $1 --schema 2> /dev/null)
#  if [ "$?" != "0" ]; then printf "\n\nERROR: failed to connect to database server $i.\n"; exit 1; fi
#  echo ${SCHEMA}
#}
# --------------------------------------------------------------------- 
# NOTE: just hashes return, fail messages included!
# $1 = database name
# --------------------------------------------------------------------- 
function doHashDBSchema()
{
  local HASH=0
  HASH="$(wov-db-connect $1 --schema 2> /dev/null)"; local A=$?
  #echo "here1 - $A '$HASH' "
  if [ $A -ne 0 ]; then 
    echo $HASH
    exit 1
  fi
  #echo "here 2 $A $SCK"
  #local CHKSUM=$(wov-db-connect $1 --schema 2> /dev/null | shasum -a 256 | cut -d' ' -f1)
  local CHKSUM=$(echo "${HASH}" | shasum -a 256 | cut -d' ' -f1)
  local A=$?
  #echo "here2 - $A $HASH $CHKSUM"
  if [ "$A" != "0" ]; then 
    printf "\n\nERROR: failed to connect to database server '$1'.\n"; 
    fFailedDBConnection 2 $1
  fi
  echo ${CHKSUM}
}


# --------------------------------------------------------------------- 
# returns 1 on error
#  - This returns the value in the database, which is when this 
#    database was updated. If you want all the entries, see the 
#    archive file.
# --------------------------------------------------------------------- 
function doGetDBPVER()
{
  local retval=1
  local DBRAW=$(wov-db-connect $i -q -d wovtools -c "SELECT * FROM logs WHERE database='$1' ORDER BY id DESC LIMIT 1;" 2> /dev/null)
  local r=$?
  if [ "$r" != "0" ]; then 
    printf "\n\nERROR: failed to connect to database wovtools, table logs, on database server $1.\n\n"; 
    fFailedDBConnection 1 $1
  fi
#  echo "DBRAW ${DBRAW}" 1>&2
  local DB_PVER=`echo ${DBRAW} | cut -d'|' -f5`
  retval=$?

  echo "${DB_PVER}"
  return $retval
}

# --------------------------------------------------------------------- 
# returns 1 on error
# --------------------------------------------------------------------- 
function doGetDBLastLogEntry()
{
  local retval=1
  local DB_PVER=$(wov-db-connect $i -q -d wovtools -c "SELECT * FROM logs WHERE database='$1' ORDER BY id DESC LIMIT 1;" 2> /dev/null)
  if [ "$?" != "0" ]; then 
    printf "\n\nERROR: failed to find wovtools logs on database server $1.\n\n"; 
    fFailedDBConnection 1 $1
  else
    retval=0
    echo ${DB_PVER}
  fi

  return $retval
}

# Create a list of databases to look at
# 1. take from command line if they have it
# 2. else, from all deltas files and archive files
function doFindDatabases()
{
  DATABASES=$*
  if [ ! -e ${WOV_BASEDIR}/wovtools/db ]; then
    printf "\n\nERROR: no database directory in wovtools: '${WOV_BASEDIR}/wovtools/db' missing.\n" 1>&2
    fFailedDBConnection 1

  elif [ ! -e ${WOV_BASEDIR}/wovtools/db/archive ]; then
    printf "\n\nERROR: no database archive in wovtools/db: '${WOV_BASEDIR}/wovtools/db/archive' missing.\n" 1>&2
    fFailedDBConnection 1

  elif [ "$DATABASES" == "" ]; then
    DATABASES=()
    D1=()
    D2=()
    DELTAS=( $(cd ${WOV_BASEDIR}/wovtools/db && ls *.deltas 2> /dev/null ) )
    for d in "${DELTAS[@]}"; do
      D1+=("${d%.deltas}")
    done
    REGFILES=( $(cd ${WOV_BASEDIR}/wovtools/db/archive && ls *.json 2> /dev/null ) )
    for f in "${REGFILES[@]}"; do
      D2+=("${f%.json}")
    done

    # Make sure only one entry : so add y, then every z not in y
#    echo "D1: ${D1[@]}" 1>&2
#    echo "D2: ${D2[@]}" 1>&2
    i=0
    for y in ${D2[@]}
    do
      DATABASES[i++]="$y"
    done

    # add in z's if not in y
    for z in ${D1[@]}
    do
#      DATABASES[i++]="$z"
      doskip=0
      for y in ${D2[@]}
      do
        if [ "$z" == "$y" ]; then 
          doskip=1
        fi
      done
      if [ "${doskip}" == "0" ]; then
#        echo "adding $z"
        DATABASES[i++]="$z"
      fi
    done
  fi
#  echo "${DATABASES[@]}" 1>&2
  echo "${DATABASES[@]}"
#  exit 1
}


#  - this checks for wov-push, to see if db ready to push.
#  - put inside this function since all machinery alreayd here
#  - TODO: need to validate by importing schema in and seeing if this all works
#   System States                    Success States
#1. db schema changes                   T F
#2. delta files exist                   F F
#3. git repo changes                    F F
#4. archive delta changes for pver     T F
#5. archive git changes                F F
#
# $1 == db
# return question: ?Any blockage to pushing?? 0=no-blockage, 1=blockage, 2=error
function doPushCheck()
{
  local chk_1=
  local chk_2=
  local chk_3=
  local chk_3a=F
  local chk_4=
  local chk_5=
  local retval=0

#  local DATABASES=( $(doFindDatabases $*) )
#  echo "DATABASES: ${DATABASES[@]}"

  # 1 - compare current to parent checksum (reg value if exists, or then db (i.e. last checkin)
  #   - current comes from the database hash
  #   - parent comes from archive entry if exists,
  #     or if nothing checked in yet, then db's pver is parent pver, so hash that
  if [ "$retval" == "0" ]; then
    if [ $DOECHO -ge 1 ]; then printf "... retrieve db hash.\n"; fi
    DB_HASH=$(doHashDBSchema $1) ; local A=$?
    #echo "db hash: $A '${DB_HASH}'"
    if [ $A -ne 0 ]; then
      echo "${DB_HASH}"
      fFailedDBConnection 2 $1
    fi
    DB_PVER=$(doGetDBPVER $1)
    if [ "$?" != "0" ] || [ "$DB_PVER" == "" ]; then
      printf "\n\nERROR: could not get database version.\n"
      fFailedDBConnection 2 $1
    elif [ ! -e ${WOV_BASEDIR}/wovtools/db/archive/${1}.json ]; then 
      printf "\nERROR: no archive/${1}.json.\n"; 
      fFailedDBConnection 2 $1
    else
      REG_HASH=$( jq -r " .versions.\"${WOV_PVER}\".checksum" ${WOV_BASEDIR}/wovtools/db/archive/${1}.json )
      if [ "${REG_HASH}" == "null" ]; then
        if [ "$DOECHO" -ge 2 ]; then echo "no archive entry for pver ${WOV_PVER} so looking at DB as parent (pver:${DB_PVER})" 1>&2; fi
        REG_HASH=$( jq -r " .versions.\"${DB_PVER}\".checksum" ${WOV_BASEDIR}/wovtools/db/archive/${1}.json )
      fi 
      if [ "${DB_HASH}" == "${REG_HASH}" ]; then chk_1=F; else chk_1=T; fi
    fi
  fi


  # 2 - see if any files
  if [ "$retval" == "0" ]; then
    local D=( $(cd ${WOV_BASEDIR}/wovtools/db && ls ${1}.deltas 2> /dev/null ) )
    if [ "${#D[@]}" == "0" ]; then chk_2=F; else chk_2=T; fi
  fi

  # 3 - check git of main
  if [ "$retval" == "0" ]; then
    wov-git-check -q ${WOV_BASEDIR}
    if [ $? -ne 0 ]; then
      if [ $SKIPGITCHECKS -eq 1 ]; then 
        if [ $DOECHO -ge 2 ]; then echo "WARNING: ignoring unchecked code in main git repo."; fi
        chk_3=F
        chk_3a=T
      else 
        chk_3=T 
      fi
    else
      chk_3=F
    fi
    # if [ $? -eq 1 ] || [ $SKIPGITCHECKS -eq 1 ]; then chk_3=T; else chk_3=F; fi
    #if [ "$?" == "0" ]; then chk_3=F; else chk_3=T; fi
  fi

  # 4 - are there changes in the archive, for this database and pver
  if [ "$retval" == "0" ]; then
    if [ -e ${WOV_BASEDIR}/wovtools/db/archive/${1}/${WOV_PVER}.deltas ]; then chk_4=T; else chk_4=F; fi
  fi

  # 5 - check git of archive NOTE: SKIPGITCHECKS does not impact archive
  if [ "$retval" == "0" ]; then
    wov-git-check -q ${WOV_BASEDIR}/wovtools/db/archive
    if [ "$?" == "0" ]; then chk_5=F; else chk_5=T; fi
  fi

  # Determine outcome
  if [ "$retval" == "0" ]; then
    retval=1
    if [ $DOECHO -ge 1 ]; then
      printf "  ... checking database '$1' for any blockage\n"
    fi
    if [ $DOECHO -ge 2 ]; then
      printf "     1 : ${chk_1} - db schema changes\n"
      printf "     2 : ${chk_2} - delta files exist\n"
      if [ "$chk_3a" == "T" ]; then
        printf "     3 : T - (ignored) main git repo changes, try: 'git status'\n"
      else
        printf "     3 : ${chk_3} - main git repo changes, try: 'git status'\n"
      fi
      printf "     4 : ${chk_4} - archive delta changes for pver\n"
      printf "     5 : ${chk_5} - archive git changes\n"
    fi


    if [ "${chk_2}" == "F" ] &&  [ "${chk_3}" == "F" ] && [ "${chk_5}" == "F" ]; then
      if [ "${chk_1}" == "T" ] && [ "${chk_4}" == "T" ]; then
        retval=0
      elif [ "${chk_1}" == "F" ] && [ "${chk_4}" == "T" ]; then
        retval=0
      elif [ "${chk_1}" == "F" ] && [ "${chk_4}" == "F" ]; then
        retval=0
      elif [ "${chk_1}" == "T" ]; then # 4 is false then
        printf "FAILED: if you have db schema changes, you need to have deltas in archive to account.\n"
        printf "\n  run: 'wov-push-db -v --any-push-blockage' for more info.\n"
        printf "\nTo get current schema of database X: 'wov-db-connect DBNAME --schema' (ex. apidb)\n"
  #    elif [ "${chk_4}" == "T" ]; then # 1 is false then
  #      printf "FAILED: if you have deltas in archive, you need to have db schema changes to account.\n"
      fi
    else
      if [ "${chk_2}" == "T" ] ; then printf "BLOCK: you have ${1}.deltas in wovtools/db to commit. Run 'wov-push-db' to push deltas into archive.\n"; fi
      if [ "${chk_3}" == "T" ] ; then printf "BLOCK: project has changes to check into git.\n"; fi
      if [ "${chk_5}" == "T" ] ; then printf "BLOCK: wovtools/db/archive has changes to check into git.\n"; fi
    fi

    if [ $DOECHO -ge 1 ]; then
      if [ "${retval}" == "0" ]; then echo "    ... no blockage"; else echo "    ... blockage found."; fi
    fi
  fi

  return $retval
}

function doCommit()
{
  # - 1 ----------------------------------------------------------------- 
  # ensure main git repo checked in
  # - this ensure that the code checked in (i.e. pver) is matched to this 
  #   database using that pver.
  R=$(wov-git-check ${WOV_BASEDIR})
  if [ "$?" != "0" ] && [ $SKIPGITCHECKS -eq 0 ]; then
    printf "\n\nERROR: check in main git repo, then continue with $1.\n"
    fFailedDBConnection 1
    exit 1
  fi

  # Ensure cache dir exists for these
  mkdir -p ${WOV_BASEDIR}/wovtools/cache/db

  # --------------------------------------------------------------------- 
  # Commit each database
  # --------------------------------------------------------------------- 
  for i in "${DATABASES[@]}"; do
    if [ -e ${WOV_BASEDIR}/wovtools/db/$i.deltas ]; then
      doCommitDB $i
    else
      if [ "${DOECHO}" -ge 2 ]; then
        echo "  ... no deltas for : ${i} : ok"
      fi
    fi
  done
}

# - 2-4 --------------------------------------------------------------- 
# TODO: make these transactional, since if these don't complete, system 
#       can be in a bad state
# returns: 0 on success, 1-not inited, 2-database has no parent, 3-could not update database with this commit
# --------------------------------------------------------------------- 
function doCommitDB()
{
  local retval=0

  # check deltas exist
  deltafile=${WOV_BASEDIR}/wovtools/db/$1.deltas
  if [ ! -e $deltafile ]; then
    printf "\n\nERROR: can't find deltas file: 'wovtools/db/$1.deltas'.\n\n"
    fFailedDBConnection 1 $1
  fi

  # make sure directory exists for database
  mkdir -p ${WOV_BASEDIR}/wovtools/db/archive/$1


  # get current db wovtools pver
  DB_ENTRY=$(doGetDBLastLogEntry $1)
#  DB_PVER=$(doGetDBPVER $1)
  if [ "$?" != "0" ]; then
    printf "\n\n***ERROR: database not inited.\n"
    fFailedDBConnection 1 $1
  elif [ "${DB_ENTRY}" == "" ]; then
    printf "\n\n***ERROR: database has no parent.\n"
    fFailedDBConnection 2 $1
  fi
#  printf "\nDB_ENTRY '${DB_ENTRY}'\n"
  OLDIFS=$IFS
  IFS='|'
  # CAW - just commented out dbverarray=( $(wov-db-cloud -D ${WOVDB_DBNAME} --ver)  )
  DB_ENTRY=( $(echo "${DB_ENTRY[@]}") )
  IFS=$OLDIFS
#  printf "\nDB_ENTRY '${DB_ENTRY[*]}'\n"
  DB_PVER="$( echo -e "${DB_ENTRY[4]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

  if [ "$retval" == "0" ]; then

    # get current db checksum
    CHKSUM=$(doHashDBSchema $1)
    DB_PVER=$(doGetDBPVER $1)
    if [ "$?" != "0" ]; then
      printf "**ERROR: failed connecting to db.\n\n"
      fFailedDBConnection 1 $1
    fi

    echo "Chksum : ${CHKSUM}  DBPVER: ${DB_PVER}  PVER: ${WOV_PVER}"

    # - 2 ----------------------------------------------------------------- 
    # --------------------------------------------------------------------- 
    echo "  ... move deltas into archive"

    # append delta to file
    appendfile=${WOV_BASEDIR}/wovtools/db/archive/$1/${WOV_PVER}.deltas
    cat <<EOF >> ${appendfile}

# - wov-push-db -------------------------------------------------------
# pver:${WOV_PVER} 
# checksum: ${CHKSUM} 
# date: $(date +%Y-%m-%dT%H:%M:%S%z)
# ---------------------------------------------------------------------
EOF
    cat ${deltafile} >> ${appendfile}

    echo "  ... cache deltas locally (in case of screw up)"
    mv ${deltafile} ${WOV_BASEDIR}/wovtools/cache/db/$1.${WOV_PVER}.$(date +%s).deltas


    # - 2.1 save schema ---------------------------------------------------
    # --------------------------------------------------------------------- 
    mkdir -p ${WOV_BASEDIR}/wovtools/db/archive/$1/schemas
    wov-db-connect ${1} --schema > ${WOV_BASEDIR}/wovtools/db/archive/$1/schemas/${WOV_PVER}.schema
    r=$?
    if [ "$r" != "0" ]; then
      printf "\n\nERROR: failed to write schemas to regsitry.\n\n"
      fFailedDBConnection 1 $1
    fi


    # - 3. update db archive entry for this pver -------------------------
    # --------------------------------------------------------------------- 
    echo "  ... updating db archive entry for this pver"
    if [ ! -e ${WOV_BASEDIR}/wovtools/db/archive/$1.json ]; then
      echo "    ... building archive for $1."
      cat <<EOF > ${WOV_BASEDIR}/wovtools/db/archive/$1.json
{
  "wovtoolsversion": "$WOV_VERSION",
  "versions"       : {}
}
EOF
    fi
    # append this entry
    jq " .versions.\"${WOV_PVER}\"={ \"checksum\": \"${CHKSUM}\", \"parent\": { \"type\": \"pver\", \"pver\": \"${DB_PVER}\" } }" \
       ${WOV_BASEDIR}/wovtools/db/archive/$1.json > ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$ && cp ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$ ${WOV_BASEDIR}/wovtools/db/archive/$1.json && rm ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$
    DB_snapshot="$( echo -e "${DB_ENTRY[6]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    #echo "DBENTRY snapshot : ${DB_snapshot}" 1>&2
    if [ "$DB_snapshot" != "" ]; then
      echo "DBENTRY append snapshot : ${DB_snapshot}" 1>&2
      jq " .versions.\"${WOV_PVER}\".parent.snapshot=\"${DB_snapshot}\"" \
       ${WOV_BASEDIR}/wovtools/db/archive/$1.json > ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$ && cp ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$ ${WOV_BASEDIR}/wovtools/db/archive/$1.json && rm ${WOV_BASEDIR}/wovtools/db/archive/.$1.json.$$
    fi


    # - 4. update archive database pver number, with checksum ------------
    # --------------------------------------------------------------------- 
    echo "  ... update archive database pver number, with checksum"
    R=$(wov-db-connect $1 -q -d wovtools -c "INSERT INTO logs (database, wovtoolsver, label, pver, sver ) VALUES ( '$1', '${WOV_VERSION}', '${WOV_PVER}_${WOV_SVER}', ${WOV_PVER}, ${WOV_SVER} );")
    if [ "$?" != "0" ]; then
      printf "\n\nERROR: failed updating archive database pver number with checksum.\n"
      fFailedDBConnection 3 $1
    fi
  fi

  return $retval
}




# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "--log" ]; then
    DOACTION="log"
    shift

  elif [ "$1" == "--skip-git-checks" ]; then
    SKIPGITCHECKS=1
    shift

  elif [ "$1" == "--checksum" ]; then
    shift
    DOACTION="checksum"

  elif [ "$1" == "--any-push-blockage" ] || [ "$1" == "-pc" ] || [ "$1" == "--push-check" ]; then
    shift
    DOACTION="check"

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done



#echo "... starting"
retval=1
if [ "$DOACTION" == "check" ]; then

  DATABASES=( $(doFindDatabases $*) )
  # echo "DATABASES: ${DATABASES[@]}"
  if [ "${#DATABASES[@]}" == "0" ]; then
    if [ $DOECHO -ge 1 ]; then printf "... no databases to check.\n"; fi
  fi 

  # check each db
  retval=0
  for i in "${DATABASES[@]}"; do
    doPushCheck $i
    r=${?}
    if [ "$r" != "0" ]; then retval=1; fi
  done
  # printf "\nAny blockage to pushing?:$R1\n\n"

elif [ "$DOACTION" == "log" ]; then
  DATABASES=( $(doFindDatabases $*) )

  # check each db
  retval=0
  for i in "${DATABASES[@]}"; do
    printf "  ... check db '$i'\n"
    CHKSUM=$(doHashDBSchema $i)
    r=${?}
    # printf "    ... CHKSUM ${CHKSUM}\n"
    if [ "$r" != "0" ]; then retval=1; fi
    LLE=$(doGetDBLastLogEntry $i)
    r=${?}
    # printf "    ... LLE ${LLE}\n"
    if [ "$r" != "0" ]; then retval=1; fi
    DBVER=$(doGetDBPVER $i)
    r=${?}
    # printf "    ... DBVER ${DBVER}\n"
    if [ "$r" != "0" ]; then retval=1; fi
    echo "$i> ver:${DBVER}  chksum:${CHKSUM} lle:${LLE}"
  done

elif [ "$DOACTION" == "checksum" ]; then

  DATABASES=( $(doFindDatabases $*) )
  # echo "DATABASES: ${DATABASES[@]}"

  # check each db
  retval=0
  for i in "${DATABASES[@]}"; do
    CHKSUM=$(doHashDBSchema $i)
    r=${?}
    if [ "$r" != "0" ]; then retval=1; fi
    echo "${CHKSUM} $i"
  done

elif [ "$DOACTION" == "commit" ]; then

  DATABASES=( $(doFindDatabases $*) )
#  echo "DATABASES: ${DATABASES[@]}"
#  if [ "${#DATABASES[@]}" == "0" ]; then
#    echo "no databases found"
#  fi

  doCommit
  retval=$?
  echo $R
else
  printf "\n\nERROR: unknown action to take!?! '$DOACTION'.\n"
  fDisplayOptions
  exit 1
fi



#echo "retval $retval"
exit $retval
