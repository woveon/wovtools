#!/usr/bin/env node

let fs             = require('fs');
let h              = require('handlebars');
let ArgumentParser = require('argparse').ArgumentParser;
let parser         = new ArgumentParser({
  version     : '0.0.1',
  addHelp     : true,
  // epilog      : 'epilog\nepilog2\n',
  description : `
Uses Handlebars to parse the .wov files (.ck8s.wov and .sk8s.wov). This does two passes so {{STAGE}} can be interpreted as a parameter to inputs.\n`+`
 \n 
  ex. with JSON { "myplugin": { "dev" : { "value" : 1 }, "prod" : { "value" : 2 } } }. \n
      with file text : A=\{{myplugin.{{STAGE}}.value}} \n
      results in "A=1" if WOV_STAGE is 'dev', "A=2" if WOV_STAGE is 'prod' and "A=" otherwise.\n
\n
  Data:\n
    The --data-set loads the const file from from wovtools/ds (ex. X_const.js file) and loads it on 'C'. So if you have X_const.js with { id : { A : 1 } }, you can use it via {{C.id.A}}.\n
\n
  Helpers:\n
   - "if_eq"\n
   - "include"\n
   - "math"    : does '+', '-', '*', '/', '%%' operations (ex. {{math 5 %% 2}} or {{math C.id.X + 2}})\n
`,
});
parser.addArgument(['-sf', '--secret-file'], {help : 'secrets file location (JSON format)'});
parser.addArgument(['-ds', '--data-set'], {help : 'loads a data set constants file (wovtools/ds/const/X_const.js)'});
parser.addArgument(['-d', '--data'], {help : 'JSON to add. Overwrites secret file.'});

let progargs = parser.parseArgs();
let dataset_args = {};
let secret_args = {};
let data_args = {};
if ( progargs.secret_file ) { secret_args = JSON.parse(fs.readFileSync(progargs.secret_file).toString()); }

if ( progargs.data_set) {
  let wov_basedir=process.env.WOV_BASEDIR;
  if ( wov_basedir == null ) { throw Error('No WOV_BASEDIR in wov-hbs'); }
  dataset_args = require(`${wov_basedir}/wovtools/ds/const/${progargs.data_set}_const.js`);
  // JSON.parse(fs.readFileSync(`${wov_basedir}/wovtools/data/${progargs.data_set}_const.js`).toString());
}
// console.log('data: ', progargs.data);
if ( progargs.data) { data_args= JSON.parse(progargs.data); }

// combile from secrets file and dataset_args
let args = Object.assign({}, data_args, secret_args, {C : dataset_args});
// console.dir(args);


/**
 */
function readInputStream(s, done) {
    let bufs = [];
    s.on('data', function(d) { bufs.push(d); });
    s.on('end', function() { done(null, Buffer.concat(bufs)); });
    s.resume();
}


readInputStream(process.stdin, function(err, tmpl) {


  // NOTE: place this function in node_modules/handlebars/dist/cjs/handlebars/runtime.js : line 95
  //       until they fix it.
  /*
  function strict(obj, name) {
    if ( obj == null ) { throw new _exception2['default']('"' + name + '" not defined as parent is null'); }
    if ( !(name in obj)) {
      throw new _exception2['default']('"' + name + '" not defined in ' + obj);
    }
    return obj[name];
  }
  */

  /**
   * Runs the templating engine.
   *
   * @param {string} tmpl - template
   * @param {object} args - arguments to it
   * @return {string} -
   */
  function handle(tmpl, args) {

    h.registerHelper('include', function(file, _context, opt) {
      let context = null == _context ? args : _context;
      let f = fs.readFileSync(file); // eslint-disable-line security/detect-non-literal-fs-filename
      return handle(f, context);
    });

    h.registerHelper('toLowerCase', function(_str) { if ( _str == null )  return ''; return _str.toLowerCase(); });
    h.registerHelper('lc', function(_str) { if ( _str == null ) return '';  return _str.toLowerCase(); });

    // https://code-maven.com/handlebars-conditionals
    h.registerHelper('if_eq', function(a, b, opts) {
      if (a == b) { return opts.fn(this); }
      else { return opts.inverse(this); }
    });

    // from https://gist.github.com/FrankFang/6603970
    h.registerHelper('math', function(lvalue, operator, rvalue, options) {
      if (arguments.length < 4) {
        // Operator omitted, assuming "+"
        options = rvalue;
        rvalue = operator;
        operator = '+';
      }
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);
      return {
        '+' : lvalue + rvalue,
        '-' : lvalue - rvalue,
        '*' : lvalue * rvalue,
        '/' : lvalue / rvalue,
        '%' : lvalue % rvalue,
              }[operator];
    });


    // This does 2 passes, so stage can be handled.
    let pass1template= h.compile(tmpl.toString(), {strict : true});
    let pass1result = pass1template(args);
    let pass2template= h.compile(pass1result, {strict : true});
    let pass2result = pass2template(args);
    return pass2result;
  }
  try {
    process.stdout.write(handle(tmpl, args));
  }
  catch (e) {
    console.error('Templating Error: ', e.message);
    process.exit(1);
  }
});
