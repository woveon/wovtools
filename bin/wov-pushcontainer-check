#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80
LASTCHECKFORREMOTEIMAGE=-1

# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
pushargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushargs[@]}"

wov-pushcode-check
if [ "$?" != "0" ]; then exit 1; fi


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] container

Checks if the current container needs to be pushed. This checks, in order:
  * does the container exist
  * is the container pushed to remote?
  * do we have a directory for the contents to build the container
  * does the directory for hte container differ from the last build?

  -h : this help
  -q/-v : quiet/verbose
  -f : force

EOF
}

# These can be used for testing
#  --pver : explicitly set WOV_PVER
#  --stage : explicitly set WOV_STAGE (WOV_KSTAGE actually)

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

# Can be used for testing
#  elif [ "$1" == "--pver" ]; then
#    shift
#    WOV_PVER=$1
#    shift
#
#  elif [ "$1" == "--stage" ]; then
#    shift
#    WOV_KSTAGE=$1
#    shift

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# Echoes 1 if found, 0 not found, -1 unknown, -2 if no repo
function fCheckForRemoteImage() 
{
  local retval=-1
  local RR=""


  if [[ $WOV_ARCHIVEREPOSITORY == *".amazonaws.com" ]]; then

    # do check
    RR=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} 2>&1 )
    if [[ $RR == *"RepositoryNotFoundException"* ]]; then
      printf "\n\nERROR: Repository Not Found. Create '${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}' in AWS CodeCommit, then try again.\n" 1>&2
      retval=-2
    elif [ "$RR" == "" ]; then
      retval=0
    fi


    # if no errors, check
    if [[ $retval -eq -1 ]]; then
      # NOTE: check KSTAGE since GSTAGE is mixed with local
      R=$(echo "${RR}" | awk '{print $2}' | \grep ${WOV_KSTAGE}_${WOV_PVER})
      echo "R $R"
      if [ "${R}" != "" ]; then
        retval=1
      fi
    fi
  else
    printf "\n\nERROR: Unknown provider to check (only AWS known in wov-pushcontainer-check).\n" 1>&2&
    printf "    NOTE: sohuld be an easy fix for regular git!\n\n" 1>&2
    retval=-2
  fi

  # 

#  echo "TAG ${WOV_KSTAGE}_${WOV_PVER}"

  echo $retval
}


if [ "$#" != "1" ]; then
  printf "\nERROR: need to supply the container name.\n"
  fDisplayOptions
  exit 1
fi

CONTAINER=$1

DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${CONTAINER}
ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${CONTAINER}
NEEDSBUILD=1

#echo "CHECK : "
#fCheckForRemoteImage
#exit 1


if [ ${DOFORCE} -eq 1 ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... forcing build."; fi

elif [ "$(docker images -q ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} )" == "" ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no existing container, building"; fi
  docker images -q "${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}"

elif [ ! -e ${ARCHDIR} ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no ${ARCHDIR}, building"; fi

elif [ "$(fCheckForRemoteImage)" != "1" ]; then
  LC=$?
  if [ "${LC}" == "0" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... no remote tagged image found."; fi
  fi
  if [ "${LC}" == "-2" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... no repo found."; fi
  fi

elif [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... diffs when comparing ${DESTDIR} to ${ARCHDIR}, building"; fi

else
  NEEDSBUILD=0
fi

if [ ${DOECHO} -ge 2 ]; then echo "... needs build ${NEEDSBUILD}"; fi
exit ${NEEDSBUILD}
