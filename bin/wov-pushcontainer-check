#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80
LASTCHECKFORREMOTEIMAGE=-1

# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when pushing content.\n\n"
  exit 1
fi
pushargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushargs[@]}"

echo "NOTE[$0]: Skipping git checks.... will do on wov-push."


## Check local code is checked in and pushed
#wov-git-check ${WOV_BASEDIR}
#R1=$?
#wov-git-check ${WOV_BASEDIR}/wovtools/secrets
#R2=$?
#if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then exit 4; fi


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] container

Checks if the current container needs to be built and pushed. 

Note: For build, this compares container code in cache vs. last container build (i.e. NOT actual Docker container content). So, 'wov-build-containers -P' to build container but don't push, if you want to rebuild the cache.

This checks, in order:
  * does the container exist
  * is the container pushed to remote?
  * do we have a directory for the contents to build the container
  * does the directory for hte container differ from the last build?

  -h : this help
  -q/-v : quiet/verbose
  -f : force

exit values:
  0 - no build needed
  1 - needs build
  2 - general error
  3 - no repo errro
  4 - wov-git-check error
  5 - no build, remote repo push needed

EOF
}

# These can be used for testing
#  --pver : explicitly set WOV_PVER
#  --stage : explicitly set WOV_STAGE (WOV_KSTAGE actually)

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

# Can be used for testing
#  elif [ "$1" == "--pver" ]; then
#    shift
#    WOV_PVER=$1
#    shift
#
#  elif [ "$1" == "--stage" ]; then
#    shift
#    WOV_KSTAGE=$1
#    shift

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# Returns:
# NEW  OLD
# 100 - 1 - (success) tagged image found, with match to local sha
# 101 - 2 - unknown error
# 102 - 0 - image not found
# 103 - 3 - repo not found
# 104 - 4 - tagged image found, sha mismatch
# NOTE: echo to stderr since return value is stdout
function fCheckForRemoteImage() 
{
  local retval=101
  local RR=""

  if [[ $WOV_ARCHIVEREPOSITORY == *".amazonaws.com" ]]; then

    # do check
    RR=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} 2>&1 )
    if [[ $RR == *"RepositoryNotFoundException"* ]]; then
      printf "\n\nERROR: Docker Repository Not Found: Create '${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}' in AWS ElasticContainerService, then try again.\n" 1>&2
      printf "   : https://console.aws.amazon.com/ecs\n\n" 1>&2
      printf "   Open repo in browser for you? (no) " 1>&2
      read A
      if [[ $A == [yY][eE][sS] ]] || [[ $A == [yY] ]]; then
        echo "    ... opening repo in browser" 1>&2
        open https://console.aws.amazon.com/ecs &
      else
        echo "    ... skipping" 1>&2
      fi

      retval=103
    elif [ "$RR" == "" ]; then
      retval=102
    fi

#    echo "RR: ${RR} " 1>&2

    # if no errors, check tag, then the image sha
    if [[ $retval -eq 101 ]]; then
      # NOTE: check KSTAGE since GSTAGE is mixed with local
      #R=$(echo "${RR}" | awk '{print $2}' | grep ${WOV_KSTAGE}_${WOV_PVER})
      R=$(echo "${RR}" | grep ${WOV_KSTAGE}_${WOV_PVER})
      # echo "R: ${R} " 1>&2
      R_tag=$(echo "${R}" | awk '{print $2}')
      if [ "${R_tag}" != "" ]; then

        # ex. 686413534598.dkr.ecr.us-east-1.amazonaws.com/api/apidata@sha256:03ed7fb9e67e8ebf2f998a936b7039d8a9d6a931a3af803c0de0bd4f557189bd
        R_sha=$(echo "${R}" | awk '{print $3}')
        R_repoDigest="${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}@${R_sha}"
        #Local_sha=$(docker inspect ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} | jq -r '.[0].Id')
        Local_repoDigest=$(docker inspect ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} | jq -r '.[0].RepoDigests[0]')
          # TODO: what if repo digests has multiple entries? go through each?
        #echo "R ${R_repoDigest}    L ${Local_repoDigest}" 1>&2
        if [ "${R_repoDigest}" == "${Local_repoDigest}" ]; then
          # success
          retval=100
        else
          if [ $DOECHO -ge 1 ]; then echo "  ... remote repo out of date" 1>&2; fi
          retval=104
        fi
      else
        if [ $DOECHO -ge 1 ]; then echo "  ... remote image '${WOV_KSTAGE}_${WOV_PVER}' not found" 1>&2; fi
        retval=102
      fi
    fi
  else
    printf "\n\nERROR: Unknown provider to check (only AWS known in wov-pushcontainer-check).\n" 1>&2&
    printf "    NOTE: sohuld be an easy fix for regular git!\n\n" 1>&2
    retval=101
  fi

#  echo "TAG ${WOV_KSTAGE}_${WOV_PVER}"

  echo $retval
}

function fGetRepoLabel() 
{
  local retval=""
  if [[ $WOV_ARCHIVEREPOSITORY == *".amazonaws.com" ]]; then
    # retval=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} | awk '{print $2}' | sed -n '3p')
    retval=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} | awk '{print $2}' | sort -k '1,1' | tail -1)
#    echo "RETVAL: ${retval}"
  else
    printf "\n\nERROR: Unknown provider to check (only AWS known in wov-pushcontainer-check).\n" 1>&2&
    printf "    NOTE: should be an easy fix for regular git!\n\n" 1>&2
  fi
  echo $retval
}


#function fIsRemoteRepoUpToDate
#{
#  # TODO: this sucks.. it makes this call twice
#  RR=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} 2>&1 )
#  R=$(echo "${RR}" | grep ${WOV_KSTAGE}_${WOV_PVER})
#  R_sha=$(echo "${R}" | awk '{print $3}')
#  Local_sha=$(docker inspect ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} | jq -r '.[0].Id')
#  set -x
#  echo "Rsha ${R_sha}    Lsha ${Local_sha}" 1>&2
#  if [ "${R_sha}" == "${Local_sha}" ]; then
#    retval=1
#  else
#    echo "remote repo out of date" 1>&2
#    retval=0
#  fi
#  set +x
#  echo "$retval"
#}


if [ "$#" != "1" ]; then
  printf "\nERROR: need to supply the container name.\n"
  fDisplayOptions
  exit 1
fi

CONTAINER=$1

DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${CONTAINER}
ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${CONTAINER}
NEEDSBUILD=1

#echo "CHECK : "
#fCheckForRemoteImage
#fGetRepoLabel


if [ ${DOFORCE} -eq 1 ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... forcing build."; fi

elif [ "$(docker images -q ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} )" == "" ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no existing container, building"; fi
  docker images -q "${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}"

elif [ ! -e ${ARCHDIR} ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no ${ARCHDIR}, building"; fi

else 

  CH=$(fCheckForRemoteImage)
  # echo "CheckForRemoteImages: ${CH}"
  # NEW  OLD
  # 100 - 1 - (success) tagged image found, with match to local sha
  # 101 - 2 - unknown error
  # 102 - 0 - image not found
  # 103 - 3 - repo not found
  # 104 - 4 - tagged image found, sha mismatch though

  if [ "${CH}" == "100" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... repo found, tagged image exists, shas match."; fi
    NEEDSBUILD=0

  elif [ "${CH}" == "101" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... some error or other."; fi
    NEEDSBUILD=2

  elif [ "${CH}" == "103" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... can't connect to repo. Repo not found."; fi
    NEEDSBUILD=3

  elif [ "${CH}" == "102" ] || [ "${CH}" == "104" ]; then
    if [ $DOECHO -ge 2 ]; then echo "    ... has to push"; fi
    # 0 - tagged image not found, 4 - tagged image found, but shas do not match

    # ok, so remote repo exists and no error, check for diffs
    # NOTE: excluding node_modules for speed, but hopefully any changes would be 
    #       reflected in the package files
    if [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' --exclude='node_modules' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then
      if [ $DOECHO -ge 1 ]; then echo "    ... code diffs, needs to build and push"; fi
      NEEDSBUILD=1
    else
      if [ $DOECHO -ge 1 ]; then echo "    ... no reason to build, just push"; fi
      NEEDSBUILD=5
    fi
  else
    if [ $DOECHO -ge 1 ]; then echo "    ... unknown error: ${CH}."; fi
    NEEDSBUILD=2
  fi
fi

if [ ${DOECHO} -ge 2 ]; then echo "... needs build ${NEEDSBUILD}"; fi
exit ${NEEDSBUILD}
