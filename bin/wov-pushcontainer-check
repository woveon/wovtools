#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80
LASTCHECKFORREMOTEIMAGE=-1

# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
pushargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushargs[@]}"

# Check local code is checked in and pushed
wov-git-check -v ${WOV_BASEDIR}
R1=$?
wov-git-check -v ${WOV_BASEDIR}/wovtools/secrets
R2=$?
if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then exit 1; fi


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] container

Checks if the current container needs to be pushed. This checks, in order:
  * does the container exist
  * is the container pushed to remote?
  * do we have a directory for the contents to build the container
  * does the directory for hte container differ from the last build?

  -h : this help
  -q/-v : quiet/verbose
  -f : force

EOF
}

# These can be used for testing
#  --pver : explicitly set WOV_PVER
#  --stage : explicitly set WOV_STAGE (WOV_KSTAGE actually)

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

# Can be used for testing
#  elif [ "$1" == "--pver" ]; then
#    shift
#    WOV_PVER=$1
#    shift
#
#  elif [ "$1" == "--stage" ]; then
#    shift
#    WOV_KSTAGE=$1
#    shift

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# Echoes 1 if found, 0 not found, 2 unknown, 3 if no repo
# NOTE: echo to stderr since return value is stdout
function fCheckForRemoteImage() 
{
  local retval=2
  local RR=""


  if [[ $WOV_ARCHIVEREPOSITORY == *".amazonaws.com" ]]; then

    # do check
    RR=$(ecs-cli images ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} 2>&1 )
    if [[ $RR == *"RepositoryNotFoundException"* ]]; then
      printf "\n\nERROR: Docker Repository Not Found: Create '${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}' in AWS ElasticContainerService, then try again.\n" 1>&2
      printf "   : https://console.aws.amazon.com/ecs\n\n" 1>&2
      printf "   Open repo in browser for you? (no) " 1>&2
      read A
      if [[ $A == [yY][eE][sS] ]] || [[ $A == [yY] ]]; then
        echo "    ... opening repo in browser" 1>&2
        open https://console.aws.amazon.com/ecs &
      else
        echo "    ... skipping" 1>&2
      fi

      retval=3
    elif [ "$RR" == "" ]; then
      retval=0
    fi

#    echo "RR: ${RR} " 1>&2

    # if no errors, check
    if [[ $retval -eq 2 ]]; then
      # NOTE: check KSTAGE since GSTAGE is mixed with local
      R=$(echo "${RR}" | awk '{print $2}' | grep ${WOV_KSTAGE}_${WOV_PVER})
#      echo "R: ${R} " 1>&2
      if [ "${R}" != "" ]; then
        retval=1
      else
        retval=0
      fi
    fi
  else
    printf "\n\nERROR: Unknown provider to check (only AWS known in wov-pushcontainer-check).\n" 1>&2&
    printf "    NOTE: sohuld be an easy fix for regular git!\n\n" 1>&2
    retval=2
  fi

  # 

#  echo "TAG ${WOV_KSTAGE}_${WOV_PVER}"

  echo $retval
}

function fGetRepoLabel() 
{
  local retval=""
  if [[ $WOV_ARCHIVEREPOSITORY == *".amazonaws.com" ]]; then
    retval=$(ecs-cli images api/apirest | awk '{print $2}' | sed -n '3p')
#    echo "RETVAL: ${retval}"
  else
    printf "\n\nERROR: Unknown provider to check (only AWS known in wov-pushcontainer-check).\n" 1>&2&
    printf "    NOTE: should be an easy fix for regular git!\n\n" 1>&2
  fi
  echo $retval
}


if [ "$#" != "1" ]; then
  printf "\nERROR: need to supply the container name.\n"
  fDisplayOptions
  exit 1
fi

CONTAINER=$1

DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${CONTAINER}
ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${CONTAINER}
NEEDSBUILD=1

#echo "CHECK : "
#fCheckForRemoteImage
#fGetRepoLabel


if [ ${DOFORCE} -eq 1 ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... forcing build."; fi

elif [ "$(docker images -q ${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER} )" == "" ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no existing container, building"; fi
  docker images -q "${WOV_PROJECT}/${WOV_PROJECT}${CONTAINER}"

elif [ ! -e ${ARCHDIR} ]; then
  if [ $DOECHO -ge 1 ]; then echo "    ... no ${ARCHDIR}, building"; fi

else 

  CH=$(fCheckForRemoteImage)
  #echo "CH: ${CH}"
  if [ "${CH}" != "1" ]; then
    if [ "${CH}" == "0" ]; then
      if [ $DOECHO -ge 1 ]; then echo "    ... no remote tagged image found."; fi
      NEEDSBUILD=1
    fi
    if [ "${CH}" == "3" ]; then
      if [ $DOECHO -ge 1 ]; then echo "    ... no repo found."; fi
      NEEDSBUILD=3
    fi
    if [ "${CH}" == "2" ]; then
      if [ $DOECHO -ge 1 ]; then echo "    ... some error or other."; fi
      NEEDSBUILD=2
    fi

  # check remote repo version... since if the git version is diff from that, then need to build!!!
  elif [ "$(fGetRepoLabel)" != "${WOV_STAGE}_${WOV_PVER}" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... remote repo is behind."; fi
    NEEDSBUILD=1


  # ok, so remote repo exists and no error, check for diffs
  elif [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then
    if [ $DOECHO -ge 1 ]; then echo "    ... diffs when comparing ${DESTDIR} to ${ARCHDIR}, building"; fi
    NEEDSBUILD=1

  else
    NEEDSBUILD=0
  fi
fi

if [ ${DOECHO} -ge 2 ]; then echo "... needs build ${NEEDSBUILD}"; fi
exit ${NEEDSBUILD}
