#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80
BLOCK=0
SSHKEY=

# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
pushcontainersargs=( "$@" )
set ""
. wov-env
. wov-ns-check
. wov-pushcode-check
set -- "${pushcontainersargs[@]}"
#set -x




# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Runs the recipe scripts and if there is a change, build the containers.

  --key X : ssh key to add ex. ${HOME}/.ssh/id_rsa
  -h : this help
  -l : list containers
  -f : force build
  -q/-v : quiet/verbose

EOF
}


function doList()
{
  C=$(ls ${WOV_BASEDIR}/wovtools/containers/*.sh 2> /dev/null )
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then echo $C; else echo "No containers"; fi
}

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "--key" ]; then
    shift
    SSHKEY=$1
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-l" ]; then
    shift
    doList
    BLOCK=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




if [ "${BLOCK}" == "0" ]; then
# Find the recipes
RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers; ls *.sh 2> /dev/null)


# Build containers if needed
for f in ${RECIPES}; do

  if [ $DOECHO -ge 1 ]; then echo "... build container ${f%.sh}."; fi

  SRCDIR=${WOV_BASEDIR}
  DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${f%.sh}
  ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${f%.sh}
  CONTAINER=${WOV_PROJECT}${f%.sh}
#  echo "CONTAINER=${CONTAINER}"
#  echo "SRCDIR=${SRCDIR}"
#  echo "DESTDIR=${DESTDIR} # more like a 'content' dir as this is all copied in here"
#  echo "ARCHDIR=${ARCHDIR} # location of archive of DESTDIR"

  # build the content in wovtools/cache/containers/$f
  mkdir -p ${DESTDIR}
  echo "  ... recipe $f (DESTDIR=${DESTDIR}, CONTAINER=${CONTAINER})"
  if [[ ! -x "${WOV_BASEDIR}/wovtools/containers/$f" ]]; then 
    echo "ERROR: recipe for container ${f%.sh} not executable (${WOV_BASEDIR}/wovtools/containers/$f).";
  else
    cd ${WOV_BASEDIR} && SRCDIR=${SRCDIR} DESTDIR=${DESTDIR} CONTAINER=${CONTAINER} ${WOV_BASEDIR}/wovtools/containers/$f

    # determine if need to build container
    NEEDSBUILD=0

    NEEDSBUILD=$(wov-pushcontainer-check ${f%.sh} > /dev/null ; echo $?)
#    if [ ${NEEDSBUILD} == 1 ] || [ $DOFORCE == 1 ]; then
#      echo "    ... forcing container build."
#
#    elif [ "$(docker images -q ${CONTAINER})" == "" ]; then 
#      docker images -q ${CONTAINER}
#      echo "    ... no existing container, building"
#      NEEDSBUILD=1
#
#    elif [ ! -e ${ARCHDIR} ]; then 
#      echo "    ... no ${ARCHDIR}, building"
#      NEEDSBUILD=1; 
#
#    elif [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then 
#      echo "    ... diffs when comparing ${DESTDIR} to ${ARCHDIR}, building"
#      NEEDSBUILD=1; 
#    fi
#
    # do actions 
    if [ "${NEEDSBUILD}" == "1" ] || [ "${DOFORCE}" == "1" ]; then

      echo "    ... creating container '${CONTAINER}'"
      if [ "${SSHKEY}" != "" ]; then
        echo "      ... adding ssh key to build: '${SSHKEY}'"
        cp ${SSHKEY} ${DESTDIR}/$(basename ${SSHKEY})
        SS="--build-arg SSH_KEY=$(basename ${SSHKEY})"
      fi

      docker build ${SS} -f ${DESTDIR}/Dockerfile -t ${WOV_PROJECT}/${CONTAINER}:latest ${DESTDIR} || exit 1

      if [ "${SSHKEY}" != "" ]; then
        echo "      ... removing key from dest: '${DESTDIR}/$(basename ${SSHKEY})'"
        rm ${DESTDIR}/$(basename ${SSHKEY})
      fi

      echo "    ... archiving build of container '${CONTAINER}'"
      mkdir -p ${ARCHDIR}
      rsync -ai --delete ${DESTDIR}/ ${ARCHDIR} &> /dev/null

      echo "    ... tag and push to repo"
      docker tag ${WOV_PROJECT}/${CONTAINER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}

      echo "    ... push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
      docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 

    else
      echo "    ... skipping build of container '${CONTAINER}'"
    fi
  fi


done
fi


