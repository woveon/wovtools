#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80
BLOCK=0
SSHKEY=
RECIPES=( )


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
pushcontainersargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushcontainersargs[@]}"


# Check local code is checked in and pushed
wov-git-check ${WOV_BASEDIR}
R1=$?
wov-git-check ${WOV_BASEDIR}/wovtools/secrets
R2=$?
if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then 
  printf "\nERROR: wov-push-containers exiting\n" 1>&2
  exit 1;
fi



# --------------------------------------------------------------------- 
# --------------------------------------------------------------------- 
function fDisplayOptions()
{ 
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options] containers ...

Runs the recipe scripts and if there is a change, build the containers.

  --key X : ssh key to add ex. ${HOME}/.ssh/id_rsa
  -h : this help
  -l : list containers
  -f : force build
  -q/-v : quiet/verbose

EOF
}


function doList()
{
  C=$(ls ${WOV_BASEDIR}/wovtools/containers/* 2> /dev/null )
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then echo $C; else echo "No containers"; fi
}

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "--key" ]; then
    shift
    SSHKEY=$1
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-l" ]; then
    shift
    doList
    BLOCK=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done




# Find the recipes
if [ "${BLOCK}" == "0" ]; then
 
  RECIPES=( "$@" )
  if [ "${#RECIPES[@]}" == "0" ]; then
    RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers && ls * 2> /dev/null)
  fi
  #echo "R: ${RECIPES}"

  # Build containers if needed
  for f in ${RECIPES}; do

    if [ $DOECHO -ge 1 ]; then echo "... build container ${f}."; fi

    SRCDIR=${WOV_BASEDIR}
    DESTDIR=${WOV_BASEDIR}/wovtools/cache/containers/${f}
    ARCHDIR=${WOV_BASEDIR}/wovtools/cache/containers/archive/${f}
    CONTAINER=${WOV_PROJECT}${f}
    #  echo "CONTAINER=${CONTAINER}"
    #  echo "SRCDIR=${SRCDIR}"
    #  echo "DESTDIR=${DESTDIR} # more like a 'content' dir as this is all copied in here"
    #  echo "ARCHDIR=${ARCHDIR} # location of archive of DESTDIR"

    # build the content in wovtools/cache/containers/$f
    mkdir -p ${DESTDIR}
    echo "  ... recipe $f"
    echo "    ... DESTDIR=${DESTDIR}"
    echo "    ... CONTAINER=${CONTAINER}"
    if [[ ! -x "${WOV_BASEDIR}/wovtools/containers/$f" ]]; then 
      echo "ERROR: recipe for container ${f} not executable (${WOV_BASEDIR}/wovtools/containers/$f).";
    else
      cd ${WOV_BASEDIR} && SRCDIR=${SRCDIR} DESTDIR=${DESTDIR} CONTAINER=${CONTAINER} ${WOV_BASEDIR}/wovtools/containers/$f
      if [ "$?" != "0" ]; then
        printf "\n\nERROR: failed building container.\n\n"
        exit 1
      fi

      # determine if need to build container
      NEEDSBUILD=0

      wov-pushcontainer-check ${f}
      NEEDSBUILD=$?
      #echo "NEEDSBUILD: ${NEEDSBUILD}"
      # printf "\n\n\n\nNEEDSBUILD: $NEEDSBUILD\n\n\n"
      #    echo "NEEDSBUILDOUT: $NEEDSBUILDOUT"
      #    if [ ${NEEDSBUILD} == 1 ] || [ $DOFORCE == 1 ]; then
      #      echo "    ... forcing container build."
      #
      #    elif [ "$(docker images -q ${CONTAINER})" == "" ]; then 
      #      docker images -q ${CONTAINER}
      #      echo "    ... no existing container, building"
      #      NEEDSBUILD=1
      #
      #    elif [ ! -e ${ARCHDIR} ]; then 
      #      echo "    ... no ${ARCHDIR}, building"
      #      NEEDSBUILD=1; 
      #
      #    elif [ "$(diff -rq --exclude='.dirstamp' --exclude='.DS_Store' ${DESTDIR} ${ARCHDIR} &> /dev/null ; echo $?)" != "0" ]; then 
      #      echo "    ... diffs when comparing ${DESTDIR} to ${ARCHDIR}, building"
      #      NEEDSBUILD=1; 
      #    fi
      #
      # if [ "${NEEDSBUILD}" ==  "4" ]; then exit  ${NEEDSBUILD}; fi
      if [ "${NEEDSBUILD}" ==  "3" ]; then exit  ${NEEDSBUILD}; fi
      if [ "${NEEDSBUILD}" ==  "2" ]; then exit  ${NEEDSBUILD}; fi

      # Build
      JUSTBUILT=0
      if [ "${NEEDSBUILD}" == "1" ] || [ "${DOFORCE}" == "1" ]; then
        JUSTBUILT=1

        echo "    ... creating container '${CONTAINER}'"
        if [ "${SSHKEY}" != "" ]; then
          echo "      ... adding ssh key to build: '${SSHKEY}'"
          cp ${SSHKEY} ${DESTDIR}/$(basename ${SSHKEY})
          SS="--build-arg SSH_KEY=$(basename ${SSHKEY})"
        fi

        docker build ${SS} -f ${DESTDIR}/Dockerfile -t ${WOV_PROJECT}/${CONTAINER}:latest ${DESTDIR} || exit 1

        if [ "${SSHKEY}" != "" ]; then
          echo "      ... removing key from dest: '${DESTDIR}/$(basename ${SSHKEY})'"
          rm ${DESTDIR}/$(basename ${SSHKEY})
        fi

        echo "    ... archiving build of container '${CONTAINER}'"
        mkdir -p ${ARCHDIR}
        rsync -ai --delete ${DESTDIR}/ ${ARCHDIR} &> /dev/null
      else
        echo "    ... skipping container creation"
      fi


      # Tag and Push
      if [ "${NEEDSBUILD}" == "1" ] || [ "${NEEDSBUILD}" == "4" ] || [ "${DOFORCE}" == "1" ]; then
        echo "  ... tag repo"
        docker tag ${WOV_PROJECT}/${CONTAINER} ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}

        echo "  ... push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"

        # If just built, dump log, since it will have to push a lot of data
#        if [ "${JUSTBUILT}" == "1" ]; then
        set -x
          R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1 | tee /dev/tty )
          RR=$?
        set +x
#        else
#          R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1 )
#          RR=$?
#        fi
        # echo "R: ${R} RR=${RR}"
        if [[ $R == 'name unknown'* ]]; then
          printf "\n\n  ...${R}.\n"
          exit 1
        fi
        if [[ $R == *'Your Authorization Token has expired.'* ]]; then
          echo "    ... auto-login to AWS attempt"
          AWSAUTHCMD=$(aws ecr get-login --no-include-email)
          eval ${AWSAUTHCMD}
          if [ "$?" != "0" ]; then
            echo "      ... FAILED auto-login to AWS attempt"
            exit 1
          else
            echo "      ... SUCCESS auto-login to AWS attempt"
            echo "    ... re-push container to: ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER}"
            R=$(docker push ${WOV_ARCHIVEREPOSITORY}/${WOV_PROJECT}/${CONTAINER}:${WOV_STAGE}_${WOV_PVER} 2>&1  | tee /dev/tty)
            if [ "$?" != "0" ]; then
              printf "\n\n  ...still errors: ${R}.\n"
              exit 1
            fi
          fi
        fi

      else
        echo "    ... skipping build and pushing of container '${CONTAINER}'"
      fi
      echo "  ... done '${CONTAINER}'."
    fi


  done
fi


