#!/usr/bin/env node

// debug, set to true
let db=false;

// This file performs stage-select for the wov-env command. jq was unable to do the correct 'walk' function, so I wrote this.

//  data   - JSON read from file
//  chaff  - ex. CLUSTER
//  key    - ex. wov-aws-va-frog
//  clean  - if clean == 'clean' it removes the chaff entries
//  needle - ex. CLUSTERwov-aws-va-frog
let data  = require('fs').readFileSync(process.argv[2]);
let chaff = process.argv[3];
let key   = process.argv[4];
let clean = process.argv[5];
let needle = `${chaff}${key}`;
let depth=0;
let depthstr='';


/**
 * Recursive function to collapse chaff part of needle. (i.e. map CLUSTERx to x in json). It
 * has three passes:
 *   1st pass - collapse chaff
 *   2nd pass - recurse into haystack further
 *   3rd pass - if cleaning, then deletes needle (i.e. CLUSTERx)
 * @param {string} chaff -
 * @param {string} needle -
 * @param {json}   haystack -
 * @param {json}   found - returned bits from recursive descent to place into haystack
 * @return {json} - founds bits, but since placed into haystack anyway, not used
 */
let doStageSelect = (chaff, needle, haystack, found = []) => {
  depth++;


  // first pass, go into objects, including just added (but not matched)
  Object.keys(haystack).forEach((key) => {
    if (typeof haystack[key] === 'object' && (!key.startsWith(needle)) && haystack[key] != null ) {
      // console.error('enter object at key: ', key);
      depthstr += `.${key}`;
      doStageSelect(chaff, needle, haystack[key], found);
    }
  });

  // second pass,
  //  - iterate through property keys in object
  //  - or clean
  if ( clean != 'clean' ) {
    Object.keys(haystack).forEach((key) => {
      if (db) console.error(` check key:  ${depthstr}.${key}`);

      // dump items in child, here (starts with to match CLUSTER/STAGE/etc)
      if (key.startsWith(needle)) {
        if (db) console.error(` match needle:  ${key}`);

        // here, don't asssign, but merge since haystack[key] could have properties that are objects that
        // overwrite things in haystack at this level
        // --old - Object.assign(haystack, haystack[key]);
        for (let k in haystack[key]) {
          if (haystack[key].hasOwnProperty(k)) {
            if (db) console.error(`move haystack[${key}][${k}] to haystack[${k}]`);
            if (db) console.error(`move ${depthstr}.${key}.${k} to ${depthstr}.${k}]`);

            // if deeper level is object, need to merge in from deeper level
            if (db) console.error(`typeof ${typeof haystack[k]}  ${haystack[k]}`  );
            if ( (typeof haystack[k]) === 'object' && haystack[k] != null) {
              if (db) console.error(`  1.1  ${JSON.stringify(haystack, null, '  ')}`);
              if (db) console.error(`  deeper level is object, need to merge`);
              if ( typeof haystack[k] !== 'object' ) {
                throw Error(`haystack k ${k} is not object to merge in from haystack key k ${key} ${k}`);
              }
              Object.assign(haystack[k], haystack[key][k]);
              // if (db) console.error('new haystack\n', JSON.stringify(haystack, null, '  '));
            }

            // else, replace
            else {
              if (db) console.error(`  1.2`);
              haystack[k] = haystack[key][k];
            }
          }

          // here assign (object/var/whatever)
          else {
            if (db) console.error(`  1`);
            haystack[k] = haystack[key][k];
          }
        }
        if (db) console.error('new haystack\n', JSON.stringify(haystack, null, '  '));


        found.push(haystack[key]);
      }
    });
  }


  // second pass, remove key (already recursed into, so can remove)
  else { // if ( clean == 'clean' ) 
    Object.keys(haystack).forEach((key) => {
      if (key.startsWith(needle)) {
        // console.log('delete needle', key);
        delete haystack[key];
      };
      if (key.startsWith(chaff) && key != chaff) {
        // console.log('delete chaff', key);
        delete haystack[key];
      };
    });
  }

  let p = depthstr.split('.');
  p.pop();
  depthstr = p.join('.');
  depth--;
  // return the list of found values to the caller of the function
  return found;
};


let d = JSON.parse(data);
doStageSelect(chaff, needle, d);
console.log(JSON.stringify(d, null, '  '));
