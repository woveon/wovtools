#!/usr/bin/env node

// This file performs stage-select for the wov-env command. jq was unable to do the correct 'walk' function, so I wrote this.

//  data   - JSON read from file
//  chaff  - ex. CLUSTER
//  key    - ex. wov-aws-va-frog
//  clean  - if clean == 'clean' it removes the chaff entries
//  needle - ex. CLUSTERwov-aws-va-frog
let data  = require('fs').readFileSync(process.argv[2]);
let chaff = process.argv[3];
let key   = process.argv[4];
let clean = process.argv[5];
let needle = `${chaff}${key}`;

/**
 * Recursive function to collapse chaff part of needle. (i.e. map CLUSTERx to x in json). It
 * has three passes:
 *   1st pass - collapse chaff
 *   2nd pass - recurse into haystack further
 *   3rd pass - if cleaning, then deletes needle (i.e. CLUSTERx)
 * @param {string} chaff -
 * @param {string} needle -
 * @param {json}   haystack -
 * @param {json}   found - returned bits from recursive descent to place into haystack
 * @return {json} - founds bits, but since placed into haystack anyway, not used
 */
let doStageSelect = (chaff, needle, haystack, found = []) => {

  // iterate through each property key in the object
  if ( clean != 'clean' ) {
    Object.keys(haystack).forEach((key) => {
      // console.error('check key: ', key);

      // ??? Why startsWith???

      // dump items in child, here
      if (key.startsWith(needle)) {
        // console.error('  match key: ', key);
        Object.assign(haystack, haystack[key]);
        found.push(haystack[key]);
      }
    });
  }

  // second pass, go into objects, including just added (but not matched)
  Object.keys(haystack).forEach((key) => {
    if (typeof haystack[key] === 'object' && (!key.startsWith(needle)) && haystack[key] != null ) {
      // console.error('enter object at key: ', key);
      doStageSelect(chaff, needle, haystack[key], found);
    }
  });

  // third pass, remove key (already recursed into, so can remove)
  if ( clean == 'clean' ) {
    Object.keys(haystack).forEach((key) => {
      if (key.startsWith(needle)) {
        // console.log('delete needle', key);
        delete haystack[key];
      };
      if (key.startsWith(chaff) && key != chaff) {
        // console.log('delete chaff', key);
        delete haystack[key];
      };
    });
  }

  // return the list of found values to the caller of the function
  return found;
};


let d = JSON.parse(data);
doStageSelect(chaff, needle, d);
console.log(JSON.stringify(d, null, '  '));
