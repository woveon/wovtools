#!/usr/bin/env bash

DOECHO=1
DOFORCE=0
FOLD=80

DOPUSHTOARCHIVE=1

RECIPES=( )
  # eahc is a container recipe.

CONFEXT=
  # added to conf dir names (ex. "-vh" for vh specific)

ALLOWSTAGEMODS=0
  # Tests that all stagemods are off (i.e. ensure your local development config is not used in cluster)

NOGITCHECK=0
  # By default, checks that all code is checked in. Turns off git checks if ALLOWSTAGEMODS is true, or this is true


# --------------------------------------------------------------------- 
# Import Env 
# --------------------------------------------------------------------- 
if [ ! -z ${WOV_stagemod+x} ]; then
  printf "\nERROR: Can't have WOV_stagemod set when pushing content.\n\n"
  exit 1
fi
pushenvargs=( "$@" )
set ""
. wov-env
. wov-ns-check
set -- "${pushenvargs[@]}"




# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [options]

Generates all the conf files for the project (ConfigMap and Secrets). Then, pushes the conf and k8s to the Archive, from which we can deploy. This works with pushing secrets and containers into the Archive (which is actually several storage mediums).

  --skip-push : generate ConfigMap and Secrets, but do not push to Archive
  --conf-ext    : extension to the default conf file (ex. foo/conf/cm/apisocket -> foo/conf/cm/apisocket-vh with --conf-ext '-vh')

  --nogitchecks : turns off the checks for changes to local code

  -f : force push
  -h : this help
  -q/-v : quiet/verbose

EOF
}


# ---------------------------------------------------------------------
# build all .wov files
#   from ${WOV_BASEDIR}/wovtools/$1
#     to ${WOV_BASEDIR}/wovtools/cache/$2
# ---------------------------------------------------------------------
fBuildEnvDir()
{

  mkdir -p ${WOV_BASEDIR}/wovtools/cache/$2
  DEST=${WOV_BASEDIR}/wovtools/cache/$2/${f%.wov}

  # Find src files to compile
  WOVFILES=$(cd ${WOV_BASEDIR}/wovtools/$1; ls *.wov 2> /dev/null)
  if [ "${WOVFILES}" == "" ]; then echo "  ... no files found in wovtools/$1/*.wov."; fi

  # Compile them
  for f in ${WOVFILES}; do

    SRC=${WOV_BASEDIR}/wovtools/$1/${f}
    DEST=${WOV_BASEDIR}/wovtools/cache/$2/${f%.wov}
    USESECRET=$3

    # check if need to compile
    if [ "${SRC}" -nt "${DEST}" ] || [ "$SECRETDIFF" == "1" ]; then
      if [ "$DOECHO" == "2" ] || [ "$DOECHO" == "2" ]; then echo "  ... build ${SRC}"; fi
      #echo " --- `basename ${DEST}` needs to be built"
#      echo "SHOULD CALL: wov-compile ${SECRETFILE} ${SRC} > ${DEST}"
      wov-compile ${USESECRET} ${SRC} > ${DEST}
    else
      if [ "$DOECHO" == "2" ]; then echo "  ... skipping ${SRC}"; fi
    fi
  done
}

fBuildEnvDir k8s k8s SECRETFILE

# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "--nogitchecks" ]; then
    shift
    NOGITCHECK=1

  elif [ "$1" == "--allow-stagemods" ]; then
    shift
    ALLOWSTAGEMODS=1

  elif [ "$1" == "--skip-push" ]; then
    shift
    DOPUSHTOARCHIVE=0

  elif [ "$1" == "--conf-ext" ]; then
    shift
    CONFEXT=$1
    shift

  elif [ "$1" == "-f" ]; then
    shift
    DOFORCE=1

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# Check all stagemods are off
if [ "${ALLOWSTAGEMODS}" != "1" ]; then
  ONSTAGEMODS=( $(jq -r '.stagemods[] | select(.status == "on") | .["name"]' ${WOV_BASEDIR}/wovtools/config.json ) )
  if [[ "$ONSTAGEMODS" != "" ]]; then
    printf "\nERROR: turn off stagemods when pushing content.\n"
    printf "  active stagemods: ${ONSTAGEMODS[*]}\n\n"
    for sm in ${ONSTAGEMODS[@]}; do
      printf "  ex. wov-mod --off ${sm}\n"
    done
    printf "\n"
    exit 1
  fi
fi


# Check local code is checked in and pushed. if Allowing stagemods, don't check
R1=0
if [ "${ALLOWSTAGEMODS}" == "0" ] && [ "${NOGITCHECK}" == "0" ] ; then
wov-git-check ${WOV_BASEDIR}
R1=$?
fi
wov-git-check ${WOV_BASEDIR}/wovtools/secrets
R2=$?
if [ "$R1" != "0" ] || [ "$R2" != "0" ]; then exit 1; fi


# Make sure directories exist
mkdir -p ${WOV_BASEDIR}/wovtools/cache/conf/cm
mkdir -p ${WOV_BASEDIR}/wovtools/cache/conf/se
chmod 700 ${WOV_BASEDIR}/wovtools/cache/conf/se

# Clear them out
#rm ${WOV_BASEDIR}/wovtools/cache/conf/cm/*
#rm ${WOV_BASEDIR}/wovtools/cache/conf/se/*


# ---------------------------------------------------------------------
# Generate variable files for K8s ConfigMap and Secrets
# ---------------------------------------------------------------------

# Each container recipe is for a microservice
RECIPES=( "$@" )
if [ "${#RECIPES[@]}" == "0" ]; then
  RECIPES=$(cd ${WOV_BASEDIR}/wovtools/containers && find * -maxdepth 0 -type f 2> /dev/null)
fi
#echo "Recipes: ${RECIPES}"

hasbuiltbase=0
  # --- ex. {PROJECT}{CONTAINER} is normal, but base would be {PROJECT} ex. plem vs plemov

# Build ConfigMap and Secrets if needed
for f in ${RECIPES}; do

  CONTAINERNAME=$f
  MICROSERVICE=${WOV_PROJECT}${CONTAINERNAME}

  # if [ $DOECHO -ge 1 ]; then printf "\n%-${FOLD}s\n" "-" | tr ' ' '-' ; echo "... build ConfigMap and Secret for '${f}'."; fi
  if [ $DOECHO -ge 1 ]; then echo "... build ConfigMap and Secret for '${MICROSERVICE}${CONFEXT}'."; fi


  # Create CM file to read in
  CMFILE=${WOV_BASEDIR}/wovtools/cache/conf/cm/${MICROSERVICE}${CONFEXT}
  rm -f ${CMFILE} || true
  touch ${CMFILE}
  chmod 600 ${CMFILE}
  # wov-env --cm ${MICROSERVICE} >> ${CMFILE}
  # R=$((wov-env --cm ${MICROSERVICE} >> ${CMFILE}) 2>&1)
  wov-env --cm ${MICROSERVICE} >> ${CMFILE} 2>&1
  A=$?
  if [ "$A" != "0" ]; then 
    rm ${CMFILE}
    CMFILE=${WOV_BASEDIR}/wovtools/cache/conf/cm/${WOV_PROJECT}${CONFEXT}
    if [ "$hasbuiltbase" == "0" ]; then
      echo "  ... using config for ${WOV_PROJECT}, instead of ${MICROSERVICE}"
      wov-env --cm ${WOV_PROJECT} >> ${CMFILE}
      A=$?
      # echo "A is ${A}"
      # if [ "$?" != "0" ]; then echo $R; exit 1; fi
      if [ "$A" != "0" ]; then exit 1; fi
#    else
      # echo "  ... skipping rebuild of ${WOV_PROJECT}"
    fi
  fi

  # Create SE file to read in
  SEFILE=${WOV_BASEDIR}/wovtools/cache/conf/se/${MICROSERVICE}${CONFEXT}
  rm -f ${SEFILE} || true
  touch ${SEFILE}
  chmod 600 ${SEFILE}
  # wov-env --se ${MICROSERVICE} >> ${SEFILE}
  R=$((wov-env --se ${MICROSERVICE} >> ${SEFILE}) 2>&1)
  if [ "$?" != "0" ]; then 
    rm ${SEFILE}
    SEFILE=${WOV_BASEDIR}/wovtools/cache/conf/se/${WOV_PROJECT}${CONFEXT}
    if [ "$hasbuiltbase" == "0" ]; then
      # echo "  ... using config for ${WOV_PROJECT}, instead of ${MICROSERVICE}"
      wov-env --se ${WOV_PROJECT} >> ${SEFILE}
      A=$?
      # if [ "$?" != "0" ]; then echo $R; exit 1; fi
      if [ "$A" != "0" ]; then exit 1; fi
#    else
      # echo "  ... skipping rebuild of ${WOV_PROJECT}"
    fi
    hasbuiltbase=1
  fi

done







# ---------------------------------------------------------------------
# Push to Archive
# ---------------------------------------------------------------------

if [ "$DOPUSHTOARCHIVE" == "1" ]; then

  ARCHBASE=${WOV_PROJECT}/${WOV_STAGE}/${WOV_PVER}_${WOV_SVER}

  #echo "ECHO: aws s3 sync ${WOV_BASEDIR}/wovtools/cache/k8s  ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s  --delete"
  if [ $DOECHO -ge 1 ]; then echo "... pushing ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s"; fi
  if [ $DOECHO -ge 2 ]; then ls ${WOV_BASEDIR}/wovtools/cache/k8s; fi
  aws s3 sync ${WOV_BASEDIR}/wovtools/cache/k8s  ${WOV_ARCHIVEENV}/${ARCHBASE}/k8s  --delete

  #echo "ECHO: aws s3 sync ${WOV_BASEDIR}/wovtools/cache/conf ${WOV_ARCHIVEENV}/${ARCHBASE}/conf --delete"
  if [ $DOECHO -ge 1 ]; then echo "... pushing ${WOV_ARCHIVEENV}/${ARCHBASE}/conf"; fi
  if [ $DOECHO -ge 2 ]; then ls ${WOV_BASEDIR}/wovtools/cache/conf; fi
  aws s3 sync ${WOV_BASEDIR}/wovtools/cache/conf ${WOV_ARCHIVEENV}/${ARCHBASE}/conf --delete

  if [ $DOECHO -ge 1 ]; then echo "... success"; fi

else

  if [ $DOECHO -ge 1 ]; then echo "... skipping push to archive"; fi

fi
