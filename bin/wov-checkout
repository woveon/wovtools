#!/usr/bin/env bash

# DOECHO=1
# DOFORCE=0
# WOV_DODEFAULTCOMMAND=1
FOLD=$(tput cols)
export PATH=$PATH:/usr/local/bin/wovlib

# ---------------------------------------------------------------------
# Define and init all used variables
VARDEPS=( 'GLOBALDIR'    'WOV_MASTERPROJECT' 'WOV_PROJECT' \
          'MSCODE'       'REPODIR' 'REPOEXT' 'WOV_BASEDIR' \
          'WOV_LOCALARCHIVEBASE' \
          'PROJSHORTCUT' 'WOV_CODEREPOARCHIVE' )
for f in "${VARDEPS[@]}"; do eval "${f}="; done



# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


Usage: `basename $0` (options) [project] (mscode)

  project - the WovTools project name                         ex. alywan
  mscode  - If this is a team project, the microservice code  ex. data

Checks out a WovTools project and connects it to WovTools resources.

Checks out using '${WOVCONFIGF}' settings for Git repository and using either:
  many   microservice project : [REPOSITORY]/[MASTERPROJECT]-[TEAMPROJECT]
  single microservice project : [REPOSITORY]/[MASTERPROJECT]-[TEAMPROJECT]-[TEAMPROJECT][MSCODE]

  -h/--help - help

  --config-only   : generates the configuration entry for insertion into '${WOVCONFIGF}'

  --master MASTER : Overrides the master project. (DEFAULT: parent directory name)
  --shortcut X    : Overrides the project shortcut used in ${WOVCONFIGF}:.projects. (DEFAULT: [PROJECT] or [PROJECT][MSCODE]

  --ref PROJECT   : crossreferences another project X in ('${WOVCONFIGF}':.projects)
  --repo REPOEXT  : override the repository extention name
  --reposerver WOV_CODEREPOARCHIVE :
                  : override the global configuration's Code Repository Archive (${WOVCONFIGF}:.archives.coderepo)

  Local Archive settings: (override each other in order of left to right)
  --local-archives X : base archive for Secrets, DataBases and DataSets
  --searchive X      : base archve for Secrets
  --dbarchive X      : base archve for DataBases
  --dsarchive X      : base archve for DataSets

Exit Codes
101 - Not in master project directory 
102 - Exising directory. Use --purpose-code to checkout a repo for an alternate purpose."
103 - Failed reading from ${WOVCONFIGF}. Does it exist?
104 - Differences in project definition. Warnings given. Exiting.
105 - remote repository does not exist to clone from.
106 - Linking Local Archives failed.
107 - Existing repo already checked out... exiting.
108 - Existing repository is at 'REPODIR', and is not from 'WOV_CODEREPOARCHIVE/REPOEXT'. Exiting."

EOF
}

ISWOVPROJECT="0"
. wov-env-ops fDisplayOptions "$@"
if [ ${WOV_DODEFAULTCOMMAND} -eq 0 ]; then exit 0; fi
. wov-env-common
. wov-init-common

# ---------------------------------------------------------------------
function doShowCheckoutEnvs()
{
  for f in "${VARDEPS[@]}"; do
    echo "${f}=${!f}"
  done
}



# --------------------------------------------------------------------
# Create and Validate if not exists
if [ ! -e "${WOVCONFIGF}" ]; then
  iGlobalConfig_CreateIfNotExists || exit 1
fi
iGlobalConfig_Validate || exit 1

# --------------------------------------------------------------------
# Read in (so can overwrite below)
iGlobalConfig_ReadIn || exit 1


# --------------------------------------------------------------------
WOV_SEADIR="${WOV_LOCALARCHIVEBASE}/searchive"
WOV_DBADIR="${WOV_LOCALARCHIVEBASE}/dbarchive"
WOV_DSADIR="${WOV_LOCALARCHIVEBASE}/dsarchive"


COMMAND='checkout'


# ---------------------------------------------------------------------
# Handle Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "--config-only" ]; then
    COMMAND='config-only'
    shift

  elif [ "$1" == "--envs" ] || [ "$1" == "-e" ]; then
    COMMAND='envs'
    shift

  elif [ "$1" == "--usercode" ]; then
    shift
    WOV_ME="${1}"
    shift

  # ---------------------------------------------------------------------
  # OVERRIDES
  # ---------------------------------------------------------------------
  elif [ "$1" == "--local-archives" ]; then
    shift
    WOV_LOCALARCHIVEBASE="${1}"
    WOV_SEADIR="${WOV_LOCALARCHIVEBASE}/searchive"
    WOV_DBADIR="${WOV_LOCALARCHIVEBASE}/dbarchive"
    WOV_DSADIR="${WOV_LOCALARCHIVEBASE}/dsarchive"
#    WOV_SEADIR="$(realpath "$1/searchive")"
#    WOV_DBADIR="$(realpath "$1/dbarchive")"
#    WOV_DSADIR="$(realpath "$1/dsarchive")"
    shift

  elif [ "$1" == "--searchive" ]; then
    shift
    WOV_SEADIR="$(realpath "$1")"
    shift

  elif [ "$1" == "--dbarchive" ]; then
    shift
    WOV_DBADIR="$(realpath "$1")"
    shift

  elif [ "$1" == "--dsarchive" ]; then
    shift
    WOV_DSADIR="$(realpath "$1")"
    shift

  elif [ "$1" == "--master" ]; then
    shift
    oWOV_MASTERPROJECT="$1"
    shift

  elif [ "$1" == "--shortcut" ]; then
    shift
    oPROJSHORTCUT="$1"
    shift

  elif [ "$1" == "--repo" ]; then
    shift
    oREPOEXT="$1"
    shift

  elif [ "$1" == "--reposerver" ]; then
    shift
    oWOV_CODEREPOARCHIVE="$1"
    shift

  # ---------------------------------------------------------------------
  # /OVERRIDES
  # ---------------------------------------------------------------------

  elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    shift
    fDisplayOptions

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done


# --------------------------------------------------------------------- 
# Var Defaults
GLOBALDIR=`pwd`
WOV_MASTERPROJECT=$([ "${oWOV_MASTERPROJECT}" == "" ] && (basename "${GLOBALDIR}") || echo "${oWOV_MASTERPROJECT}")
WOV_PROJECT=$1
MSCODE=$2
REPODIR=$(WovPathExt pp "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${MSCODE}")
REPOFULLDIR="$(realpath ../${REPODIR})"
#REPOEXT=`echo ${REPODIR} | tr '_' '-' `
REPOEXT=$([ "${oREPOEXT}" == "" ] && echo $(WovPathExt pr "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${MSCODE}") || echo "${oREPOEXT}") 
WOV_BASEDIR="$(realpath "`pwd`/../${REPODIR}")"
WOV_BASEDIR="$(pwd | rev | cut -d'/' -f2- | rev)/${REPODIR}"
PROJSHORTCUT=$([ "${oPROJSHORTCUT}" == "" ] && echo "${WOV_PROJECT}${MSCODE}" || echo "${oPROJSHORTCUT}")
WOV_CODEREPOARCHIVE=$([ "${oWOV_CODEREPOARCHIVE}" == "" ] && echo "${WOV_CODEREPOARCHIVE}" || echo "${oWOV_CODEREPOARCHIVE}")
WOV_CONFIGFILE_MINERAW="${WOV_BASEDIR}/${WOV_CONFIGFILE_MINE}"
WOV_CONFIGFILE_MAINRAW="${WOV_BASEDIR}/${WOV_CONFIGFILE_MAIN}"

# remote repo could be a local file, so use realpath if it is to ensure full path
REPOproto="$(echo "${WOV_CODEREPOARCHIVE}" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
if [ "${REPOproto}" == "" ]; then WOV_CODEREPOARCHIVE=$(realpath ${WOV_CODEREPOARCHIVE}); fi


if [ "${WOV_PROJECT}" == "" ]; then fDisplayOptions; exit 1; fi



# --------------------------------------------------------------------- 
# Run Commands
if  [ ${WOV_DODEFAULTCOMMAND} -eq 1 ]; then

  if [ "${COMMAND}" == "envs" ]; then
    doShowCheckoutEnvs

  elif [ "${COMMAND}" == "config-only" ]; then
    echo "$(GlobalConfig_GenProjectEntry "${PROJSHORTCUT}" "${WOV_BASEDIR}" "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${MSCODE}" "${WOV_ME}" "${REPOEXT}" "${WOV_CODEREPOARCHIVE}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}")"

  elif [ "${COMMAND}" == "checkout" ]; then

    if [ `basename "${GLOBALDIR}"` != "${WOV_MASTERPROJECT}" ]; then
      l_error "Not in master project directory of '$(basename "${GLOBALDIR}")'."
      exit 101
    fi

    l_debug "Find any existing entry for this project : ${PROJSHORTCUT}"
    cat "${WOVCONFIGF}"
    PROJENTRY="$(jq -r ".projects.${PROJSHORTCUT}" "${WOVCONFIGF}")"; Re=$?
    if [ $Re -ne 0 ]; then l_error "Failed reading from '${WOVCONFIGF}'. Does it exist?"; exit 103; fi

    if [ "${PROJENTRY}" == "null" ]; then
      l_ "No current entry. Generating project structure."
      PROJENTRY="$(GlobalConfig_GenProjectEntry "${PROJSHORTCUT}" "${WOV_BASEDIR}" "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${MSCODE}" "${WOV_ME}" "${REPOEXT}" "${WOV_CODEREPOARCHIVE}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}")"
      l_ "Project Entry: ${PROJENTRY}"
      TARGETREPO="${WOV_CODEREPOARCHIVE}/${REPOEXT}"
    else
      l_ "Current entry : '${PROJENTRY}'"
      REQ=( $(echo ${PROJENTRY} | jq -r ".reposerver, .repo") )
 
      l_ "REQ ${REQ[@]}"
      WOV_CODEREPOARCHIVE="${REQ[0]}"
      REPOEXT="${REQ[1]}"
      TARGETREPO="${WOV_CODEREPOARCHIVE}/${REPOEXT}"
    fi


    l_debug "Check to make sure no existing directory : '${REPOFULLDIR}'"
    if [ -d "${REPOFULLDIR}" ]; then
      THEREPOREMOTE=$(git -C "${REPOFULLDIR}" config --get remote.origin.url)
      if [ "${THEREPOREMOTE}" == "${WOV_CODEREPOARCHIVE}/${REPOEXT}" ]; then
        l_warn "... existing repo already checked out... exiting."
        exit 107
      else
        l_error "Existing repository is at '${REPODIR}', and is not from '${WOV_CODEREPOARCHIVE}/${REPOEXT}'. Exiting."
        exit 108
      fi
      l_error "Exising directory of '${REPODIR}'. Use --purpose-code to checkout a repo for an alternate purpose."
      exit 102
    fi


    # l_debug "Generate what this project's global entry will look like"
    # NEWPROJENTRY="$(GlobalConfig_GenProjectEntry "${PROJSHORTCUT}" "${WOV_BASEDIR}" "${WOV_MASTERPROJECT}" "${WOV_PROJECT}" "${MSCODE}" "${WOV_ME}" "${REPOEXT}" "${WOV_CODEREPOARCHIVE}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}")"

    #l_debug  "if existing project entry in ${WOVCONFIGF} .projects, then test a bunch of things"
    #if [ "${CURPROJENTRY}" != "null" ]; then
    #  HASDIFFS=0
#
#      l_debug "warn about all differences and give switch name to resolve it"
#
#      CURPROJENTRY=$(echo "${CURPROJENTRY}" | jq -cS . )
#      NEWPROJENTRY=$(echo "${NEWPROJENTRY}" | jq -cS . )
#      l_debug "Current entry: ${CURPROJENTRY}"
#      # echo "${NEWPROJENTRY}"
#      l_debug "New:\n ${NEWPROJENTRY}"
#      entrydiff=$(cmp <(echo "${CURPROJENTRY}" | jq -cS . ) <(echo "${NEWPROJENTRY}" | jq -cS . ))
#      # TODO
#      l_warn "Differences found : '${entrydiff}'"
#      HASDIFFS=1
#
#    #     if overwrite
#    #       move current entry to an ".projectsold[]" and dump there, add a time of move
#
#      #   - directoyr incorrect
#      #     --overwrite-project-entry
#      #     --shortcut to define a different entry
#      #   - all others
#      #                  
#
#      #   if warnings, exit
#      if [ $HASDIFFS -ne 0 ]; then exit 104; fi
#    fi



    # if existing project entry in ${WOVCONFIGF} .projects
    #   see if in correct directory (because they are checking out a duplicate)
    #   if not in correct directory, 
    #     warn and ask if they want to proceed checking out in a new location
    #     ask if they want to overwrite the entry or create a new
    #     if overwrite
    #       move current entry to an ".projectsold[]" and dump there, add a time of move
    #     else if new
    #       ask for a prjectname to use instead of existing
    #     else
    #       exit 101
    #     fi
    #   else (checking out an existing project entry, in correct directory)
    #     
    #     
    #     warn of any differences in generated vars 
    #     exit 102
    #   fi
    # fi


    # 
    #  Example Structure:
    #  test/test1/test1X       # multi project with two microservices
    #            /test1Y
    #  test/test1_test1Z       # single project with test1Z microservice
    #  test/ref/test1_test1Z   # a reference project for test1_test1Z so you can work in one, and keep a clean copy around for merging or other work
    #  test/issue/test1_test1Z # a copy of test1_test1Z checked out to resolve an issue.



    # ---------------------------------------------------------------------
    # Spew and Checks


#    if [ "${WOV_DBADIR}" == "null" ] || [ "${WOV_DBADIR}" == "" ]; then l_error "'${WOVCONFIGF}' .wovtools.dbarchives entry is missing. Run wov-init-global"; exit 1; fi
#    if [ "${WOV_DSADIR}" == "null" ] || [ "${WOV_DSADIR}" == "" ]; then l_error "'${WOVCONFIGF}' .wovtools.dsarchives entry is missing. Run wov-init-global"; exit 1; fi


    # ---------------------------------------------------------------------
    l_verbose "Starting clone"
    # ---------------------------------------------------------------------
    l_verbose "... cloning into '${REPOFULLDIR}' from '${TARGETREPO}', stage '${WOV_ME}' "
    git clone -b "${WOV_ME}" "${TARGETREPO}" "${REPOFULLDIR}" ; Re=$?
    if [ ${Re} -ne 0 ]; then l_error "Failed to clone repository '${TARGETREPO}' in '${REPOFULLDIR}'."; exit 105; fi

    # ---------------------------------------------------------------------
    l_verbose "Ensure 'wovtools/myconfig.json'"
    # ---------------------------------------------------------------------
    doCreateMyConfigJSON "${REPOFULLDIR}/wovtools/myconfig.json" "${WOV_ME}" "${WOV_MASTERPROJECT}"
    echo "WOV_CONFIGFILE_MINERAW is ${WOV_CONFIGFILE_MINERAW}"
    devfiles=$(jq -r ".secrets.dev[]" "${WOV_CONFIGFILE_MAINRAW}")
    mefiles=""
    for devfile in ${devfiles[@]}; do
      devfileis="${devfile/%_dev.json/_${WOV_ME}.json}"
      mefiles+=" ${devfileis}"
    done
    iProjMyConfig_MergeToSecrets "${WOV_ME}" "${mefiles}"

    # ---------------------------------------------------------------------
    l_verbose "Clone in all (Sub)ordinate Archives (i.e. Local Archives plus any additional)"
    # ---------------------------------------------------------------------
    iProjLocalArchives_FetchSubs "${WOV_BASEDIR}" "${WOV_ME}" "$(echo ${PROJENTRY} | jq -r .sub)"

    # ---------------------------------------------------------------------
    #l_verbose "Link wovtools directory to Local Archives (create as needed)"
    # ---------------------------------------------------------------------
    # iProjLocalArchives_LinkLocalArchives "${WOV_BASEDIR}" "${WOV_MASTERPROJECT}" "${PROJSHORTCUT}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}" "${WOV_USERNAME}" "${WOV_USEREMAIL}" ; Re=$?
    #if [ $Re -ne 0 ]; then exit 106; fi


#    # ---------------------------------------------------------------------
#    l_verbose "Ensure 'wovtools/myconfig.json'"
#    # ---------------------------------------------------------------------
#    doCreateMyConfigJSON "${WOV_BASEDIR}/wovtools/myconfig.json" "${WOV_ME}" "${WOV_MASTERPROJECT}"






#    l_verbose "Make sure the user provided directories exist"
#
#    iLocalArchives_CheckDirs "${WOV_MASTERPROJECT}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}" ; Re=$?
#    if [ $Re -ne 0 ]; then exit 1; fi
#
#    l_verbose "... make sure Git base repository is set in ${WOVCONFIGF}"
#    if [ "${TARGETREPO}" == "" ]; then
#        l_error "Git repository not set. In ${WOVCONFIGF}, set the .archives.coderepo or .projects.${WOV_PROJECT}.repobase"
#        exit 1
#    fi
#
#    l_verbose "--- ensure in project directory"
#    if [ "${WOV_BASEDIR}" != "${PROJECTDIR}" ]; then
#        l_warn "Checking out into '${WOV_BASEDIR}', when project directory is '${PROJECTDIR}' (from ${WOVCONFIGF} file)."
#          read -r -p "Not in project directory '${PROJECTDIR}'. Will just build a copy here. Continue? [Y/n] " $A
#        case $A in 
#          ""|[Yy][Ee][Ss]|[Yy])
#            ;;
#        [Nn][Oo]|[Nn])
#            l_ "...exiting with no checkout"; exit 0; ;;
#          *)
#            l_ "Invalid input... (${A}). ...exiting with no checkout"; ;;
#        esac
#    fi
#
#    l_verbose "... check for existing repo"
#    if [ -e "${WOV_BASEDIR}" ]; then
#      THEREPOREMOTE=$(git -C "${WOV_BASEDIR}" config --get remote.origin.url)
#      if [ "${THEREPOREMOTE}" == "${TARGETREPO}" ]; then
#        l_ "... existing repo already checked out... continuing."
#      else
#        l_error "Existing repository is at '${WOV_BASEDIR}', and is not from '${TARGETREPO}'. Exiting."
#        exit 1
#      fi
#    else
#      l_verbose "... cloning into '${WOV_BASEDIR}' from '${TARGETREPO}'"
#      git clone "${TARGETREPO}" "${REPOEXT}" ; Re=$?
#      if [ ${Re} -ne 0 ]; then l_error "Failed to clone repository '${TARGETREPO}' in '${REPOEXT}'."; exit 1; fi
#    fi
#
#    l_verbose "Link local archives"
#    iLocalArchives_LinkLocalArchives "${REPOEXT}" "${WOV_MASTERPROJECT}" "${WOV_SEADIR}" "${WOV_DBADIR}" "${WOV_DSADIR}" ; Re=$?
#    if [ $Re -ne 0 ]; then exit 1; fi
#
#    l_verbose "Ensure 'wovtools/myconfig.json'"
#    doCreateMyConfigJSON "${WOV_BASEDIR}/wovtools/myconfig.json" "${WOV_ME}" "${WOV_MASTERPROJECT}"


  else
    l_error "Unknown command '${COMMAND}'".
    fDisplayOptions
    exit 1
  fi
fi

