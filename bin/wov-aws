#!/usr/bin/env bash

# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
wovawsvargs=( "$@" )
set ""
. wov-env --provider
#. <(wov-env --provider --exports)
. wov-ns-check
set -- "${wovawsvargs[@]}"
DOECHO=1
FOLD=$(tput cols)
EXIT=1

export WOV_cluster_dns_domain=`wov-env --var WOV_cluster_dns_domain`


# TODO: fill this function in, and remove from WIAAS
#function doCluster()
#{
#  RANCLUSTER=1
#  export CL_REGION="${AWS_REGION}"
#  export CL_ZONES="${AWS_ZONES}"
#  export CL_VPC="${AWS_VPC}"
#}


# ---------------------------------------------------------------------
function fConvertRegionCodeAWS()
{
  case $1 in
    va) cRC='us-east-1' ;;
    iad) cRC='us-east-1' ;;
    *)
      echo
      echo "***ERROR: unknown AWS region code of '$1'."
      exit 1
  esac
}


# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [command]

  volume-
    describe
    id
    create
    ensure

  cluster
  
EOF

}

function doVolumeDescribe() 
{
  local VOLNAME=$1
  aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0]' -r
}

function doVolumeID() 
{
  local VOLNAME=$1
  aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0].VolumeId' -r
}

function doVolumeCheck() 
{
  local VOLNAME=$1
  R=$(aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0].VolumeId' -r )
  RET=$?
  if [ "${RET}" != "0" ]; then 
    printf "\n\nERROR: ${R}.\n\n" >&2
    return ${RET};
  elif [ "${R}" == "null" ]; then 
    return 1
  else
    return 0
  fi
}

function doVolumeCreate()
{

  doCluster 

  local CL_ZONES_ARRAY=( $CL_ZONES )
  local VOLNAME=$1
  local VOLSIZE=$2
  local VOLZONE=$3
  if [ "${VOLZONE}" == "" ]; then VOLZONE=${CL_ZONES_ARRAY[0]}; fi
  local AVAILZONE="${CL_REGION}${VOLZONE}"
  local ISBAD=0

  if [ "${VOLNAME}" == "" ]; then printf "\n\nERROR: No VOLNAME. Pass a volume name as param 1.\n\n"; ISBAD=1; fi
  if [ "${VOLSIZE}" == "" ]; then printf "\n\nERROR: No VOLSIZE. Pass a volume size in MB as param 2.\n\n"; ISBAD=1; fi
  if [ "${CL_REGION}" == "" ]; then printf "\n\nERROR: No CL_REGION.\n\n"; ISBAD=1; fi
  if [ "${AVAILZONE}" == "" ] || [ "${AVAILZONE}" == "${CL_REGION}" ]; then printf "\n\nERROR: No Availability Zone '${AVAILZONE}'. CL_REGION, passed in zone and/or CL_ZONES_ARRAY are not set.\n\n"; ISBAD=1; fi
  if [ "${ISBAD}" == "1" ]; then exit 1; fi

  local RES=`aws ec2 create-volume --size ${VOLSIZE} --region ${CL_REGION} \
    --availability-zone ${AVAILZONE} --volume-type gp2 \
    --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=${VOLNAME}},{Key=KubernetesCluster,Value=${WOV_CLUSTER}.${WOV_cluster_dns_domain}}]" | jq ".VolumeId" -r`
  RET=$?
  #echo "Create: $RES"
  echo ${RES}
  return $RET
}

function doVolumeEnsure() 
{
  local VOLNAME=$1
  local VOLSIZE=$2
  local VOLZONE=$3

  local VOLID=`doVolumeID ${VOLNAME}`
  local VOLCHECK=$?
  if [ "${VOLID}" == "null" ] || [ "${VOLCHECK}" != "0" ]; then 
    VOLID=`doVolumeCreate ${VOLNAME} ${VOLSIZE} ${VOLZONE}`
    if [ ${DOECHO} -ge 2 ]; then echo "volume ${VOLNAME} created as ${VOLID}"; fi
  else 
    if [ ${DOECHO} -ge 2 ]; then echo "volume ${VOLNAME} exists as ${VOLID}"; fi
  fi

  echo ${VOLID}
  return 0
}



# ---------------------------------------------------------------------
# Handle Modifying Params
# ---------------------------------------------------------------------
while [[ $1 =~ ^- ]]; do

  if [ "$1" == "-q" ]; then
    shift
    DOECHO=0

  elif [ "$1" == "-v" ]; then
    shift
    DOECHO=2

  elif [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    fDisplayOptions
    exit 0

  else
    echo
    echo "***ERROR: unknown option '$1'."
    echo
    fDisplayOptions
    exit 1
  fi
done

COMMAND=$1
shift

if   [ "${COMMAND}" == "volume-id" ]; then
  doVolumeID       $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-describe" ]; then
  doVolumeDescribe $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-check" ]; then
  doVolumeCheck    $*
  EXIT=$?
  if [ "$EXIT" != "0" ]; then printf "\n\nCould not find volume with name '$*'.\n\n" >&2 ; fi
elif [ "${COMMAND}" == "volume-create" ]; then
  doVolumeCreate   $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-ensure" ]; then
  doVolumeEnsure   $*
  EXIT=$?

elif [ "${COMMAND}" == "cluster" ]; then
  echo "UNSUPPORTED: Use specific cloud info."
#  doCluster
#  EXIT=1
  exit 1

else
  printf "\n\nERROR: unknown command \"${COMMAND}\".\n\n" 1>&2
fi


return ${EXIT}
