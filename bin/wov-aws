#!/usr/bin/env bash

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
function fDisplayOptions()
{
  cat <<EOF | fold -w ${FOLD} -s


usage: `basename $0` [command]

TODO - read the code for now

  convertrc X
  volume-
    describe
    id
    create
    ensure

  cluster
  
EOF

}

. wov-env-ops fDisplayOptions "$@"


# ---------------------------------------------------------------------
# Pre import of env
# ---------------------------------------------------------------------
COMMAND=$1
shift

. wov-env-provider-common
if     [ "${COMMAND}" == "convertrc" ]; then
  fConvertRegionCodeAWS $*
  exit $?
fi




# ---------------------------------------------------------------------
# Import Env
# ---------------------------------------------------------------------
. provider-wov-env-aws
. <(wov-env --envs --provider)
#wovawsvargs=( "$@" )
#set ""
#. <(wov-env --provider)
##. <(wov-env --provider --exports)
##. wov-ns-check
#set -- "${wovawsvargs[@]}"

DOECHO=1
FOLD=$(tput cols)
EXIT=1

#export WOV_cluster_dns_domain=`wov-env --var WOV_cluster_dns_domain`


# TODO: fill this function in, and remove from WIAAS
#function doCluster()
#{
#  RANCLUSTER=1
#  export CL_REGION="${AWS_REGION}"
#  export CL_ZONES="${AWS_ZONES}"
#  export CL_VPC="${AWS_VPC}"
#}


# NOTE: in provider-wov-env-aws
# ---------------------------------------------------------------------
#function fConvertRegionCodeAWS()
#{
#  echo "fConvertREgionCodeAWS $1"
#  case $1 in
#    va) cRC='us-east-1' ;;
#    iad) cRC='us-east-1' ;;
#    *)
#      echo
#      echo "***ERROR: unknown AWS region code of '$1'."
#      exit 1
#  esac
#}



function doVolumeDescribe() 
{
  local VOLNAME=$1
  echo "do 1"
  aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0]' -r
}

function doVolumeID() 
{
  local VOLNAME=$1
  echo "do 2"
  aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0].VolumeId' -r
}

function doVolumeCheck() 
{
  local VOLNAME=$1
  echo "do 3"
  R=$(aws ec2 describe-volumes --filter Name="tag:Name",Values=\"${VOLNAME}\" | jq '.Volumes[0].VolumeId' -r )
  RET=$?
  if [ "${RET}" != "0" ]; then 
    printf "\n\nERROR: ${R}.\n\n" >&2
    return ${RET};
  elif [ "${R}" == "null" ]; then 
    return 1
  else
    return 0
  fi
}

function doVolumeCreate()
{

  doCluster 

  local CL_ZONES_ARRAY=( $CL_ZONES )
  local VOLNAME=$1
  local VOLSIZE=$2
  local VOLZONE=$3
  if [ "${VOLZONE}" == "" ]; then VOLZONE=${CL_ZONES_ARRAY[0]}; fi
  local AVAILZONE="${CL_REGION}${VOLZONE}"
  local ISBAD=0

  if [ "${VOLNAME}" == "" ]; then printf "\n\nERROR: No VOLNAME. Pass a volume name as param 1.\n\n"; ISBAD=1; fi
  if [ "${VOLSIZE}" == "" ]; then printf "\n\nERROR: No VOLSIZE. Pass a volume size in MB as param 2.\n\n"; ISBAD=1; fi
  if [ "${CL_REGION}" == "" ]; then printf "\n\nERROR: No CL_REGION.\n\n"; ISBAD=1; fi
  if [ "${AVAILZONE}" == "" ] || [ "${AVAILZONE}" == "${CL_REGION}" ]; then printf "\n\nERROR: No Availability Zone '${AVAILZONE}'. CL_REGION, passed in zone and/or CL_ZONES_ARRAY are not set.\n\n"; ISBAD=1; fi
  if [ "${ISBAD}" == "1" ]; then exit 1; fi

  local RES=`aws ec2 create-volume --size ${VOLSIZE} --region ${CL_REGION} \
    --availability-zone ${AVAILZONE} --volume-type gp2 \
    --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=${VOLNAME}},{Key=KubernetesCluster,Value=${WOV_CLUSTER}.${WOV_cluster_dns_domain}}]" | jq ".VolumeId" -r`
  RET=$?
  #echo "Create: $RES"
  echo ${RES}
  return $RET
}

function doVolumeEnsure() 
{
  local VOLNAME=$1
  local VOLSIZE=$2
  local VOLZONE=$3

  local VOLID=`doVolumeID ${VOLNAME}`
  local VOLCHECK=$?
  if [ "${VOLID}" == "null" ] || [ "${VOLCHECK}" != "0" ]; then 
    VOLID=`doVolumeCreate ${VOLNAME} ${VOLSIZE} ${VOLZONE}`
    if [ ${DOECHO} -ge 2 ]; then echo "volume ${VOLNAME} created as ${VOLID}"; fi
  else 
    if [ ${DOECHO} -ge 2 ]; then echo "volume ${VOLNAME} exists as ${VOLID}"; fi
  fi

  echo ${VOLID}
  return 0
}

function doGrantUserAccessToS3()
{
  local AWSUser=$1
  local PolicyName="S3-WovToolsProject-k8sarchive-${WOV_PROJECT}-${WOV_CLUSTER}"
  local UserCode=$2
  local f=".tmp.$$"


  touch $f
  chmod 600 $f
  cat <<EOF > $f
{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Effect": "Allow",
          "Action":   ["s3:PutObject","s3:GetObject"],
          "Resource": "arn:aws:s3:::${WOV_ARCHIVEENV:5}/${WOV_CLUSTER}/${WOV_PROJECT}/${UserCode}/*"
        }
  ]
}
EOF

  echo "Summary: "
  cat $f
  echo "AWS Command: aws iam put-user-policy --user-name "${AWSUser}" --policy-name "${PolicyName}" --policy-document 'file://$f'"
  echo ""
  read -r -p "Grant user access? [y/N]" A
  case $A in
    [Yy]|[Yy][Ee][Ss])
      echo ""
      ;;
    *)
      echo "  exiting. NO ACTION TAKEN."
      rm ./.tmp.$$
      exit 1
      ;;
  esac

  # Run command
  set -x
  aws iam put-user-policy --user-name "${AWSUser}" --policy-name "${PolicyName}" --policy-document file://$f
  if [ $? -ne 0 ]; then
    #rm "$f"
    echo "Failed" 
    exit 1
#  else
#    rm "$f"
  fi
}

# https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_codecommit_pull.html
# https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#managed-policies
function doGrantUserAccessToCodeCommit()
{
  local REPO=$1
  local Branch=$2
  local AWSUser=$3
  local PolicyName="CodeCommit-$4"
  local Conditions=
  local RESOURCE="arn:aws:codecommit:us-east-1:*:${REPO}"

  if [ "${REPO}" == "" ]; then l_error "No repository name provided as param 1."; exit 1; fi
  if [ "${Branch}" == "" ]; then l_error "No branch name provided as param 2."; exit 1; fi
  if [ "${AWSUser}" == "" ]; then l_error "No AWSUser specified as param 3."; exit 1; fi
  if [ "${4}" == "" ]; then l_error "No policy name provided as param 4."; exit 1; fi

  if [ "${Branch}" == "full" ]; then
    read -r -p "WARNING: Granting user '${AWSUser}' access to all branches of '${REPO}'. Correct? [y/N]" A
    case $A in
      [Yy]|[Yy][Ee][Ss])
        Conditions=
        ;;
      *)
        echo "  exiting. NO ACTION TAKEN."
        exit 1
        ;;
    esac
  else
    read -r -d '' Conditions <<EOF
        "StringEquals": {
          "codecommit:References": [ "refs/heads/${Branch}" ]
        }
EOF
  fi


  touch ./.tmp.$$
  chmod 600 ./.tmp.$$
  cat <<EOF > ./.tmp.$$
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "codecommit:GitPull"
      ],
      "Resource": "${RESOURCE}"
    },
    {
      "Effect": "Allow",
      "Action": [
        "codecommit:GitPush"
      ],
      "Resource": "${RESOURCE}",
      "Condition": {
        ${Conditions}
      }
    }
  ]
}
EOF

  echo "Summary: "
  echo "  REPO     : ${REPO}"
  echo "  Branch   : ${Branch}"
  echo "  RESOURCE : ${RESOURCE}"
  echo "  Policy   : ${PolicyName}"
  echo "  AWSUser  : ${AWSUser}"
  cat ./.tmp.$$
  echo ""
  read -r -p "Grant user access? [y/N]" A
  case $A in
    [Yy]|[Yy][Ee][Ss])
      # echo "aws iam put-user-policy --user-name ${AWSUser} --policy-name ${PolicyName} --policy-document file://.tmp.$$"
      echo ""
      ;;
    *)
      echo "  exiting. NO ACTION TAKEN."
      rm ./.tmp.$$
      exit 1
      ;;
  esac

  # Run command
  aws iam put-user-policy --user-name "${AWSUser}" --policy-name "${PolicyName}" --policy-document file://.tmp.$$
  if [ $? -ne 0 ]; then
    rm ./.tmp.$$
    echo "Failed" 
    exit 1
  else
    rm ./.tmp.$$
  fi

}



# ---------------------------------------------------------------------
# Handle Modifying Params
# ---------------------------------------------------------------------
#while [[ $1 =~ ^- ]]; do
#
#  if [ "$1" == "--convertrc" ]; then
#    shift
#    fConvertRegionCodeAWS $1
#    r=$?
#    shift
#    if [ $r -ne 0 ]; then exit $r; fi
#
#  else
#    echo
#    echo "***ERROR: unknown option '$1'."
#    echo
#    fDisplayOptions
#    exit 1
#  fi
#done

COMMAND=$1
shift

if   [ "${COMMAND}" == "volume-id" ]; then
  doVolumeID       $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-describe" ]; then
  doVolumeDescribe $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-check" ]; then
  doVolumeCheck    $*
  EXIT=$?
  if [ "$EXIT" != "0" ]; then printf "\n\nCould not find volume with name '$*'.\n\n" >&2 ; fi
elif [ "${COMMAND}" == "volume-create" ]; then
  doVolumeCreate   $*
  EXIT=$?
elif [ "${COMMAND}" == "volume-ensure" ]; then
  doVolumeEnsure   $*
  EXIT=$?

elif [ "${COMMAND}" == "cluster" ]; then
  echo "UNSUPPORTED: Use specific cloud info."
#  doCluster
#  EXIT=1
  exit 1

elif [ "${COMMAND}" == "repoaccess" ]; then
  doGrantUserAccessToCodeCommit"${@}"

elif [ "${COMMAND}" == "k8saccess" ]; then
  doGrantUserAccessToS3 "${@}"

else
  printf "ERROR: unknown command \"${COMMAND}\".\n" 1>&2
fi


exit ${EXIT}
